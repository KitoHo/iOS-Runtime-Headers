/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AVFoundation.framework/AVFoundation
 */

@class AVAssetWriterInputConfigurationState, AVAssetWriterInputPassDescription, AVOutputSettings, AVWeakReference, NSArray, NSDictionary, NSString, NSURL;

@interface AVAssetWriterInputHelper : NSObject {
    AVAssetWriterInputConfigurationState *_configurationState;
    AVWeakReference *_weakReferenceToAssetWriterInput;
}

@property short alternateGroupID;
@property(readonly) bool canPerformMultiplePasses;
@property(readonly) AVAssetWriterInputConfigurationState * configurationState;
@property(readonly) AVAssetWriterInputPassDescription * currentPassDescription;
@property bool expectsMediaDataInRealTime;
@property(copy) NSString * extendedLanguageTag;
@property(copy) NSString * languageCode;
@property long long layer;
@property bool marksOutputTrackAsEnabled;
@property int mediaTimeScale;
@property(readonly) NSString * mediaType;
@property(copy) NSArray * metadata;
@property struct CGSize { double x1; double x2; } naturalSize;
@property(readonly) AVOutputSettings * outputSettings;
@property bool performsMultiPassEncodingIfSupported;
@property(readonly) struct __CVPixelBufferPool { }* pixelBufferPool;
@property long long preferredMediaChunkAlignment;
@property struct { long long x1; int x2; unsigned int x3; long long x4; } preferredMediaChunkDuration;
@property long long preferredMediaChunkSize;
@property float preferredVolume;
@property(getter=isReadyForMoreMediaData,readonly) bool readyForMoreMediaData;
@property(copy) NSURL * sampleReferenceBaseURL;
@property(readonly) bool shouldRespondToInitialPassDescription;
@property(readonly) struct opaqueCMFormatDescription { }* sourceFormatHint;
@property(copy) NSDictionary * sourcePixelBufferAttributes;
@property(readonly) long long status;
@property(readonly) int trackID;
@property(readonly) NSDictionary * trackReferences;
@property struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } transform;
@property(retain) AVWeakReference * weakReferenceToAssetWriterInput;

- (void)addTrackAssociationWithTrackOfInput:(id)arg1 type:(id)arg2;
- (short)alternateGroupID;
- (bool)appendPixelBuffer:(struct __CVBuffer { }*)arg1 withPresentationTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2;
- (bool)appendSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1;
- (id)associatedInputsWithTrackAssociationType:(id)arg1;
- (id)availableTrackAssociationTypes;
- (bool)canAddTrackAssociationWithTrackOfInput:(id)arg1 type:(id)arg2;
- (bool)canPerformMultiplePasses;
- (bool)canStartRespondingToEachPassDescriptionReturningReason:(id*)arg1;
- (id)configurationState;
- (id)currentPassDescription;
- (void)dealloc;
- (id)description;
- (void)didStartInitialSession;
- (bool)expectsMediaDataInRealTime;
- (id)extendedLanguageTag;
- (id)initWithConfigurationState:(id)arg1;
- (bool)isReadyForMoreMediaData;
- (id)languageCode;
- (long long)layer;
- (void)markAsFinished;
- (void)markCurrentPassAsFinished;
- (bool)marksOutputTrackAsEnabled;
- (int)mediaTimeScale;
- (id)mediaType;
- (id)metadata;
- (struct CGSize { double x1; double x2; })naturalSize;
- (id)outputSettings;
- (bool)performsMultiPassEncodingIfSupported;
- (struct __CVPixelBufferPool { }*)pixelBufferPool;
- (long long)preferredMediaChunkAlignment;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })preferredMediaChunkDuration;
- (long long)preferredMediaChunkSize;
- (float)preferredVolume;
- (void)prepareToEndSession;
- (bool)prepareToFinishWritingReturningError:(id*)arg1;
- (void)requestMediaDataWhenReadyOnQueue:(id)arg1 usingBlock:(id)arg2;
- (id)sampleReferenceBaseURL;
- (void)setAlternateGroupID:(short)arg1;
- (void)setExpectsMediaDataInRealTime:(bool)arg1;
- (void)setExtendedLanguageTag:(id)arg1;
- (void)setLanguageCode:(id)arg1;
- (void)setLayer:(long long)arg1;
- (void)setMarksOutputTrackAsEnabled:(bool)arg1;
- (void)setMediaTimeScale:(int)arg1;
- (void)setMetadata:(id)arg1;
- (void)setNaturalSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setPerformsMultiPassEncodingIfSupported:(bool)arg1;
- (void)setPreferredMediaChunkAlignment:(long long)arg1;
- (void)setPreferredMediaChunkDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setPreferredMediaChunkSize:(long long)arg1;
- (void)setPreferredVolume:(float)arg1;
- (void)setSampleReferenceBaseURL:(id)arg1;
- (void)setSourcePixelBufferAttributes:(id)arg1;
- (void)setTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setWeakReferenceToAssetWriterInput:(id)arg1;
- (bool)shouldRespondToInitialPassDescription;
- (struct opaqueCMFormatDescription { }*)sourceFormatHint;
- (id)sourcePixelBufferAttributes;
- (long long)status;
- (int)trackID;
- (id)trackReferences;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transform;
- (void)transitionAssetWriterAndAllInputsToFailedStatusWithError:(id)arg1;
- (id)transitionToAndReturnTerminalHelperWithTerminalStatus:(long long)arg1;
- (id)weakReferenceToAssetWriterInput;

@end
