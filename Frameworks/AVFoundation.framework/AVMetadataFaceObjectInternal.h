/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AVFoundation.framework/AVFoundation
 */

@interface AVMetadataFaceObjectInternal : NSObject {
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    long long _faceID;
    } _leftEyeBounds;
    int _leftEyeClosedConfidence;
    } _rightEyeBounds;
    int _rightEyeClosedConfidence;
    double _rollAngle;
    int _smileConfidence;
    double _yawAngle;
    bool_hasLeftEyeBounds;
    bool_hasLeftEyeClosedConfidence;
    bool_hasRightEyeBounds;
    bool_hasRightEyeClosedConfidence;
    bool_hasRollAngle;
    bool_hasSmileConfidence;
    bool_hasYawAngle;
}

@property long long faceID;
@property bool hasLeftEyeBounds;
@property bool hasLeftEyeClosedConfidence;
@property bool hasRightEyeBounds;
@property bool hasRightEyeClosedConfidence;
@property bool hasRollAngle;
@property bool hasSmileConfidence;
@property bool hasYawAngle;
@property struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } leftEyeBounds;
@property int leftEyeClosedConfidence;
@property struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } rightEyeBounds;
@property int rightEyeClosedConfidence;
@property double rollAngle;
@property int smileConfidence;
@property double yawAngle;

- (long long)faceID;
- (bool)hasLeftEyeBounds;
- (bool)hasLeftEyeClosedConfidence;
- (bool)hasRightEyeBounds;
- (bool)hasRightEyeClosedConfidence;
- (bool)hasRollAngle;
- (bool)hasSmileConfidence;
- (bool)hasYawAngle;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })leftEyeBounds;
- (int)leftEyeClosedConfidence;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rightEyeBounds;
- (int)rightEyeClosedConfidence;
- (double)rollAngle;
- (void)setFaceID:(long long)arg1;
- (void)setHasLeftEyeBounds:(bool)arg1;
- (void)setHasLeftEyeClosedConfidence:(bool)arg1;
- (void)setHasRightEyeBounds:(bool)arg1;
- (void)setHasRightEyeClosedConfidence:(bool)arg1;
- (void)setHasRollAngle:(bool)arg1;
- (void)setHasSmileConfidence:(bool)arg1;
- (void)setHasYawAngle:(bool)arg1;
- (void)setLeftEyeBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setLeftEyeClosedConfidence:(int)arg1;
- (void)setRightEyeBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setRightEyeClosedConfidence:(int)arg1;
- (void)setRollAngle:(double)arg1;
- (void)setSmileConfidence:(int)arg1;
- (void)setYawAngle:(double)arg1;
- (int)smileConfidence;
- (double)yawAngle;

@end
