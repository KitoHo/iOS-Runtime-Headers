/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@class <UITextInputDelegate>, <UITextInputTokenizer>, NSDictionary, NSString, UIColor, UIImage, UITextInputTraits, UITextInteractionAssistant, UITextPosition, UITextRange, UIView;

@interface UIDefaultKeyboardInput : UIView <UIKeyboardInput, UITextInputPrivate> {
    UITextInputTraits *m_traits;
}

@property bool acceptsEmoji;
@property bool acceptsFloatingKeyboard;
@property bool acceptsSplitKeyboard;
@property long long autocapitalizationType;
@property(copy) NSString * autocorrectionContext;
@property long long autocorrectionType;
@property(readonly) UITextPosition * beginningOfDocument;
@property bool contentsIsSingleValue;
@property(copy,readonly) NSString * debugDescription;
@property bool deferBecomingResponder;
@property(copy,readonly) NSString * description;
@property bool disablePrediction;
@property bool displaySecureTextUsingPlainText;
@property int emptyContentReturnKeyType;
@property bool enablesReturnKeyAutomatically;
@property bool enablesReturnKeyOnNonWhiteSpaceContent;
@property(readonly) UITextPosition * endOfDocument;
@property bool forceEnableDictation;
@property(readonly) unsigned long long hash;
@property <UITextInputDelegate> * inputDelegate;
@property(retain) UIColor * insertionPointColor;
@property unsigned long long insertionPointWidth;
@property(readonly) UITextInteractionAssistant * interactionAssistant;
@property bool isSingleLineDocument;
@property long long keyboardAppearance;
@property long long keyboardType;
@property bool learnsCorrections;
@property(readonly) UITextRange * markedTextRange;
@property(copy) NSDictionary * markedTextStyle;
@property(copy) NSString * responseContext;
@property bool returnKeyGoesToNextResponder;
@property long long returnKeyType;
@property(getter=isSecureTextEntry) bool secureTextEntry;
@property(copy) UITextRange * selectedTextRange;
@property long long selectionAffinity;
@property(retain) UIColor * selectionBarColor;
@property(retain) UIImage * selectionDragDotImage;
@property long long selectionGranularity;
@property(retain) UIColor * selectionHighlightColor;
@property int shortcutConversionType;
@property long long spellCheckingType;
@property(readonly) Class superclass;
@property bool suppressReturnKeyStyling;
@property(readonly) UIView * textInputView;
@property int textLoupeVisibility;
@property int textSelectionBehavior;
@property id textSuggestionDelegate;
@property struct __CFCharacterSet { }* textTrimmingSet;
@property(readonly) <UITextInputTokenizer> * tokenizer;
@property bool useInterfaceLanguageForLocalization;

- (bool)acceptsEmoji;
- (long long)baseWritingDirectionForPosition:(id)arg1 inDirection:(long long)arg2;
- (bool)becomesEditableWithGestures;
- (id)beginningOfDocument;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })caretRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })caretRectForPosition:(id)arg1;
- (unsigned short)characterAfterCaretSelection;
- (unsigned short)characterBeforeCaretSelection;
- (unsigned short)characterInRelationToCaretSelection:(int)arg1;
- (id)characterRangeAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)characterRangeByExtendingPosition:(id)arg1 inDirection:(long long)arg2;
- (id)closestPositionToPoint:(struct CGPoint { double x1; double x2; })arg1 withinRange:(id)arg2;
- (id)closestPositionToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (long long)comparePosition:(id)arg1 toPosition:(id)arg2;
- (void)confirmMarkedText:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertCaretRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)dealloc;
- (id)delegate;
- (void)deleteBackward;
- (id)endOfDocument;
- (void)extendCurrentSelection:(int)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })firstRectForRange:(id)arg1;
- (id)fontForCaretSelection;
- (bool)forceEnableDictation;
- (void)forwardInvocation:(id)arg1;
- (bool)hasContent;
- (bool)hasSelection;
- (bool)hasText;
- (id)inputDelegate;
- (void)insertText:(id)arg1;
- (id)interactionAssistant;
- (bool)isEditable;
- (bool)isEditing;
- (bool)isPosition:(id)arg1 atBoundary:(long long)arg2 inDirection:(long long)arg3;
- (bool)isPosition:(id)arg1 withinTextUnit:(long long)arg2 inDirection:(long long)arg3;
- (bool)isSecure;
- (bool)isShowingPlaceholder;
- (id)markedTextRange;
- (id)markedTextStyle;
- (id)methodSignatureForSelector:(SEL)arg1;
- (id)nextUnperturbedDictationResultBoundaryFromPosition:(id)arg1;
- (long long)offsetFromPosition:(id)arg1 toPosition:(id)arg2;
- (id)positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3;
- (id)positionFromPosition:(id)arg1 offset:(long long)arg2;
- (id)positionFromPosition:(id)arg1 toBoundary:(long long)arg2 inDirection:(long long)arg3;
- (id)positionWithinRange:(id)arg1 farthestInDirection:(long long)arg2;
- (id)rangeByExtendingCurrentSelection:(int)arg1;
- (id)rangeByMovingCurrentSelection:(int)arg1;
- (id)rangeEnclosingPosition:(id)arg1 withGranularity:(long long)arg2 inDirection:(long long)arg3;
- (id)rectsForNSRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)replaceCurrentWordWithText:(id)arg1;
- (void)replaceRange:(id)arg1 withText:(id)arg2;
- (void)selectAll;
- (id)selectedTextRange;
- (bool)selectionAtDocumentStart;
- (bool)selectionAtWordStart;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })selectionRange;
- (id)selectionRectsForRange:(id)arg1;
- (int)selectionState;
- (id)selectionView;
- (void)setAcceptsEmoji:(bool)arg1;
- (void)setBaseWritingDirection:(long long)arg1 forRange:(id)arg2;
- (void)setBecomesEditableWithGestures:(bool)arg1;
- (void)setForceEnableDictation:(bool)arg1;
- (void)setInputDelegate:(id)arg1;
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setMarkedTextStyle:(id)arg1;
- (void)setSecure:(bool)arg1;
- (void)setSelectedTextRange:(id)arg1;
- (void)setSelectionWithPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setText:(id)arg1;
- (void)setupPlaceholderTextIfNeeded;
- (void)takeTraitsFrom:(id)arg1;
- (id)text;
- (id)textColorForCaretSelection;
- (id)textInRange:(id)arg1;
- (id)textInputTraits;
- (id)textRangeFromPosition:(id)arg1 toPosition:(id)arg2;
- (id)tokenizer;
- (void)unmarkText;
- (void)updateSelection;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleBounds;
- (int)wordOffsetInRange:(id)arg1;

@end
