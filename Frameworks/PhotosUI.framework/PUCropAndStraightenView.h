/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/PhotosUI.framework/PhotosUI
 */

@class <PUCropAndStraightenViewDelegate>, NSString, UIImage, UIImageView, UIScrollView, UIView;

@interface PUCropAndStraightenView : UIView <UIScrollViewDelegate, UIGestureRecognizerDelegate> {
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    } __fittingRegion;
    UIImageView *__imageView;
    double __preferredZoomScale;
    UIScrollView *__scrollView;
    UIView *__scrollViewReference;
    } _canvasFrame;
    } _cropRect;
    <PUCropAndStraightenViewDelegate> *_delegate;
    UIImage *_image;
    double _rotationAngle;
    double _straightenAngle;
    bool__updatingForCrop;
    bool__updatingForFit;
    bool__updatingForStraighten;
    bool_tracking;
}

@property(setter=_setFittingRegion:) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _fittingRegion;
@property(setter=_setImageView:,retain) UIImageView * _imageView;
@property(setter=_setPreferredZoomScale:) double _preferredZoomScale;
@property(getter=_isRotationSideways,readonly) bool _rotationSideways;
@property(readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } _rotationTransform;
@property(setter=_setScrollView:,retain) UIScrollView * _scrollView;
@property(setter=_setScrollViewReference:,retain) UIView * _scrollViewReference;
@property(getter=_isUpdatingForCrop,setter=_setUpdatingForCrop:) bool _updatingForCrop;
@property(getter=_isUpdatingForFit,setter=_setUpdatingForFit:) bool _updatingForFit;
@property(getter=_isUpdatingForStraighten,setter=_setUpdatingForStraighten:) bool _updatingForStraighten;
@property struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } canvasFrame;
@property struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } cropRect;
@property(copy,readonly) NSString * debugDescription;
@property(getter=isDecelerating,readonly) bool decelerating;
@property <PUCropAndStraightenViewDelegate> * delegate;
@property(copy,readonly) NSString * description;
@property(readonly) unsigned long long hash;
@property(retain) UIImage * image;
@property(readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } imageCropRect;
@property double rotationAngle;
@property double straightenAngle;
@property(readonly) Class superclass;
@property(getter=isTracking) bool tracking;

- (void).cxx_destruct;
- (struct CGSize { double x1; double x2; })_boundingSizeOfStraightenedRectWithSize:(struct CGSize { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_croppingRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_fittingRegion;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_fullCropRect;
- (void)_handleTouchingRecognizer:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_imageBounds;
- (id)_imageView;
- (bool)_isRotationSideways;
- (bool)_isUpdatingForCrop;
- (bool)_isUpdatingForFit;
- (bool)_isUpdatingForStraighten;
- (double)_preferredZoomScale;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_rotationTransform;
- (id)_scrollView;
- (id)_scrollViewReference;
- (void)_setFittingRegion:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setImageView:(id)arg1;
- (void)_setPreferredZoomScale:(double)arg1;
- (void)_setScrollView:(id)arg1;
- (void)_setScrollViewReference:(id)arg1;
- (void)_setTracking:(bool)arg1;
- (void)_setUpdatingForCrop:(bool)arg1;
- (void)_setUpdatingForFit:(bool)arg1;
- (void)_setUpdatingForStraighten:(bool)arg1;
- (struct CGSize { double x1; double x2; })_sizeRotatedIfNeeded:(struct CGSize { double x1; double x2; })arg1;
- (void)_updateScrollInsets;
- (void)_updateScrollOffset;
- (void)_updateScrollView;
- (void)_updateZoomScale;
- (double)_zoomScaleForImageRegion:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toFit:(bool)arg2 viewBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (double)_zoomScaleForImageToFit:(bool)arg1 viewBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (double)_zoomScaleToFillCropRect;
- (double)_zoomScaleToFillStraightenedCropRect;
- (double)_zoomScaleToFitCanvas;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })canvasFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })cropRect;
- (id)delegate;
- (void)fitImageRegion:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inCropRectAnimated:(bool)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (id)image;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })imageCropRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })imageCropRectForViewRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isDecelerating;
- (bool)isTracking;
- (void)layoutSubviews;
- (double)rotationAngle;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(bool)arg2;
- (void)scrollViewDidEndZooming:(id)arg1 withView:(id)arg2 atScale:(double)arg3;
- (void)scrollViewDidScroll:(id)arg1;
- (void)scrollViewDidZoom:(id)arg1;
- (void)setCanvasFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setDelegate:(id)arg1;
- (void)setImage:(id)arg1;
- (void)setRotationAngle:(double)arg1;
- (void)setStraightenAngle:(double)arg1;
- (double)straightenAngle;
- (id)viewForZoomingInScrollView:(id)arg1;

@end
