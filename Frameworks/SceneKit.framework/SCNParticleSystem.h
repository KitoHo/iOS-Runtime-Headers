/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/SceneKit.framework/SceneKit
 */

@class NSArray, NSDictionary, NSString, SCNGeometry, SCNOrderedDictionary, SCNParticleSystem, UIColor;

@interface SCNParticleSystem : NSObject <NSCopying, NSSecureCoding, SCNAnimatable> {
    struct SCNVector3 { 
        float x; 
        float y; 
        float z; 
    struct SCNVector3 { 
        float x; 
        float y; 
        float z; 
    struct SCNVector4 { 
        float x; 
        float y; 
        float z; 
        float w; 
    unsigned int _isPresentationInstance : 1;
    } _acceleration;
    SCNOrderedDictionary *_animations;
    long long _birthDirection;
    long long _birthLocation;
    double _birthRate;
    double _birthRateVariation;
    long long _blendMode;
    NSArray *_colliderNodes;
    double _dampingFactor;
    double _emissionDuration;
    double _emissionDurationVariation;
    SCNGeometry *_emitterShape;
    } _emittingDirection;
    double _fixedTimeStep;
    double _fresnelExponent;
    double _idleDuration;
    double _idleDurationVariation;
    long long _imageSequenceAnimationMode;
    unsigned long long _imageSequenceColumnCount;
    double _imageSequenceFrameRate;
    double _imageSequenceFrameRateVariation;
    double _imageSequenceInitialFrame;
    double _imageSequenceInitialFrameVariation;
    unsigned long long _imageSequenceRowCount;
    NSString *_name;
    long long _orientationMode;
    double _particleAngle;
    double _particleAngleVariation;
    double _particleAngularVelocity;
    double _particleAngularVelocityVariation;
    double _particleBounce;
    double _particleBounceVariation;
    double _particleCharge;
    double _particleChargeVariation;
    UIColor *_particleColor;
    } _particleColorVariation;
    double _particleFriction;
    double _particleFrictionVariation;
    NSArray *_particleGeometries;
    id _particleImage;
    double _particleLifeSpan;
    double _particleLifeSpanVariation;
    double _particleMass;
    double _particleMassVariation;
    double _particleSize;
    double _particleSizeVariation;
    struct __C3DParticleSystem { } *_particleSystem;
    double _particleVelocity;
    double _particleVelocityVariation;
    NSDictionary *_propertyControllers;
    long long _renderingMode;
    id _reserved;
    long long _seed;
    long long _sortingMode;
    double _speedFactor;
    double _spreadingAngle;
    double _stretchFactor;
    SCNParticleSystem *_systemSpawnedOnCollision;
    SCNParticleSystem *_systemSpawnedOnDying;
    SCNParticleSystem *_systemSpawnedOnLiving;
    double _warmupDuration;
    bool_affectedByGravity;
    bool_affectedByPhysicsFields;
    bool_blackPassEnabled;
    bool_isLocal;
    bool_lightingEnabled;
    bool_loops;
    bool_particleDiesOnCollision;
    bool_physicsCollisionsEnabled;
    bool_softParticlesEnabled;
}

@property struct SCNVector3 { float x1; float x2; float x3; } acceleration;
@property bool affectedByGravity;
@property bool affectedByPhysicsFields;
@property long long birthDirection;
@property long long birthLocation;
@property double birthRate;
@property double birthRateVariation;
@property(getter=isBlackPassEnabled) bool blackPassEnabled;
@property long long blendMode;
@property(copy) NSArray * colliderNodes;
@property double dampingFactor;
@property(copy,readonly) NSString * debugDescription;
@property(copy,readonly) NSString * description;
@property double emissionDuration;
@property double emissionDurationVariation;
@property(retain) SCNGeometry * emitterShape;
@property struct SCNVector3 { float x1; float x2; float x3; } emittingDirection;
@property double fresnelExponent;
@property(readonly) unsigned long long hash;
@property double idleDuration;
@property double idleDurationVariation;
@property long long imageSequenceAnimationMode;
@property unsigned long long imageSequenceColumnCount;
@property double imageSequenceFrameRate;
@property double imageSequenceFrameRateVariation;
@property double imageSequenceInitialFrame;
@property double imageSequenceInitialFrameVariation;
@property unsigned long long imageSequenceRowCount;
@property(getter=isLightingEnabled) bool lightingEnabled;
@property(getter=isLocal) bool local;
@property bool loops;
@property long long orientationMode;
@property double particleAngle;
@property double particleAngleVariation;
@property double particleAngularVelocity;
@property double particleAngularVelocityVariation;
@property double particleBounce;
@property double particleBounceVariation;
@property double particleCharge;
@property double particleChargeVariation;
@property(retain) UIColor * particleColor;
@property struct SCNVector4 { float x1; float x2; float x3; float x4; } particleColorVariation;
@property bool particleDiesOnCollision;
@property double particleFriction;
@property double particleFrictionVariation;
@property(retain) id particleImage;
@property double particleLifeSpan;
@property double particleLifeSpanVariation;
@property double particleMass;
@property double particleMassVariation;
@property double particleSize;
@property double particleSizeVariation;
@property double particleVelocity;
@property double particleVelocityVariation;
@property(copy) NSDictionary * propertyControllers;
@property long long sortingMode;
@property double speedFactor;
@property double spreadingAngle;
@property double stretchFactor;
@property(readonly) Class superclass;
@property(retain) SCNParticleSystem * systemSpawnedOnCollision;
@property(retain) SCNParticleSystem * systemSpawnedOnDying;
@property(retain) SCNParticleSystem * systemSpawnedOnLiving;
@property double warmupDuration;

+ (id)SCNJSExportProtocol;
+ (id)particleSystem;
+ (id)particleSystemNamed:(id)arg1 inDirectory:(id)arg2;
+ (id)particleSystemWithParticleSystemRef:(struct __C3DParticleSystem { }*)arg1;
+ (bool)supportsSecureCoding;

- (void*)__CFObject;
- (void)__removeAnimation:(id)arg1 forKey:(id)arg2;
- (void)_customDecodingOfSCNParticleSystem:(id)arg1;
- (void)_customEncodingOfSCNParticleSystem:(id)arg1;
- (void)_pauseAnimation:(bool)arg1 forKey:(id)arg2;
- (void)_syncEntityObjCModel;
- (void)_syncObjCAnimations;
- (void)_syncObjCModel;
- (struct SCNVector3 { float x1; float x2; float x3; })acceleration;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)addAnimation:(id)arg1;
- (void)addModifierForProperties:(id)arg1 atStage:(long long)arg2 withBlock:(id)arg3;
- (bool)affectedByGravity;
- (bool)affectedByPhysicsFields;
- (id)animationForKey:(id)arg1;
- (id)animationKeys;
- (struct __C3DAnimationManager { struct __CFRuntimeBase { unsigned long long x_1_1_1; unsigned char x_1_1_2[4]; unsigned int x_1_1_3; } x1; struct __C3DModelValueStorage {} *x2; struct __CFDictionary {} *x3; struct __CFDictionary {} *x4; struct __CFSet {} *x5; struct __CFArray {} *x6; boolx7; boolx8; boolx9; struct _C3DAnimationPendingEvent {} *x10; struct __C3DAllocator {} *x11; struct __CFDictionary {} *x12; struct __CFArray {} *x13; double x14; double x15; struct _opaque_pthread_mutex_t { long long x_16_1_1; BOOL x_16_1_2[56]; } x16; int x17; int x18; int x19; int x20; }*)animationManager;
- (bool)areSoftParticlesEnabled;
- (long long)birthDirection;
- (long long)birthLocation;
- (double)birthRate;
- (double)birthRateVariation;
- (bool)blackPassEnabled;
- (long long)blendMode;
- (id)colliderNodes;
- (id)copy;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (double)dampingFactor;
- (void)dealloc;
- (double)emissionDuration;
- (double)emissionDurationVariation;
- (id)emitterShape;
- (struct SCNVector3 { float x1; float x2; float x3; })emittingDirection;
- (void)encodeWithCoder:(id)arg1;
- (double)fixedTimeStep;
- (double)fresnelExponent;
- (void)handleEvent:(long long)arg1 forProperties:(id)arg2 withBlock:(id)arg3;
- (id)identifier;
- (double)idleDuration;
- (double)idleDurationVariation;
- (long long)imageSequenceAnimationMode;
- (unsigned long long)imageSequenceColumnCount;
- (double)imageSequenceFrameRate;
- (double)imageSequenceFrameRateVariation;
- (double)imageSequenceInitialFrame;
- (double)imageSequenceInitialFrameVariation;
- (unsigned long long)imageSequenceRowCount;
- (id)init;
- (id)initPresentationSystemWithSystemRef:(struct __C3DParticleSystem { }*)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithParticleSystemRef:(struct __C3DParticleSystem { }*)arg1;
- (bool)isAnimationForKeyPaused:(id)arg1;
- (bool)isBlackPassEnabled;
- (bool)isLightingEnabled;
- (bool)isLocal;
- (bool)isPausedOrPausedByInheritance;
- (bool)lightingEnabled;
- (bool)loops;
- (id)name;
- (long long)orientationMode;
- (double)particleAngle;
- (double)particleAngleVariation;
- (double)particleAngularVelocity;
- (double)particleAngularVelocityVariation;
- (double)particleBounce;
- (double)particleBounceVariation;
- (double)particleCharge;
- (double)particleChargeVariation;
- (id)particleColor;
- (struct SCNVector4 { float x1; float x2; float x3; float x4; })particleColorVariation;
- (bool)particleDiesOnCollision;
- (double)particleFriction;
- (double)particleFrictionVariation;
- (id)particleGeometries;
- (id)particleImage;
- (double)particleLifeSpan;
- (double)particleLifeSpanVariation;
- (double)particleMass;
- (double)particleMassVariation;
- (double)particleSize;
- (double)particleSizeVariation;
- (struct __C3DParticleSystem { }*)particleSystemRef;
- (double)particleVelocity;
- (double)particleVelocityVariation;
- (void)pauseAnimationForKey:(id)arg1;
- (bool)physicsCollisionsEnabled;
- (id)presentationInstance;
- (id)propertyControllers;
- (void)removeAllAnimations;
- (void)removeAllModifiers;
- (void)removeAnimationForKey:(id)arg1 fadeOutDuration:(double)arg2;
- (void)removeAnimationForKey:(id)arg1;
- (void)removeModifiersOfStage:(long long)arg1;
- (long long)renderingMode;
- (void)reset;
- (void)resumeAnimationForKey:(id)arg1;
- (id)scene;
- (struct __C3DScene { }*)sceneRef;
- (long long)seed;
- (void)setAcceleration:(struct SCNVector3 { float x1; float x2; float x3; })arg1;
- (void)setAffectedByGravity:(bool)arg1;
- (void)setAffectedByPhysicsFields:(bool)arg1;
- (void)setBirthDirection:(long long)arg1;
- (void)setBirthLocation:(long long)arg1;
- (void)setBirthRate:(double)arg1;
- (void)setBirthRateVariation:(double)arg1;
- (void)setBlackPassEnabled:(bool)arg1;
- (void)setBlendMode:(long long)arg1;
- (void)setColliderNodes:(id)arg1;
- (void)setConstraintRef:(struct __C3DParticleSystem { }*)arg1;
- (void)setDampingFactor:(double)arg1;
- (void)setEmissionDuration:(double)arg1;
- (void)setEmissionDurationVariation:(double)arg1;
- (void)setEmitterShape:(id)arg1;
- (void)setEmittingDirection:(struct SCNVector3 { float x1; float x2; float x3; })arg1;
- (void)setFixedTimeStep:(double)arg1;
- (void)setFresnelExponent:(double)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setIdleDuration:(double)arg1;
- (void)setIdleDurationVariation:(double)arg1;
- (void)setImageSequenceAnimationMode:(long long)arg1;
- (void)setImageSequenceColumnCount:(unsigned long long)arg1;
- (void)setImageSequenceFrameRate:(double)arg1;
- (void)setImageSequenceFrameRateVariation:(double)arg1;
- (void)setImageSequenceInitialFrame:(double)arg1;
- (void)setImageSequenceInitialFrameVariation:(double)arg1;
- (void)setImageSequenceRowCount:(unsigned long long)arg1;
- (void)setIsLocal:(bool)arg1;
- (void)setLightingEnabled:(bool)arg1;
- (void)setLocal:(bool)arg1;
- (void)setLoops:(bool)arg1;
- (void)setName:(id)arg1;
- (void)setOrientationMode:(long long)arg1;
- (void)setParticleAngle:(double)arg1;
- (void)setParticleAngleVariation:(double)arg1;
- (void)setParticleAngularVelocity:(double)arg1;
- (void)setParticleAngularVelocityVariation:(double)arg1;
- (void)setParticleBounce:(double)arg1;
- (void)setParticleBounceVariation:(double)arg1;
- (void)setParticleCharge:(double)arg1;
- (void)setParticleChargeVariation:(double)arg1;
- (void)setParticleColor:(id)arg1;
- (void)setParticleColorVariation:(struct SCNVector4 { float x1; float x2; float x3; float x4; })arg1;
- (void)setParticleDiesOnCollision:(bool)arg1;
- (void)setParticleFriction:(double)arg1;
- (void)setParticleFrictionVariation:(double)arg1;
- (void)setParticleGeometries:(id)arg1;
- (void)setParticleImage:(id)arg1;
- (void)setParticleLifeSpan:(double)arg1;
- (void)setParticleLifeSpanVariation:(double)arg1;
- (void)setParticleMass:(double)arg1;
- (void)setParticleMassVariation:(double)arg1;
- (void)setParticleSize:(double)arg1;
- (void)setParticleSizeVariation:(double)arg1;
- (void)setParticleVelocity:(double)arg1;
- (void)setParticleVelocityVariation:(double)arg1;
- (void)setPhysicsCollisionsEnabled:(bool)arg1;
- (void)setPropertyControllers:(id)arg1;
- (void)setRenderingMode:(long long)arg1;
- (void)setSeed:(long long)arg1;
- (void)setSoftParticlesEnabled:(bool)arg1;
- (void)setSortingMode:(long long)arg1;
- (void)setSpeedFactor:(double)arg1;
- (void)setSpreadingAngle:(double)arg1;
- (void)setStretchFactor:(double)arg1;
- (void)setSystemSpawnedOnCollision:(id)arg1;
- (void)setSystemSpawnedOnDying:(id)arg1;
- (void)setSystemSpawnedOnLiving:(id)arg1;
- (void)setWarmupDuration:(double)arg1;
- (bool)softParticlesEnabled;
- (long long)sortingMode;
- (double)speedFactor;
- (double)spreadingAngle;
- (double)stretchFactor;
- (id)systemSpawnedOnCollision;
- (id)systemSpawnedOnDying;
- (id)systemSpawnedOnLiving;
- (short)typeOfProperty:(id)arg1;
- (double)warmupDuration;

@end
