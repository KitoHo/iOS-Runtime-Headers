/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/SpriteKit.framework/SpriteKit
 */

@class CIFilter, NSArray, NSString, SKTexture, SKTextureCache;

@interface SKTexture : NSObject <NSCopying, NSCoding> {
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    struct CGPoint { 
        double x; 
        double y; 
    struct CGPoint { 
        double x; 
        double y; 
    struct CGSize { 
        double width; 
        double height; 
    int _alignment;
    unsigned int *_alphaMap;
    } _alphaMapSize;
    unsigned int _compressedFormat;
    int _compressedSize;
    } _cropOffset;
    } _cropScale;
    CIFilter *_filter;
    NSString *_imgName;
    NSString *_originalAtlasName;
    SKTexture *_originalTexture;
    int _rowLength;
    NSArray *_searchPaths;
    NSString *_subTextureName;
    } _textCoords;
    } _textRect;
    SKTextureCache *_textureCache;
    unsigned int _textureTarget;
    bool_didGenerateMipmaps;
    bool_disableAlpha;
    bool_isCompressed;
    bool_isData;
    bool_isPath;
    bool_isRotated;
    bool_shouldGenerateMipmaps;
}

@property(readonly) unsigned int* alphaMap;
@property(readonly) struct CGSize { double x1; double x2; } alphaMapSize;
@property struct CGPoint { double x1; double x2; } cropOffset;
@property struct CGPoint { double x1; double x2; } cropScale;
@property bool disableAlpha;
@property long long filteringMode;
@property(readonly) bool hasAlpha;
@property(readonly) NSString * imageNameOrPath;
@property(readonly) bool isRepeatable;
@property bool isRotated;
@property(copy) NSString * originalAtlasName;
@property(readonly) struct CGSize { double x1; double x2; } pixelSize;
@property(copy) NSString * subTextureName;
@property unsigned int textureTarget;
@property(readonly) bool useAlpha;
@property bool usesMipmaps;
@property int wrapMode;

+ (void)_addTextureToPreloadlist:(id)arg1;
+ (id)_textureByTransferingData:(char *)arg1 size:(struct CGSize { double x1; double x2; })arg2 rowLength:(unsigned int)arg3 alignment:(unsigned int)arg4;
+ (id)_textureByTransferingData:(char *)arg1 size:(struct CGSize { double x1; double x2; })arg2;
+ (id)_textureWithGLTextureId:(unsigned int)arg1 size:(struct CGSize { double x1; double x2; })arg2;
+ (id)_textureWithImageNamed:(id)arg1;
+ (id)compressedTextureWithData:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2 bitsPerPixel:(unsigned int)arg3 hasAlpha:(bool)arg4;
+ (id)compressedTextureWithData:(id)arg1;
+ (void)deleteUnusedTextures;
+ (id)lookupTextureCacheForName:(id)arg1;
+ (void)preloadTextures:(id)arg1 withCompletionHandler:(id)arg2;
+ (void)preloadTextures;
+ (void)registerTextureCache:(id)arg1 forName:(id)arg2;
+ (id)textureNoiseWithSmoothness:(double)arg1 size:(struct CGSize { double x1; double x2; })arg2 grayscale:(bool)arg3;
+ (id)textureVectorNoiseWithSmoothness:(double)arg1 size:(struct CGSize { double x1; double x2; })arg2;
+ (id)textureWithCGImage:(struct CGImage { }*)arg1 pointSize:(struct CGSize { double x1; double x2; })arg2;
+ (id)textureWithCGImage:(struct CGImage { }*)arg1;
+ (id)textureWithData:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2 flipped:(bool)arg3;
+ (id)textureWithData:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2 rowLength:(unsigned int)arg3 alignment:(unsigned int)arg4;
+ (id)textureWithData:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2;
+ (id)textureWithImage:(id)arg1;
+ (id)textureWithImageNamed:(id)arg1 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
+ (id)textureWithImageNamed:(id)arg1;
+ (id)textureWithImagePath:(id)arg1;
+ (id)textureWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inTexture:(id)arg2;
+ (void)updateTextures;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)_copyImageData;
- (struct CGImage { }*)_createCGImage;
- (void)_ensureImageData;
- (id)_generateNormalMap:(double)arg1 contrast:(double)arg2 multiPass:(unsigned long long)arg3;
- (id)_initWithGLTextureId:(unsigned int)arg1 size:(struct CGSize { double x1; double x2; })arg2;
- (void)_loadOnTextureQueue;
- (struct CGImage { }*)_newTextureFromGLCache;
- (struct CGImage { }*)_rotateCGImage:(struct CGImage { }*)arg1;
- (void)_savePngFromGLCache:(id)arg1;
- (id)_textureCache;
- (unsigned int*)alphaMap;
- (struct CGSize { double x1; double x2; })alphaMapSize;
- (struct CGImage { }*)alphaMask;
- (bool)alphaTestX:(double)arg1 y:(double)arg2;
- (void)commonInit;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (struct CGPoint { double x1; double x2; })cropOffset;
- (struct CGPoint { double x1; double x2; })cropScale;
- (void)dealloc;
- (id)description;
- (bool)disableAlpha;
- (void)encodeWithCoder:(id)arg1;
- (long long)filteringMode;
- (void)generateAlphaMapOfSize:(struct CGSize { double x1; double x2; })arg1 fromImage:(struct CGImage { }*)arg2;
- (int)glTextureId;
- (bool)hasAlpha;
- (id)imageNameOrPath;
- (id)imgName;
- (id)init;
- (void)initTextureCacheWithImageData;
- (id)initWithCoder:(id)arg1;
- (id)initWithImageNamed:(id)arg1;
- (id)initWithImagePath:(id)arg1;
- (bool)isInMemory;
- (bool)isRepeatable;
- (bool)isRotated;
- (void)load;
- (void)loadImageData;
- (void)loadImageDataFromCGImage:(struct CGImage { }*)arg1 pointsSize:(struct CGSize { double x1; double x2; })arg2;
- (bool)loadImageDataFromPVRData:(id)arg1;
- (bool)loadImageDataFromPVRGZData:(id)arg1;
- (id)originalAtlasName;
- (struct CGSize { double x1; double x2; })pixelSize;
- (void)preload;
- (void)preloadWithCompletionHandler:(id)arg1;
- (void)setCropOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setCropScale:(struct CGPoint { double x1; double x2; })arg1;
- (void)setDisableAlpha:(bool)arg1;
- (void)setFilteringMode:(long long)arg1;
- (void)setIsRotated:(bool)arg1;
- (void)setOriginalAtlasName:(id)arg1;
- (void)setSubTextureName:(id)arg1;
- (void)setTextureDimension:(const struct CGSize { double x1; double x2; }*)arg1 withPixelSize:(const struct CGSize { double x1; double x2; }*)arg2;
- (void)setTextureTarget:(unsigned int)arg1;
- (void)setUsesMipmaps:(bool)arg1;
- (void)setWrapMode:(int)arg1;
- (struct CGSize { double x1; double x2; })size;
- (id)subTextureName;
- (id)textureByApplyingCIFilter:(id)arg1;
- (id)textureByGeneratingNormalMap;
- (id)textureByGeneratingNormalMapWithSmoothness:(double)arg1 contrast:(double)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })textureRect;
- (unsigned int)textureTarget;
- (void)unload;
- (bool)useAlpha;
- (bool)usesMipmaps;
- (int)wrapMode;

@end
