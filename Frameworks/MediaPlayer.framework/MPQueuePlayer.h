/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class AVPlayer, AVPlayerItem, AVQueuePlayer, MPAVRoute, MPAVRoutingController, NSArray, NSError, NSMutableArray, NSObject<OS_dispatch_queue>, NSString;

@interface MPQueuePlayer : NSObject <MPAVRoutingControllerDelegate> {
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    AVPlayerItem *_currentItem;
    } _currentTime;
    long long _defaultItemEQPresetType;
    MPAVRoute *_lastPickedRoute;
    id _playbackQueueCommitHandler;
    long long _playbackQueueTransactionCount;
    AVQueuePlayer *_player;
    NSMutableArray *_queuedOperations;
    NSObject<OS_dispatch_queue> *_queuedOperationsAccessQueue;
    float _rate;
    float _rateBeforePlaybackQueueTransaction;
    MPAVRoutingController *_routingController;
    long long _status;
    bool_isExternalPlaybackActive;
    bool_outputObscuredDueToInsufficientExternalProtection;
    bool_pausedForPlaybackQueueTransaction;
    bool_routeDidChangeDuringPlaybackQueueTransaction;
}

@property(readonly) long long _externalProtectionStatus;
@property(readonly) AVPlayer * _player;
@property long long actionAtItemEnd;
@property bool allowsExternalPlayback;
@property(getter=isClosedCaptionDisplayEnabled) bool closedCaptionDisplayEnabled;
@property(readonly) AVPlayerItem * currentItem;
@property(copy,readonly) NSString * debugDescription;
@property long long defaultItemEQPresetType;
@property(copy,readonly) NSString * description;
@property bool disallowsAMRAudio;
@property(readonly) NSError * error;
@property(getter=isExternalPlaybackActive,readonly) bool externalPlaybackActive;
@property(readonly) long long externalPlaybackType;
@property(copy) NSString * externalPlaybackVideoGravity;
@property(readonly) unsigned long long hash;
@property(readonly) bool isPlaybackQueueTransactionActive;
@property(readonly) NSArray * items;
@property(readonly) bool outputObscuredDueToInsufficientExternalProtection;
@property(copy) id playbackQueueCommitHandler;
@property(readonly) id playerAVAudioSession;
@property float rate;
@property(readonly) long long status;
@property(readonly) Class superclass;
@property bool usesAudioOnlyModeForExternalPlayback;
@property bool usesExternalPlaybackWhileExternalScreenIsActive;

- (void).cxx_destruct;
- (bool)_CALayerDestinationIsTVOut;
- (long long)_externalProtectionStatus;
- (id)_player;
- (bool)_resumePlayback:(double)arg1 error:(id*)arg2;
- (void)_setCALayerDestinationIsTVOut:(bool)arg1;
- (void)_setClientName:(id)arg1;
- (void)_setEQPreset:(int)arg1;
- (void)_setExpectedAssetTypes:(id)arg1;
- (void)_setPreferredLanguageList:(id)arg1;
- (void)_setPreparesItemsForPlaybackAsynchronously:(bool)arg1;
- (void)_setStoppingFadeOutDuration:(float)arg1;
- (void)_setUserVolume:(float)arg1;
- (void)_setWantsVolumeChangesWhenPausedOrInactive:(bool)arg1;
- (float)_userVolume;
- (long long)actionAtItemEnd;
- (id)addBoundaryTimeObserverForTimes:(id)arg1 queue:(id)arg2 usingBlock:(id)arg3;
- (void)advanceToNextItem;
- (bool)allowsExternalPlayback;
- (void)beginPlaybackQueueTransactionAndPause:(bool)arg1;
- (void)commitPlaybackQueueTransaction;
- (id)currentItem;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })currentTime;
- (void)dealloc;
- (long long)defaultItemEQPresetType;
- (bool)disallowsAMRAudio;
- (id)error;
- (long long)externalPlaybackType;
- (id)externalPlaybackVideoGravity;
- (id)init;
- (void)insertItem:(id)arg1 afterItem:(id)arg2;
- (bool)isClosedCaptionDisplayEnabled;
- (bool)isExternalPlaybackActive;
- (bool)isPlaybackQueueTransactionActive;
- (id)items;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (bool)outputObscuredDueToInsufficientExternalProtection;
- (void)pause;
- (void)play;
- (id)playbackQueueCommitHandler;
- (id)playerAVAudioSession;
- (void)prepareItem:(id)arg1 withCompletionHandler:(id)arg2;
- (float)rate;
- (void)removeItem:(id)arg1;
- (void)removeTimeObserver:(id)arg1;
- (void)routingControllerAvailableRoutesDidChange:(id)arg1;
- (void)seekToTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 toleranceBefore:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 toleranceAfter:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3;
- (void)seekToTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setActionAtItemEnd:(long long)arg1;
- (void)setAllowsExternalPlayback:(bool)arg1;
- (void)setClosedCaptionDisplayEnabled:(bool)arg1;
- (void)setCurrentPlaybackQueueTransactionDisplayTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setDefaultItemEQPresetType:(long long)arg1;
- (void)setDisallowsAMRAudio:(bool)arg1;
- (void)setExternalPlaybackVideoGravity:(id)arg1;
- (void)setMediaSelectionCriteria:(id)arg1 forMediaCharacteristic:(id)arg2;
- (void)setPlaybackQueueCommitHandler:(id)arg1;
- (void)setRate:(float)arg1;
- (void)setUsesAudioOnlyModeForExternalPlayback:(bool)arg1;
- (void)setUsesExternalPlaybackWhileExternalScreenIsActive:(bool)arg1;
- (long long)status;
- (bool)usesAudioOnlyModeForExternalPlayback;
- (bool)usesExternalPlaybackWhileExternalScreenIsActive;

@end
