/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

@class MPAVRoutingController, MPAVRoutingSheet, MPAudioVideoRoutingPopoverController, MPVolumeSlider, NSString, UIButton, UIImage, UILabel;

@interface MPVolumeView : UIView <MPAVRoutingControllerDelegate, NSCoding> {
    UIButton *_routeButton;
    UILabel *_routeLabel;
    MPAudioVideoRoutingPopoverController *_routePopoverController;
    unsigned long long _routePopoverPermittedArrowDirections;
    MPAVRoutingController *_routingController;
    MPAVRoutingSheet *_routingSheet;
    long long _style;
    MPVolumeSlider *_volumeSlider;
    bool_hasNonDefaultMaxVolumeSliderImage;
    bool_hasNonDefaultMinVolumeSliderImage;
    bool_hasNonDefaultRouteButtonImages;
    bool_hidesRouteLabelWhenNoRouteChoice;
    bool_pushedRouteDiscoveryModeState;
    bool_routeButtonShowsTouchWhenHighlighted;
    bool_routeDiscoveryEnabled;
    bool_showingButton;
    bool_showingLabel;
    bool_showingSlider;
    bool_showsRouteButton;
    bool_showsVolumeSlider;
    bool_volumeSliderShrinksFromBothEnds;
    bool_wirelessRouteIsPicked;
    bool_wirelessRoutesAvailable;
}

@property(copy,readonly) NSString * debugDescription;
@property(copy,readonly) NSString * description;
@property(readonly) unsigned long long hash;
@property bool hidesRouteLabelWhenNoRouteChoice;
@property(readonly) bool isShowingRouteButton;
@property(readonly) bool isVisible;
@property bool routeButtonShowsTouchWhenHighlighted;
@property unsigned long long routePopoverPermittedArrowDirections;
@property bool showsRouteButton;
@property bool showsVolumeSlider;
@property(readonly) long long style;
@property(readonly) Class superclass;
@property(readonly) MPVolumeSlider * volumeSlider;
@property bool volumeSliderShrinksFromBothEnds;
@property(retain) UIImage * volumeWarningSliderImage;
@property(getter=isWirelessRouteActive,readonly) bool wirelessRouteActive;
@property(getter=areWirelessRoutesAvailable,readonly) bool wirelessRoutesAvailable;

- (void).cxx_destruct;
- (void)_applicationDidEnterBackgroundNotification:(id)arg1;
- (void)_applicationWillEnterForegroundNotification:(id)arg1;
- (void)_createSubviews;
- (id)_defaultRouteButtonImageAsSelected:(bool)arg1;
- (void)_displayAudioRoutePicker;
- (void)_getDefaultVolumeSliderFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 routeButtonFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2 forBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)_initWithStyle:(long long)arg1;
- (void)_registerNotifications;
- (id)_routeButton;
- (void)_setRouteDiscoveryEnabled:(bool)arg1;
- (void)_setShowsRouteButton:(bool)arg1 animated:(bool)arg2;
- (void)_setShowsVolumeSlider:(bool)arg1;
- (void)_setVolumeAudioCategory:(id)arg1;
- (void)_unregisterNotifications;
- (void)_updateWirelessRouteStatus;
- (bool)areWirelessRoutesAvailable;
- (void)dealloc;
- (void)didMoveToSuperview;
- (void)didMoveToWindow;
- (void)dismissActiveOverlaysAnimated:(bool)arg1;
- (void)encodeWithCoder:(id)arg1;
- (bool)hidesRouteLabelWhenNoRouteChoice;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 style:(long long)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isShowingActiveOverlays;
- (bool)isShowingRouteButton;
- (bool)isVisible;
- (bool)isWirelessRouteActive;
- (void)layoutSubviews;
- (id)maximumVolumeSliderImageForState:(unsigned long long)arg1;
- (id)minimumVolumeSliderImageForState:(unsigned long long)arg1;
- (bool)pointInside:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (void)popoverControllerDidDismissPopover:(id)arg1;
- (id)routeButtonImageForState:(unsigned long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })routeButtonRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)routeButtonShowsTouchWhenHighlighted;
- (unsigned long long)routePopoverPermittedArrowDirections;
- (void)routingControllerAvailableRoutesDidChange:(id)arg1;
- (void)setAlpha:(double)arg1;
- (void)setHidden:(bool)arg1;
- (void)setHidesRouteLabelWhenNoRouteChoice:(bool)arg1;
- (void)setMaximumVolumeSliderImage:(id)arg1 forState:(unsigned long long)arg2;
- (void)setMinimumVolumeSliderImage:(id)arg1 forState:(unsigned long long)arg2;
- (void)setRouteButtonImage:(id)arg1 forState:(unsigned long long)arg2;
- (void)setRouteButtonShowsTouchWhenHighlighted:(bool)arg1;
- (void)setRoutePopoverPermittedArrowDirections:(unsigned long long)arg1;
- (void)setShowsRouteButton:(bool)arg1;
- (void)setShowsVolumeSlider:(bool)arg1;
- (void)setVolumeSliderShrinksFromBothEnds:(bool)arg1;
- (void)setVolumeThumbImage:(id)arg1 forState:(unsigned long long)arg2;
- (void)setVolumeWarningSliderImage:(id)arg1;
- (bool)showsRouteButton;
- (bool)showsVolumeSlider;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (long long)style;
- (id)volumeSlider;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })volumeSliderRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)volumeSliderShrinksFromBothEnds;
- (id)volumeThumbImageForState:(unsigned long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })volumeThumbRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 volumeSliderRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 value:(float)arg3;
- (id)volumeWarningSliderImage;
- (void)willMoveToWindow:(id)arg1;

@end
