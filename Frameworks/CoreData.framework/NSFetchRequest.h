/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreData.framework/CoreData
 */

@class NSArray, NSEntityDescription, NSPredicate, NSString;

@interface NSFetchRequest : NSPersistentStoreRequest <NSCoding> {
    struct _fetchRequestFlags { 
        unsigned int distinctValuesOnly : 1; 
        unsigned int includesSubentities : 1; 
        unsigned int includesPropertyValues : 1; 
        unsigned int resultType : 3; 
        unsigned int returnsObjectsAsFaults : 1; 
        unsigned int excludePendingChanges : 1; 
        unsigned int isInUse : 1; 
        unsigned int entityIsName : 1; 
        unsigned int refreshesRefetched : 1; 
        unsigned int propertiesValidated : 1; 
        unsigned int disableCaching : 1; 
        unsigned int _RESERVED : 19; 
    id *_additionalPrivateIvars;
    unsigned long long _batchSize;
    NSEntityDescription *_entity;
    unsigned long long _fetchLimit;
    } _flags;
    NSArray *_groupByProperties;
    NSPredicate *_havingPredicate;
    NSPredicate *_predicate;
    NSArray *_relationshipKeyPathsForPrefetching;
    NSArray *_sortDescriptors;
    NSArray *_valuesToFetch;
}

@property(retain) NSArray * affectedStores;
@property(retain) NSEntityDescription * entity;
@property(readonly) NSString * entityName;
@property unsigned long long fetchBatchSize;
@property unsigned long long fetchLimit;
@property unsigned long long fetchOffset;
@property(retain) NSPredicate * havingPredicate;
@property bool includesPendingChanges;
@property bool includesPropertyValues;
@property bool includesSubentities;
@property(retain) NSPredicate * predicate;
@property(copy) NSArray * propertiesToFetch;
@property(copy) NSArray * propertiesToGroupBy;
@property(copy) NSArray * relationshipKeyPathsForPrefetching;
@property unsigned long long resultType;
@property bool returnsDistinctResults;
@property bool returnsObjectsAsFaults;
@property bool shouldRefreshRefetchedObjects;
@property(retain) NSArray * sortDescriptors;

+ (bool)accessInstanceVariablesDirectly;
+ (id)fetchRequestWithEntityName:(id)arg1;
+ (void)initialize;

- (id)_asyncResultHandle;
- (bool)_disablePersistentStoreResultCaching;
- (void)_incrementInUseCounter;
- (bool)_isEditable;
- (id)_newValidatedProperties:(id)arg1 groupBy:(bool)arg2 error:(id*)arg3;
- (void)_resolveEntityWithContext:(id)arg1;
- (void)_setAsyncResultHandle:(id)arg1;
- (void)_setDisablePersistentStoreResultCaching:(bool)arg1;
- (void)_throwIfNotEditable;
- (void)_writeIntoData:(id)arg1 propertiesDict:(id)arg2 uniquedPropertyNames:(id)arg3 uniquedStrings:(id)arg4 uniquedData:(id)arg5 uniquedMappings:(id)arg6 entities:(id)arg7;
- (id)affectedStores;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)entity;
- (id)entityName;
- (unsigned long long)fetchBatchSize;
- (unsigned long long)fetchLimit;
- (unsigned long long)fetchOffset;
- (id)groupByProperties;
- (bool)hasChanges;
- (unsigned long long)hash;
- (id)havingPredicate;
- (bool)includesPendingChanges;
- (bool)includesPropertyValues;
- (bool)includesSubentities;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithEntityName:(id)arg1;
- (bool)isEqual:(id)arg1;
- (id)predicate;
- (id)propertiesToFetch;
- (id)propertiesToGroupBy;
- (id)relationshipKeyPathsForPrefetching;
- (unsigned long long)requestType;
- (unsigned long long)resultType;
- (bool)returnsDistinctResults;
- (bool)returnsObjectsAsFaults;
- (void)setAffectedStores:(id)arg1;
- (void)setEntity:(id)arg1;
- (void)setFetchBatchSize:(unsigned long long)arg1;
- (void)setFetchLimit:(unsigned long long)arg1;
- (void)setFetchOffset:(unsigned long long)arg1;
- (void)setGroupByProperties:(id)arg1;
- (void)setHavingPredicate:(id)arg1;
- (void)setIncludesPendingChanges:(bool)arg1;
- (void)setIncludesPropertyValues:(bool)arg1;
- (void)setIncludesSubentities:(bool)arg1;
- (void)setPredicate:(id)arg1;
- (void)setPropertiesToFetch:(id)arg1;
- (void)setPropertiesToGroupBy:(id)arg1;
- (void)setRelationshipKeyPathsForPrefetching:(id)arg1;
- (void)setResultType:(unsigned long long)arg1;
- (void)setReturnsDistinctResults:(bool)arg1;
- (void)setReturnsObjectsAsFaults:(bool)arg1;
- (void)setShouldRefreshRefetchedObjects:(bool)arg1;
- (void)setSortDescriptors:(id)arg1;
- (bool)shouldRefreshRefetchedObjects;
- (id)sortDescriptors;
- (id)stores;

@end
