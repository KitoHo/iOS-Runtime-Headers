/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AddressBookUI.framework/AddressBookUI
 */

@class NSString, UIColor, UIFont, UIImage, UIView, _UIGraphicsLetterpressStyle;

@interface ABStyleProvider : NSObject <ABStyleProvider> {
}

@property(readonly) UIImage * cardActionButtonBackgroundHighlighted;
@property(readonly) UIImage * cardActionButtonBackgroundNormal;
@property(readonly) double cardActionButtonHeight;
@property(readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } cardActionButtonImageInsets;
@property(readonly) double cardActionButtonSpacing;
@property(readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } cardActionButtonTitleDoubleLineInsets;
@property(readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } cardActionButtonTitleSingleLineInsets;
@property(readonly) long long cardActionButtonType;
@property(readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } cardActionButtonsInsets;
@property(readonly) UIImage * cardActionConferenceIcon;
@property(readonly) UIImage * cardActionConferenceIconPressed;
@property(readonly) bool cardActionsAllowFaceTimeFavorites;
@property(readonly) bool cardActionsAllowVoiceFavorites;
@property(readonly) bool cardAlwaysShowsNotes;
@property(readonly) long long cardCellAccessoryType;
@property(readonly) long long cardCellAccessoryTypeEdit;
@property(readonly) long long cardCellAccessoryTypeEditRingtone;
@property(readonly) long long cardCellAccessoryTypeRingtone;
@property(readonly) UIColor * cardCellBackgroundColor;
@property(readonly) double cardCellBadgePaddingLeft;
@property(readonly) UIColor * cardCellDisabledBackgroundColor;
@property(readonly) UIImage * cardCellFacebookBadge;
@property(readonly) long long cardCellSelectionStyle;
@property(readonly) double cardCellVerticalSpacingBetweenAlertsOfSimilarType;
@property(readonly) UIColor * cardClippingImageLabelBevelColor;
@property(readonly) UIColor * cardClippingImageLabelColor;
@property(readonly) double cardContentOccluderDefaultBottomFadingHeight;
@property(readonly) double cardContentOccluderDefaultTopFadingHeight;
@property(readonly) UIColor * cardHeaderBackgroundColor;
@property(readonly) UIColor * cardHeaderDefaultLabelTextColor;
@property(readonly) double cardHeaderDisplayImageLeftMargin;
@property(readonly) double cardHeaderDisplayImageTopMargin;
@property(readonly) double cardHeaderEditingImageLeftMargin;
@property(readonly) double cardHeaderEditingImageTopMargin;
@property(readonly) double cardHeaderImageNameEditorSpacing;
@property(readonly) double cardHeaderImageNameSpacing;
@property(readonly) bool cardHeaderNameViewAlignOnBottom;
@property(readonly) double cardHeaderViewLeftMargin;
@property(readonly) double cardHeaderViewTopMargin;
@property(readonly) UIColor * cardHeadlineShadowColor;
@property(readonly) UIColor * cardHeadlineTextColor;
@property(readonly) UIFont * cardHeadlineTextFont;
@property(readonly) UIColor * cardLabelBackgroundColor;
@property(readonly) UIColor * cardLabelDisabledTextColor;
@property(readonly) UIColor * cardLabelEditingTextColor;
@property(readonly) UIFont * cardLabelEditingTextFont;
@property(readonly) UIColor * cardLabelEmphasizedHighlightedTextColor;
@property(readonly) UIColor * cardLabelHighlightedShadowColor;
@property(readonly) UIColor * cardLabelHighlightedTextColor;
@property(readonly) UIColor * cardLabelImportantHighlightedTextColor;
@property(readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } cardLabelInsets;
@property(readonly) UIColor * cardLabelSelectedBackgroundColor;
@property(readonly) UIColor * cardLabelShadowColor;
@property(readonly) struct CGSize { double x1; double x2; } cardLabelShadowOffset;
@property(readonly) UIColor * cardLabelTextColor;
@property(readonly) UIFont * cardLabelTextFont;
@property(readonly) double cardLabelWidth;
@property(readonly) double cardLinkingHeaderLabelHeight;
@property(readonly) unsigned long long cardNameNumberOfLines;
@property(readonly) UIView * cardNotesHeaderView;
@property(readonly) double cardNotesHeaderViewHeight;
@property(readonly) bool cardNotesLabelIncludesSource;
@property(readonly) UIImage * cardPhotoBackgroundImage;
@property(readonly) UIImage * cardPhotoEditMultipleOverlayImage;
@property(readonly) UIImage * cardPhotoEditMultiplePhotoBackdropImage;
@property(readonly) UIImage * cardPhotoEditOverlayImage;
@property(readonly) UIImage * cardPhotoEditPlaceholderImage;
@property(readonly) UIImage * cardPhotoFacebookAttributionImage;
@property(readonly) double cardPhotoFrameBorderSize;
@property(readonly) UIImage * cardPhotoMaskImage;
@property(readonly) UIImage * cardPhotoMaskMultipleImage;
@property(readonly) struct CGSize { double x1; double x2; } cardPhotoOffset;
@property(readonly) UIImage * cardPhotoOverlayImage;
@property(readonly) UIImage * cardPhotoPasteboardMaskImage;
@property(readonly) UIImage * cardPhotoShadowImage;
@property(readonly) struct CGSize { double x1; double x2; } cardPhotoShadowOffset;
@property(readonly) bool cardPhotoShouldApplyOverlayImageWhenLabelPresent;
@property(readonly) bool cardPhotoShouldApplyOverlayImageWhenPersonImagePresent;
@property(readonly) UIImage * cardPlaceholderCompanyImage;
@property(readonly) bool cardPlaceholderImageShouldApplyMaskAndOverlay;
@property(readonly) UIImage * cardPlaceholderPersonImage;
@property(readonly) bool cardSectionAlwaysWantsHeader;
@property(readonly) UIColor * cardSectionBackgroundColor;
@property(readonly) bool cardSectionDrawsDefaultTopShadow;
@property(readonly) UIFont * cardSectionHeaderFont;
@property(readonly) double cardSectionHeaderHeightForBottomActions;
@property(readonly) double cardSectionHeaderHeightForFirstCardActions;
@property(readonly) double cardSectionHeaderHeightForFollowingCardActions;
@property(readonly) double cardSectionHeaderHorizontalPadding;
@property(readonly) UIColor * cardSectionHeaderShadowColor;
@property(readonly) struct CGSize { double x1; double x2; } cardSectionHeaderShadowOffset;
@property(readonly) UIColor * cardSectionHeaderTextColor;
@property(readonly) bool cardShouldUseSeparateSectionsForUnknownCardActions;
@property(readonly) UIColor * cardTableBackgroundColor;
@property(readonly) UIColor * cardTableCellBorderColor;
@property(readonly) bool cardTableShouldAdjustForKeyboard;
@property(readonly) bool cardTableShouldRemoveBackgroundView;
@property(readonly) bool cardTableUsesRowFadeAnimation;
@property(readonly) unsigned long long cardTagNumberOfLines;
@property(readonly) UIColor * cardTaglineShadowColor;
@property(readonly) UIColor * cardTaglineTextColor;
@property(readonly) UIFont * cardTaglineTextFont;
@property(readonly) UIColor * cardValueBackgroundColor;
@property(readonly) UIImage * cardValueClearButtonImage;
@property(readonly) UIColor * cardValueDisabledTextColor;
@property(readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } cardValueEditingInsets;
@property(readonly) UIColor * cardValueHighlightedShadowColor;
@property(readonly) UIColor * cardValueHighlightedTextColor;
@property(readonly) bool cardValueHighlightsWhenTouched;
@property(readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } cardValueInsets;
@property(readonly) UIColor * cardValueShadowColor;
@property(readonly) struct CGSize { double x1; double x2; } cardValueShadowOffset;
@property(readonly) UIColor * cardValueTappableColor;
@property(readonly) UIColor * cardValueTextColor;
@property(readonly) UIFont * cardValueTextFont;
@property(readonly) long long composeModalPresentationStyle;
@property(readonly) bool datePickerHasNavigationTitle;
@property(copy,readonly) NSString * debugDescription;
@property(copy,readonly) NSString * description;
@property(readonly) UIColor * groupAccountNameColor;
@property(readonly) UIFont * groupAccountNameFont;
@property(readonly) UIColor * groupAccountNameShadowColor;
@property(readonly) struct CGSize { double x1; double x2; } groupAccountNameShadowOffset;
@property(readonly) UIColor * groupCellBackgroundColor;
@property(readonly) UIColor * groupCellHighlightedTextColor;
@property(readonly) long long groupCellSelectionStyle;
@property(readonly) UIColor * groupCellShadowColor;
@property(readonly) struct CGSize { double x1; double x2; } groupCellShadowOffset;
@property(readonly) UIColor * groupCellTextColor;
@property(readonly) UIColor * groupHeaderBackgroudColor;
@property(readonly) bool groupSectionDrawsDefaultTopShadow;
@property(readonly) double groupSectionHeaderHeight;
@property(readonly) double groupSectionHeaderHorizontalPadding;
@property(readonly) UIColor * groupsTableBackgroundColor;
@property(readonly) bool groupsTableShouldRemoveBackgroundView;
@property(readonly) unsigned long long hash;
@property(readonly) bool labelPickerShouldPushCustomLabelCreator;
@property(readonly) bool labelPickerUsesOpaqueBackground;
@property(readonly) _UIGraphicsLetterpressStyle * letterpressStyle;
@property(readonly) bool linkedCardsShouldAllowDeletion;
@property(readonly) bool linkedPhotoLabelStringsDescribeSourceOnly;
@property(readonly) bool linkedPhotoPickerIncludesCurrentPhoto;
@property(readonly) UIView * memberHeaderBackgroundView;
@property(readonly) UIFont * memberNameBoldFont;
@property(readonly) UIFont * memberNameBoldFontForSectionHeader;
@property(readonly) UIColor * memberNameDisabledTextColor;
@property(readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } memberNameInsets;
@property(readonly) double memberNameInterComponentSpacing;
@property(readonly) UIImage * memberNameMeCardDisabledImage;
@property(readonly) UIImage * memberNameMeCardImage;
@property(readonly) UIImage * memberNameMeCardSelectedImage;
@property(readonly) UIColor * memberNameMeCardShadowColor;
@property(readonly) UIColor * memberNameMeCardTextColor;
@property(readonly) UIFont * memberNamePlaceholderFont;
@property(readonly) UIFont * memberNameRegularFont;
@property(readonly) UIFont * memberNameRegularFontForSectionHeader;
@property(readonly) UIColor * memberNameSelectedColor;
@property(readonly) UIColor * memberNameSelectedShadowColor;
@property(readonly) UIColor * memberNameShadowColor;
@property(readonly) struct CGSize { double x1; double x2; } memberNameShadowOffset;
@property(readonly) UIColor * memberNameTextColor;
@property(readonly) UIImage * memberPhotoMaskImage;
@property(readonly) UIImage * memberPhotoOverlayImage;
@property(readonly) UIImage * memberPlaceholderCompanyImage;
@property(readonly) UIImage * memberPlaceholderPersonImage;
@property(readonly) double memberScrollBarInset;
@property(readonly) UIColor * memberSearchFieldBackgroundColor;
@property(readonly) UIImage * memberSectionListHeaderImage;
@property(readonly) UIColor * memberSelectedBackgroundColor;
@property(readonly) bool memberShowContactPhoto;
@property(readonly) UIColor * membersBackgroundColor;
@property(readonly) unsigned long long membersCountToShowIndex;
@property(readonly) unsigned long long membersCountToShowSections;
@property(readonly) UIColor * membersHeaderBackgroundColor;
@property(readonly) UIColor * membersHeaderContentViewBackgroundColor;
@property(readonly) double membersIndexMaximumHeight;
@property(readonly) UIColor * membersIndexTextColor;
@property(readonly) UIColor * membersIndexTrackingBackgroundColor;
@property(readonly) UIColor * membersSearchBackgroundColor;
@property(readonly) bool membersSearchBarIsInTableHeader;
@property(readonly) UIColor * membersSearchCellBackgroundColor;
@property(readonly) long long membersSelectionStyle;
@property(readonly) long long peoplePickerBarStyle;
@property(readonly) bool peoplePickerBarStyleIsTranslucent;
@property(readonly) long long pickerTransitionStyle;
@property(readonly) bool presentDatePickerInPopover;
@property(readonly) bool presentModalViewInPopover;
@property(readonly) bool presentNewContactsControllersInPopover;
@property(readonly) bool searchControllerForceKeyboardDisplayEnabled;
@property(readonly) bool searchIsAlwaysActive;
@property(readonly) bool serverSearchNavigationBarHidingEnabled;
@property(readonly) bool shouldApplyMaskImage;
@property(readonly) bool shouldDefinePickerTransitionStyle;
@property(readonly) bool shouldPropagateStylesThroughUnknownPersonActions;
@property(readonly) bool shouldPropagateStylesToPickers;
@property(readonly) bool shouldShowCardPhotoPlaceholder;
@property(readonly) bool shouldUseCardContentProviderWhenAvailable;
@property(readonly) bool shouldUsePeoplePickerBarStyle;
@property(readonly) Class superclass;
@property(readonly) long long unknownModalPresentationStyle;

+ (id)defaultStyleProvider;
+ (id)defaultStyleProviderForStyle:(int)arg1;
+ (double)memberHeaderRowHeight;
+ (double)memberHeaderTextBaseline;
+ (double)memberRowHeight;
+ (double)memberTextBaseline;
+ (id)preferredContentSizeCategoryName;
+ (bool)supportsSecureCoding;

- (id)_fontForTextStyle:(id)arg1;
- (int)abCellStyleForCardTableLinkingUI;
- (int)abCellStyleForCardTableWhenEditing:(bool)arg1;
- (int)abCellStyleForGroupsTableGrouped;
- (int)abCellStyleForGroupsTablePlain;
- (int)abCellStyleForMembersTable;
- (id)accessoryButtonForRelatedNames;
- (id)accessoryViewForFavoritesBadge;
- (id)accessoryViewForMailVIPBadge;
- (id)accessoryViewForVideoBadge;
- (id)cardActionButtonBackgroundHighlighted;
- (id)cardActionButtonBackgroundNormal;
- (double)cardActionButtonHeight;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })cardActionButtonImageInsets;
- (double)cardActionButtonSpacing;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })cardActionButtonTitleDoubleLineInsets;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })cardActionButtonTitleSingleLineInsets;
- (long long)cardActionButtonType;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })cardActionButtonsInsets;
- (id)cardActionConferenceIcon;
- (id)cardActionConferenceIconPressed;
- (bool)cardActionsAllowFaceTimeFavorites;
- (bool)cardActionsAllowVoiceFavorites;
- (bool)cardAlwaysShowsNotes;
- (long long)cardCellAccessoryType;
- (long long)cardCellAccessoryTypeEdit;
- (long long)cardCellAccessoryTypeEditRingtone;
- (long long)cardCellAccessoryTypeRingtone;
- (id)cardCellBackgroundColor;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })cardCellBackgroundInsetsWhenEditing:(bool)arg1;
- (double)cardCellBadgePaddingLeft;
- (id)cardCellDisabledBackgroundColor;
- (id)cardCellDividerColorVertical:(bool)arg1;
- (id)cardCellDividerShadowColorVertical:(bool)arg1;
- (id)cardCellFacebookBadge;
- (long long)cardCellSelectionStyle;
- (double)cardCellVerticalSpacingBetweenAlertsOfSimilarType;
- (id)cardClippingImageLabelBevelColor;
- (id)cardClippingImageLabelColor;
- (double)cardContentOccluderDefaultBottomFadingHeight;
- (double)cardContentOccluderDefaultTopFadingHeight;
- (double)cardDeleteButtonHeight;
- (id)cardDeleteButtonImage;
- (id)cardDeleteButtonImagePressed;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })cardDeleteButtonInsets;
- (id)cardHeaderBackgroundColor;
- (id)cardHeaderDefaultLabelTextColor;
- (double)cardHeaderDisplayImageLeftMargin;
- (double)cardHeaderDisplayImageTopMargin;
- (double)cardHeaderEditingImageLeftMargin;
- (double)cardHeaderEditingImageTopMargin;
- (double)cardHeaderImageNameEditorSpacing;
- (double)cardHeaderImageNameSpacing;
- (bool)cardHeaderNameViewAlignOnBottom;
- (double)cardHeaderSpacingFromCardBodyWhenEditing:(bool)arg1;
- (double)cardHeaderViewLeftMargin;
- (double)cardHeaderViewTopMargin;
- (id)cardHeadlineShadowColor;
- (id)cardHeadlineTextColor;
- (id)cardHeadlineTextFont;
- (id)cardLabelBackgroundColor;
- (id)cardLabelDisabledTextColor;
- (id)cardLabelEditingTextColor;
- (id)cardLabelEditingTextFont;
- (id)cardLabelEmphasizedHighlightedTextColor;
- (id)cardLabelHighlightedShadowColor;
- (id)cardLabelHighlightedTextColor;
- (id)cardLabelImportantHighlightedTextColor;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })cardLabelInsets;
- (id)cardLabelSelectedBackgroundColor;
- (id)cardLabelShadowColor;
- (struct CGSize { double x1; double x2; })cardLabelShadowOffset;
- (id)cardLabelTextColor;
- (id)cardLabelTextFont;
- (double)cardLabelWidth;
- (double)cardLinkingHeaderLabelHeight;
- (double)cardMaxHeightForSwellTextViewWhenEditing:(bool)arg1;
- (id)cardNameDividerColor;
- (unsigned long long)cardNameNumberOfLines;
- (id)cardNotesHeaderView;
- (double)cardNotesHeaderViewHeight;
- (bool)cardNotesLabelIncludesSource;
- (double)cardNotesMinimumHeightWhenEditing:(bool)arg1;
- (id)cardPhotoBackgroundImage;
- (id)cardPhotoEditMultipleOverlayImage;
- (id)cardPhotoEditMultiplePhotoBackdropImage;
- (id)cardPhotoEditOverlayImage;
- (id)cardPhotoEditPlaceholderImage;
- (id)cardPhotoFacebookAttributionImage;
- (double)cardPhotoFrameBorderSize;
- (id)cardPhotoMaskImage;
- (id)cardPhotoMaskMultipleImage;
- (struct CGSize { double x1; double x2; })cardPhotoOffset;
- (id)cardPhotoOverlayImage;
- (id)cardPhotoPasteboardMaskImage;
- (id)cardPhotoShadowImage;
- (struct CGSize { double x1; double x2; })cardPhotoShadowOffset;
- (bool)cardPhotoShouldApplyOverlayImageWhenLabelPresent;
- (bool)cardPhotoShouldApplyOverlayImageWhenPersonImagePresent;
- (id)cardPlaceholderCompanyImage;
- (bool)cardPlaceholderImageShouldApplyMaskAndOverlay;
- (id)cardPlaceholderPersonImage;
- (bool)cardSectionAlwaysWantsHeader;
- (id)cardSectionBackgroundColor;
- (bool)cardSectionDrawsDefaultTopShadow;
- (id)cardSectionHeaderFont;
- (double)cardSectionHeaderHeightForBottomActions;
- (double)cardSectionHeaderHeightForFirstCardActions;
- (double)cardSectionHeaderHeightForFollowingCardActions;
- (double)cardSectionHeaderHorizontalPadding;
- (id)cardSectionHeaderShadowColor;
- (struct CGSize { double x1; double x2; })cardSectionHeaderShadowOffset;
- (id)cardSectionHeaderTextColor;
- (bool)cardShouldUseSeparateSectionsForUnknownCardActions;
- (id)cardTableBackgroundColor;
- (id)cardTableCellBorderColor;
- (bool)cardTableShouldAdjustForKeyboard;
- (bool)cardTableShouldRemoveBackgroundView;
- (bool)cardTableUsesRowFadeAnimation;
- (id)cardTableView:(id)arg1 prepareCell:(id)arg2 forRowAtIndexPath:(id)arg3;
- (bool)cardTableView:(id)arg1 wantsHeaderForProperty:(int)arg2 inSection:(long long)arg3 whenEditing:(bool)arg4;
- (double)cardTableViewLinkingHeaderBottomPaddingWhenEditing:(bool)arg1;
- (double)cardTableViewLinkingHeaderTopPaddingWhenEditing:(bool)arg1;
- (double)cardTableViewSectionFooterHeightWhenEditing:(bool)arg1;
- (double)cardTableViewSectionHeaderHeightWhenEditing:(bool)arg1;
- (unsigned long long)cardTagNumberOfLines;
- (id)cardTaglineShadowColor;
- (id)cardTaglineTextColor;
- (id)cardTaglineTextFont;
- (id)cardValueBackgroundColor;
- (id)cardValueClearButtonImage;
- (id)cardValueDisabledTextColor;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })cardValueEditingInsets;
- (id)cardValueHighlightedShadowColor;
- (id)cardValueHighlightedTextColor;
- (bool)cardValueHighlightsWhenTouched;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })cardValueInsets;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })cardValueInsetsWhenEditing:(bool)arg1;
- (id)cardValueShadowColor;
- (struct CGSize { double x1; double x2; })cardValueShadowOffset;
- (id)cardValueTappableColor;
- (id)cardValueTextColor;
- (id)cardValueTextFont;
- (long long)composeModalPresentationStyle;
- (id)copyLocalizedLabel:(id)arg1;
- (id)copyLocalizedPropertyName:(int)arg1 lowercase:(bool)arg2;
- (Class)customCardActionCellClass;
- (Class)customCardCellClass;
- (void)customSetEmphasized:(bool)arg1 onCell:(id)arg2;
- (bool)datePickerHasNavigationTitle;
- (int)dialogStyleForDeleteConfirmation;
- (id)editorViewColor;
- (id)editorViewLargeFont;
- (id)editorViewSmallFont;
- (void)encodeWithCoder:(id)arg1;
- (id)groupAccountNameColor;
- (id)groupAccountNameFont;
- (id)groupAccountNameShadowColor;
- (struct CGSize { double x1; double x2; })groupAccountNameShadowOffset;
- (id)groupCellBackgroundColor;
- (id)groupCellHighlightedTextColor;
- (long long)groupCellSelectionStyle;
- (id)groupCellShadowColor;
- (struct CGSize { double x1; double x2; })groupCellShadowOffset;
- (id)groupCellTextColor;
- (id)groupHeaderBackgroudColor;
- (bool)groupSectionDrawsDefaultTopShadow;
- (double)groupSectionHeaderHeight;
- (double)groupSectionHeaderHorizontalPadding;
- (id)groupsTableBackgroundColor;
- (bool)groupsTableShouldRemoveBackgroundView;
- (id)initWithCoder:(id)arg1;
- (bool)labelPickerShouldPushCustomLabelCreator;
- (bool)labelPickerUsesOpaqueBackground;
- (id)letterpressStyle;
- (bool)linkedCardsShouldAllowDeletion;
- (bool)linkedPhotoLabelStringsDescribeSourceOnly;
- (bool)linkedPhotoPickerIncludesCurrentPhoto;
- (id)memberHeaderBackgroundView;
- (id)memberNameBoldFont;
- (id)memberNameBoldFontForSectionHeader;
- (id)memberNameDisabledTextColor;
- (double)memberNameFontSize;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })memberNameInsets;
- (double)memberNameInterComponentSpacing;
- (id)memberNameMeCardDisabledImage;
- (id)memberNameMeCardImage;
- (id)memberNameMeCardSelectedImage;
- (id)memberNameMeCardShadowColor;
- (id)memberNameMeCardTextColor;
- (id)memberNamePlaceholderFont;
- (id)memberNameRegularFont;
- (id)memberNameRegularFontForSectionHeader;
- (id)memberNameSelectedColor;
- (id)memberNameSelectedShadowColor;
- (id)memberNameShadowColor;
- (struct CGSize { double x1; double x2; })memberNameShadowOffset;
- (id)memberNameTextColor;
- (id)memberPhotoMaskImage;
- (id)memberPhotoOverlayImage;
- (id)memberPlaceholderCompanyImage;
- (id)memberPlaceholderPersonImage;
- (double)memberScrollBarInset;
- (id)memberSearchFieldBackgroundColor;
- (id)memberSectionListHeaderImage;
- (id)memberSelectedBackgroundColor;
- (bool)memberShowContactPhoto;
- (id)membersBackgroundColor;
- (unsigned long long)membersCountToShowIndex;
- (unsigned long long)membersCountToShowSections;
- (id)membersHeaderBackgroundColor;
- (id)membersHeaderContentViewBackgroundColor;
- (double)membersIndexMaximumHeight;
- (id)membersIndexTextColor;
- (id)membersIndexTrackingBackgroundColor;
- (id)membersSearchBackgroundColor;
- (bool)membersSearchBarIsInTableHeader;
- (id)membersSearchCellBackgroundColor;
- (long long)membersSelectionStyle;
- (id)newAccessoryDisclosureIndicatorForCellStyle:(int)arg1;
- (id)newBackgroundViewForCellStyle:(int)arg1 selected:(bool)arg2;
- (struct __CFDictionary { }*)newBackgroundViewsForChameleonCell;
- (id)newCardActionButton;
- (id)newCardDividerViewVertical:(bool)arg1;
- (id)newCustomCardTableScrollingBackgroundView;
- (id)newTableFooterViewForCellStyle:(int)arg1;
- (long long)peoplePickerBarStyle;
- (bool)peoplePickerBarStyleIsTranslucent;
- (id)personActionColor;
- (id)personActionFont;
- (id)personActionHighlightedColor;
- (id)personActionShadowColor;
- (struct CGSize { double x1; double x2; })personActionShadowOffset;
- (double)personEditorFieldVerticalInset;
- (id)personHeaderPasteboardColor;
- (id)personHeaderShadowColor;
- (struct CGSize { double x1; double x2; })personHeaderShadowOffset;
- (id)personLabelColor;
- (id)personLabelFont;
- (double)personLabelFontMinSize;
- (id)personLabelHighlightedColor;
- (id)personLabelShadowColor;
- (struct CGSize { double x1; double x2; })personLabelShadowOffset;
- (id)personNoValueLabelFont;
- (id)personNoValueLabelShadowColor;
- (struct CGSize { double x1; double x2; })personNoValueLabelShadowOffset;
- (id)personNoValueLabelTextColor;
- (bool)personTableHeaderViewScrollsWhenEditing:(bool)arg1;
- (id)personValueBackgroundColor;
- (id)personValueColor;
- (id)personValueEmphasizedColor;
- (id)personValueEmphasizedHighlightColor;
- (id)personValueFont;
- (double)personValueFontMinSize;
- (id)personValueHighlightColor;
- (id)personValueImportantColor;
- (id)personValueImportantHighlightColor;
- (double)personViewDefaultRowHeight;
- (id)personViewGetFavoritesBadge;
- (id)personViewGetFavoritesBadgeHighlighted;
- (id)personViewGetNameViewAccessoryImage;
- (id)personViewGetNameViewAccessoryImageSelected;
- (double)personViewHeaderImageHeight;
- (double)personViewHeaderImageWidth;
- (double)personViewHeaderMinimumHeight;
- (double)personViewHeaderNameViewTextHorizontalInset;
- (double)personViewHeaderNameViewTextVerticalInset;
- (double)personViewHeaderRightMargin;
- (double)personViewHorizontalCellInset;
- (double)personViewRowHeightWhenEditing:(bool)arg1;
- (double)personViewVerticalCellInset;
- (double)personViewVerticalSpacing;
- (long long)pickerTransitionStyle;
- (bool)presentDatePickerInPopover;
- (bool)presentModalViewInPopover;
- (bool)presentNewContactsControllersInPopover;
- (bool)refreshTinyActionCell;
- (bool)reloadCallAction;
- (bool)searchControllerForceKeyboardDisplayEnabled;
- (bool)searchIsAlwaysActive;
- (void)selectCustomPartWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 occupiedCorners:(unsigned long long)arg2 forCell:(id)arg3;
- (void)selectLabelPartForCell:(id)arg1;
- (void)selectValuePartForCell:(id)arg1;
- (void)selectWholePartForCell:(id)arg1;
- (id)separatorBottomShadowColorForCellStyle:(int)arg1;
- (id)separatorColorForCellStyle:(int)arg1;
- (long long)separatorStyleForCellStyle:(int)arg1;
- (id)separatorTopShadowColorForCellStyle:(int)arg1;
- (bool)serverSearchNavigationBarHidingEnabled;
- (void)setIndicatesFaceTimeHistory:(bool)arg1 onActionButton:(id)arg2;
- (id)shadowColorForCellStyle:(int)arg1;
- (bool)shouldAdjustTableView:(id)arg1 forKeyboardOrdering:(bool)arg2;
- (bool)shouldApplyMaskImage;
- (bool)shouldAutorotateToInterfaceOrientation:(long long)arg1;
- (bool)shouldDefinePickerTransitionStyle;
- (bool)shouldPropagateStylesThroughUnknownPersonActions;
- (bool)shouldPropagateStylesToPickers;
- (bool)shouldShowCardPhotoPlaceholder;
- (bool)shouldUseCardContentProviderWhenAvailable;
- (bool)shouldUsePeoplePickerBarStyle;
- (long long)unknownModalPresentationStyle;
- (void)unselectAllCellParts:(id)arg1;
- (bool)usesPhoneCardMetrics;

@end
