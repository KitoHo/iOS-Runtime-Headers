/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreLocation.framework/CoreLocation
 */

@class <CLLocationManagerDelegate>, CLHeading, CLLocation, NSSet, NSString;

@interface CLLocationManager : NSObject {
    id _internal;
}

@property long long activityType;
@property(readonly) double bestAccuracy;
@property <CLLocationManagerDelegate> * delegate;
@property double desiredAccuracy;
@property double distanceFilter;
@property(getter=isDynamicAccuracyReductionEnabled) bool dynamicAccuracyReductionEnabled;
@property(readonly) double expectedGpsUpdateInterval;
@property(copy,readonly) CLHeading * heading;
@property(readonly) bool headingAvailable;
@property double headingFilter;
@property int headingOrientation;
@property(readonly) struct __CLClient { }* internalClient;
@property(copy,readonly) CLLocation * location;
@property(readonly) bool locationServicesApproved;
@property(readonly) bool locationServicesAvailable;
@property(readonly) bool locationServicesEnabled;
@property(getter=isLocationServicesPreferencesDialogEnabled) bool locationServicesPreferencesDialogEnabled;
@property(getter=isMatchInfoEnabled) bool matchInfoEnabled;
@property(readonly) double maximumRegionMonitoringDistance;
@property(copy,readonly) NSSet * monitoredRegions;
@property bool pausesLocationUpdatesAutomatically;
@property(getter=isPersistentMonitoringEnabled) bool persistentMonitoringEnabled;
@property bool privateMode;
@property(copy) NSString * purpose;
@property(copy,readonly) NSSet * rangedRegions;
@property bool supportInfo;

+ (int)_authorizationStatus;
+ (int)_authorizationStatusForBundleIdentifier:(id)arg1 bundle:(id)arg2;
+ (int)_regionMonitoringAuthorizationStatusForBundleIdentifier:(id)arg1 bundle:(id)arg2;
+ (unsigned long long)activeLocationServiceTypesForLocationDictionary:(id)arg1;
+ (bool)advertiseAsBeacon:(id)arg1 withPower:(id)arg2;
+ (unsigned long long)allowableAuthorizationForLocationDictionary:(id)arg1;
+ (int)authorizationStatus;
+ (int)authorizationStatusForBundle:(id)arg1;
+ (int)authorizationStatusForBundleIdentifier:(id)arg1;
+ (bool)bundleSupported:(id)arg1;
+ (id)dateLocationLastUsedForLocationDictionary:(id)arg1;
+ (bool)deferredLocationUpdatesAvailable;
+ (bool)dumpLogsWithMessage:(id)arg1;
+ (unsigned long long)entityAuthorizationForLocationDictionary:(id)arg1;
+ (unsigned long long)entityClassesForLocationDictionary:(id)arg1;
+ (bool)hasUsedBackgroundLocationServices:(id)arg1;
+ (bool)headingAvailable;
+ (bool)isEntityAuthorizedForLocationDictionary:(id)arg1;
+ (bool)isLocationActiveForLocationDictionary:(id)arg1;
+ (bool)isMonitoringAvailableForClass:(Class)arg1;
+ (bool)isRangingAvailable;
+ (bool)isStatusBarIconEnabledForLocationEntityClass:(unsigned long long)arg1;
+ (bool)locationServicesEnabled:(bool)arg1;
+ (bool)locationServicesEnabled;
+ (bool)mapCorrectionAvailable;
+ (unsigned long long)primaryEntityClassForLocationDictionary:(id)arg1;
+ (int)regionMonitoringAuthorizationStatusForBundle:(id)arg1;
+ (int)regionMonitoringAuthorizationStatusForBundleIdentifier:(id)arg1;
+ (bool)regionMonitoringAvailable;
+ (bool)regionMonitoringEnabled;
+ (void)setAuthorizationStatus:(bool)arg1 forBundle:(id)arg2;
+ (void)setAuthorizationStatus:(bool)arg1 forBundleIdentifier:(id)arg2;
+ (void)setAuthorizationStatusByType:(int)arg1 forBundle:(id)arg2;
+ (void)setAuthorizationStatusByType:(int)arg1 forBundleIdentifier:(id)arg2;
+ (void)setDefaultEffectiveBundle:(id)arg1;
+ (void)setDefaultEffectiveBundleIdentifier:(id)arg1;
+ (void)setEntityAuthorization:(unsigned long long)arg1 forLocationDictionary:(id)arg2;
+ (void)setEntityAuthorized:(bool)arg1 forLocationDictionary:(id)arg2;
+ (void)setLocationServicesEnabled:(bool)arg1;
+ (void)setStatusBarIconEnabled:(bool)arg1 forLocationEntityClass:(unsigned long long)arg2;
+ (id)sharedManager;
+ (bool)shutdownDaemon;
+ (bool)significantLocationChangeMonitoringAvailable;

- (long long)activityType;
- (void)allowDeferredLocationUpdatesUntilTraveled:(double)arg1 timeout:(double)arg2;
- (id)appsUsingLocation;
- (id)appsUsingLocationWithDetails;
- (double)bestAccuracy;
- (void)dealloc;
- (id)delegate;
- (double)desiredAccuracy;
- (void)disallowDeferredLocationUpdates;
- (void)dismissHeadingCalibrationDisplay;
- (double)distanceFilter;
- (double)expectedGpsUpdateInterval;
- (id)heading;
- (bool)headingAvailable;
- (double)headingFilter;
- (int)headingOrientation;
- (void)historicLocationsFromDate:(id)arg1 forInterval:(double)arg2;
- (id)init;
- (id)initWithEffectiveBundle:(id)arg1;
- (id)initWithEffectiveBundleIdentifier:(id)arg1 bundle:(id)arg2;
- (id)initWithEffectiveBundleIdentifier:(id)arg1;
- (struct __CLClient { }*)internalClient;
- (bool)isDynamicAccuracyReductionEnabled;
- (bool)isLocationServicesPreferencesDialogEnabled;
- (bool)isMatchInfoEnabled;
- (bool)isPersistentMonitoringEnabled;
- (id)location;
- (bool)locationServicesApproved;
- (bool)locationServicesAvailable;
- (bool)locationServicesEnabled;
- (void)markAsHavingReceivedLocation;
- (double)maximumRegionMonitoringDistance;
- (id)monitoredRegions;
- (void)onClientEvent:(int)arg1 supportInfo:(id)arg2;
- (void)onClientEventAuthStatus:(id)arg1;
- (void)onClientEventAutopauseStatus:(id)arg1;
- (void)onClientEventBatch:(id)arg1;
- (void)onClientEventError:(id)arg1;
- (void)onClientEventHeading:(id)arg1;
- (void)onClientEventHeadingCalibration:(id)arg1;
- (void)onClientEventHistoricLocation:(id)arg1;
- (void)onClientEventInterrupted:(id)arg1;
- (void)onClientEventLocation:(id)arg1;
- (void)onClientEventLocationUnavailable:(id)arg1;
- (void)onClientEventRanging:(id)arg1;
- (void)onClientEventRangingError:(id)arg1;
- (void)onClientEventRegion:(id)arg1;
- (void)onClientEventRegionError:(id)arg1;
- (void)onClientEventRegionResponseDelayed:(id)arg1;
- (void)onClientEventRegionSetupCompleted:(id)arg1;
- (void)onClientEventRegionState:(id)arg1;
- (void)onClientEventSignificantLocationVisit:(id)arg1;
- (void)onClientEventVehicleHeading:(id)arg1;
- (void)onClientEventVehicleSpeed:(id)arg1;
- (void)onDidBecomeActive:(id)arg1;
- (void)pauseLocationUpdates:(bool)arg1;
- (bool)pausesLocationUpdatesAutomatically;
- (bool)privateMode;
- (id)purpose;
- (id)rangedRegions;
- (void)registerAsLocationClient;
- (void)requestAlwaysAuthorization;
- (void)requestStateForRegion:(id)arg1;
- (void)requestWhenInUseAuthorization;
- (void)resetApps;
- (void)resumeLocationUpdates;
- (void)setActivityType:(long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDesiredAccuracy:(double)arg1;
- (void)setDistanceFilter:(double)arg1;
- (void)setDynamicAccuracyReductionEnabled:(bool)arg1;
- (void)setHeadingFilter:(double)arg1;
- (void)setHeadingOrientation:(int)arg1;
- (void)setLocationServicesPreferencesDialogEnabled:(bool)arg1;
- (void)setMatchInfoEnabled:(bool)arg1;
- (void)setPausesLocationUpdatesAutomatically:(bool)arg1;
- (void)setPersistentMonitoringEnabled:(bool)arg1;
- (void)setPrivateMode:(bool)arg1;
- (void)setPurpose:(id)arg1;
- (void)setSupportInfo:(bool)arg1;
- (void)startAppStatusUpdates;
- (void)startMonitoringForRegion:(id)arg1 desiredAccuracy:(double)arg2;
- (void)startMonitoringForRegion:(id)arg1;
- (void)startMonitoringSignificantLocationChanges;
- (void)startMonitoringVisits;
- (void)startRangingBeaconsInRegion:(id)arg1;
- (void)startTechStatusUpdates;
- (void)startUpdatingHeading;
- (void)startUpdatingLocation;
- (void)startUpdatingLocationWithPrompt;
- (void)startUpdatingVehicleHeading;
- (void)startUpdatingVehicleSpeed;
- (void)stopAppStatusUpdates;
- (void)stopMonitoringForRegion:(id)arg1;
- (void)stopMonitoringSignificantLocationChanges;
- (void)stopMonitoringVisits;
- (void)stopRangingBeaconsInRegion:(id)arg1;
- (void)stopTechStatusUpdates;
- (void)stopUpdatingHeading;
- (void)stopUpdatingLocation;
- (void)stopUpdatingVehicleHeading;
- (void)stopUpdatingVehicleSpeed;
- (bool)supportInfo;
- (id)technologiesInUse;

@end
