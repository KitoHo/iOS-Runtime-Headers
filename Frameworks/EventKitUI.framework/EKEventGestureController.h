/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/EventKitUI.framework/EventKitUI
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class <EKEventGestureControllerDelegate>, <EKEventGestureControllerUntimedDelegate>, EKCalendarDate, EKDayOccurrenceView, EKEvent, NSString, NSTimer, UILongPressGestureRecognizer;

@interface EKEventGestureController : NSObject <UIGestureRecognizerDelegate, UIAlertViewDelegate> {
    struct CGPoint { 
        double x; 
        double y; 
    struct CGPoint { 
        double x; 
        double y; 
    struct CGPoint { 
        double x; 
        double y; 
    struct CGPoint { 
        double x; 
        double y; 
    long long _consecutivePageTurnCount;
    EKCalendarDate *_currentDay;
    int _currentDragType;
    double _dateAtFirstTouchPoint;
    <EKEventGestureControllerDelegate> *_delegate;
    EKDayOccurrenceView *_draggingView;
    EKDayOccurrenceView *_draggingViewSource;
    EKEvent *_event;
    double _firstContactOfDraggingViewTop;
    } _firstTouchPoint;
    double _firstTouchTime;
    } _latestTouchPoint;
    } _previousTouchPoint;
    double _previousTouchTime;
    double _previousTouchVelocity;
    UILongPressGestureRecognizer *_recognizer;
    id _recurrenceSheetCompletionHandler;
    NSTimer *_scrollTimer;
    NSString *_sessionIdentifierForDebug;
    double _timeSinceEnteredPageMargin;
    } _touchOffset;
    long long _touchOffsetDays;
    <EKEventGestureControllerUntimedDelegate> *_untimedDelegate;
    bool_commitBlocked;
    bool_dragLockDisabled;
    bool_forcedStart;
    bool_hasStartedScrolling;
    bool_horizontalDragLocked;
    bool_isInCancelRegion;
    bool_isMultiDayTimedEvent;
    bool_isNewEvent;
    bool_needsCommit;
    bool_usesHorizontalDragLocking;
    bool_usesXDragOffsetInCancelRegion;
}

@property bool commitBlocked;
@property(copy,readonly) NSString * debugDescription;
@property <EKEventGestureControllerDelegate> * delegate;
@property(copy,readonly) NSString * description;
@property(readonly) EKDayOccurrenceView * draggingView;
@property(retain) EKDayOccurrenceView * draggingViewSource;
@property(retain) EKEvent * event;
@property(readonly) struct CGPoint { double x1; double x2; } firstTouchPoint;
@property(readonly) unsigned long long hash;
@property(readonly) struct CGPoint { double x1; double x2; } latestTouchPoint;
@property(retain) NSString * sessionIdentifierForDebug;
@property(readonly) Class superclass;
@property(readonly) struct CGPoint { double x1; double x2; } touchOffset;
@property <EKEventGestureControllerUntimedDelegate> * untimedDelegate;
@property bool usesHorizontalDragLocking;
@property bool usesXDragOffsetInCancelRegion;

- (void).cxx_destruct;
- (double)_Debug_HoursSinceStartOfDay:(double)arg1;
- (double)_alignedYOriginForAllDayOccurrence:(id)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2 floorAtAllDayRegionBottom:(bool)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_calculateFrameForDraggingViewIncludingTravelTime:(bool)arg1;
- (void)_cancel;
- (double)_capOccurrenceViewYOrigin:(double)arg1;
- (void)_commit;
- (void)_commitUntimed;
- (double)_computeHeightForOccurrenceViewOfDuration:(double)arg1 allDay:(bool)arg2;
- (struct CGPoint { double x1; double x2; })_computeOriginAtTouchPoint:(struct CGPoint { double x1; double x2; })arg1 forDate:(double)arg2 isAllDay:(bool)arg3 allowXOffset:(bool)arg4 allowFloorAtRegionBottom:(bool)arg5;
- (double)_computeWidthForOccurrenceView;
- (void)_createTemporaryView:(id)arg1;
- (bool)_flingOrCancelDraggingViewIfNeeded;
- (void)_installScrollTimer;
- (bool)_isPointInCancelRegion:(struct CGPoint { double x1; double x2; })arg1;
- (void)_longPress:(id)arg1;
- (double)_minimumDuration;
- (void)_removeScrollTimer;
- (void)_scrollTimerFired:(id)arg1;
- (void)_setTouchOffsetsFromPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)_setUpAfterForcedStartFromPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)_setUpAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)_update;
- (void)_updateHorizontalDragLockForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)alertView:(id)arg1 didDismissWithButtonIndex:(long long)arg2;
- (bool)commitBlocked;
- (void)dealloc;
- (id)delegate;
- (id)draggingView;
- (id)draggingViewSource;
- (void)endForcedStart;
- (id)event;
- (struct CGPoint { double x1; double x2; })firstTouchPoint;
- (void)forceStartWithOccurrence:(id)arg1 shouldUpdateViewSource:(bool)arg2 shouldUpdateOrigin:(bool)arg3;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (id)initWithView:(id)arg1;
- (void)invalidate;
- (bool)isDraggingOccurrence;
- (struct CGPoint { double x1; double x2; })latestTouchPoint;
- (void)promptUserForRecurrenceActionOnOccurrence:(id)arg1 whenFinished:(id)arg2;
- (void)removeDraggedOccurrence;
- (id)sessionIdentifierForDebug;
- (void)setCommitBlocked:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDraggingViewSource:(id)arg1;
- (void)setEvent:(id)arg1;
- (void)setSessionIdentifierForDebug:(id)arg1;
- (void)setUntimedDelegate:(id)arg1;
- (void)setUsesHorizontalDragLocking:(bool)arg1;
- (void)setUsesXDragOffsetInCancelRegion:(bool)arg1;
- (struct CGPoint { double x1; double x2; })touchOffset;
- (id)untimedDelegate;
- (void)updateDraggingOccurrence;
- (void)updateDraggingOccurrenceForced:(bool)arg1 animated:(bool)arg2;
- (void)updateDraggingOccurrenceFrame;
- (void)updateDraggingOccurrenceFrameFromSource;
- (void)updateDraggingOccurrenceOrigin;
- (bool)usesHorizontalDragLocking;
- (bool)usesXDragOffsetInCancelRegion;

@end
