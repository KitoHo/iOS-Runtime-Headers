/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/EventKitUI.framework/EventKitUI
 */

@class EKCurrentTimeMarkerView, NSMutableArray, NSString, UIColor, UIImageView, UIView;

@interface EKDayGridView : UIView <EKCurrentTimeMarkerViewUpdating> {
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    unsigned int _leftBorder : 1;
    unsigned int _rightBorder : 1;
    UIColor *_backgroundColor;
    unsigned long long _daysToDisplay;
    double _eventHorizontalInset;
    double _fixedDayWidth;
    double _gridHeightScale;
    NSMutableArray *_gridPatternViews;
    double _hourHeight;
    double _hoursToPadBottom;
    double _hoursToPadTop;
    } _lastBounds;
    UIView *_leftBorderView;
    UIColor *_lineColor;
    NSMutableArray *_middleBorderViews;
    long long _orientation;
    UIView *_rightBorderView;
    int _selected;
    UIImageView *_timeDot;
    double _timeInset;
    EKCurrentTimeMarkerView *_timeMarker;
    long long _timeMarkerDotDay;
    double _timeWidth;
    bool_animatesTimeMarker;
    bool_rightBorderInsetsOccurrences;
    bool_showsTimeLine;
    bool_showsTimeMarker;
    bool_usesVibrantGridDrawing;
}

@property bool animatesTimeMarker;
@property(copy,readonly) NSString * debugDescription;
@property(copy,readonly) NSString * description;
@property double eventHorizontalInset;
@property double fixedDayWidth;
@property double gridHeightScale;
@property(readonly) unsigned long long hash;
@property(readonly) double hourHeight;
@property double hoursToPadBottom;
@property double hoursToPadTop;
@property(retain) UIColor * lineColor;
@property bool rightBorderInsetsOccurrences;
@property(getter=isSelected) bool selected;
@property bool showsLeftBorder;
@property bool showsRightBorder;
@property bool showsTimeLine;
@property bool showsTimeMarker;
@property(readonly) Class superclass;
@property(readonly) double timeInset;
@property(readonly) EKCurrentTimeMarkerView * timeMarker;
@property long long timeMarkerDotDay;
@property(readonly) double timeWidth;
@property(readonly) double topPadding;
@property bool usesVibrantGridDrawing;
@property(readonly) double widthForOccurrences;

+ (void)cacheBackgroundImage:(id)arg1 forKey:(id)arg2;
+ (id)cachedBackgroundImageForKey:(id)arg1;

- (void).cxx_destruct;
- (double)_dayWidth;
- (id)_generateGridImage;
- (void)_updateTimeMarker;
- (void)addSubview:(id)arg1;
- (bool)animatesTimeMarker;
- (double)bottomPadding;
- (double)eventHorizontalInset;
- (double)fixedDayWidth;
- (double)gridHeightScale;
- (double)hourHeight;
- (double)hoursToPadBottom;
- (double)hoursToPadTop;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 backgroundColor:(id)arg2 opaque:(bool)arg3 numberOfDaysToDisplay:(unsigned long long)arg4;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isSelected;
- (void)layoutSubviews;
- (id)lineColor;
- (double)positionOfSecond:(long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectForStartSeconds:(long long)arg1 endSeconds:(long long)arg2;
- (bool)rightBorderInsetsOccurrences;
- (int)secondAtPosition:(double)arg1;
- (void)setAnimatesTimeMarker:(bool)arg1;
- (void)setEventHorizontalInset:(double)arg1;
- (void)setFixedDayWidth:(double)arg1;
- (void)setGridHeightScale:(double)arg1;
- (void)setHoursToPadBottom:(double)arg1;
- (void)setHoursToPadTop:(double)arg1;
- (void)setLineColor:(id)arg1;
- (void)setOrientation:(long long)arg1;
- (void)setRightBorderInsetsOccurrences:(bool)arg1;
- (void)setSelected:(bool)arg1;
- (void)setShowsLeftBorder:(bool)arg1;
- (void)setShowsRightBorder:(bool)arg1;
- (void)setShowsTimeLine:(bool)arg1;
- (void)setShowsTimeMarker:(bool)arg1;
- (void)setTimeMarkerDotDay:(long long)arg1;
- (void)setUsesVibrantGridDrawing:(bool)arg1;
- (bool)showsLeftBorder;
- (bool)showsRightBorder;
- (bool)showsTimeLine;
- (bool)showsTimeMarker;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (id)timeDotImage;
- (double)timeInset;
- (id)timeMarker;
- (long long)timeMarkerDotDay;
- (double)timeWidth;
- (void)tintColorDidChange;
- (double)topPadding;
- (void)updateMarkerPosition;
- (bool)usesVibrantGridDrawing;
- (double)widthForOccurrences;

@end
