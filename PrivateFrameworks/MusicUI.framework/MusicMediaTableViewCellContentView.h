/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MusicUI.framework/MusicUI
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class MPUEmphasizedText, MPUItemOfferButton, MPUSlantedTextPlaceholderArtworkView, MusicMediaOfferButtonState, MusicNowPlayingIndicatorView, NSString, UIImage, UIImageView, UILabel;

@interface MusicMediaTableViewCellContentView : MusicTableViewCellContentView <SKUIItemOfferButtonDelegate> {
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    UIImage *_artworkImage;
    MPUSlantedTextPlaceholderArtworkView *_artworkView;
    } _contentBoundsEdgeInsets;
    MPUEmphasizedText *_detailEmphasizedText;
    UILabel *_detailLabel;
    MPUItemOfferButton *_itemOfferButton;
    MusicNowPlayingIndicatorView *_nowPlayingIndicatorView;
    id _offerButtonActionHandler;
    MusicMediaOfferButtonState *_offerButtonState;
    NSString *_placeholderSubtitleText;
    NSString *_placeholderTitleText;
    long long _playbackState;
    UIImage *_rightAccessoryHighlightedImage;
    UIImage *_rightAccessoryImage;
    UIImageView *_rightAccessoryImageView;
    MPUEmphasizedText *_subtitleEmphasizedText;
    UILabel *_subtitleLabel;
    MPUEmphasizedText *_titleEmphasizedText;
    UILabel *_titleLabel;
    bool_displayAsDisabled;
    bool_editing;
    bool_explicitTrack;
    bool_highlighted;
    bool_needsContentReload;
    bool_selected;
    bool_showsArtworkImage;
}

@property(retain) UIImage * artworkImage;
@property(retain) MPUSlantedTextPlaceholderArtworkView * artworkView;
@property struct UIEdgeInsets { double x1; double x2; double x3; double x4; } contentBoundsEdgeInsets;
@property(copy,readonly) NSString * debugDescription;
@property(copy,readonly) NSString * description;
@property(copy) MPUEmphasizedText * detailEmphasizedText;
@property(retain) UILabel * detailLabel;
@property(getter=isDisplayingAsDisabled) bool displayAsDisabled;
@property(getter=isEditing) bool editing;
@property(getter=isExplicitTrack) bool explicitTrack;
@property(readonly) unsigned long long hash;
@property(getter=isHighlighted) bool highlighted;
@property(retain) MPUItemOfferButton * itemOfferButton;
@property(retain) MusicNowPlayingIndicatorView * nowPlayingIndicatorView;
@property(copy) id offerButtonActionHandler;
@property(retain) MusicMediaOfferButtonState * offerButtonState;
@property(copy) NSString * placeholderSubtitleText;
@property(copy) NSString * placeholderTitleText;
@property long long playbackState;
@property(retain) UIImage * rightAccessoryHighlightedImage;
@property(retain) UIImage * rightAccessoryImage;
@property(retain) UIImageView * rightAccessoryImageView;
@property(getter=isSelected) bool selected;
@property bool showsArtworkImage;
@property(copy) MPUEmphasizedText * subtitleEmphasizedText;
@property(retain) UILabel * subtitleLabel;
@property(readonly) Class superclass;
@property(copy) MPUEmphasizedText * titleEmphasizedText;
@property(retain) UILabel * titleLabel;

+ (void)_contentSizeCategoryDidChangeNotification:(id)arg1;
+ (struct CGSize { double x1; double x2; })artworkSize;
+ (void)contentSizeCategoryDidChange;
+ (void)initialize;

- (void).cxx_destruct;
- (void)_contentSizeCategoryDidChangeNotification:(id)arg1;
- (void)_itemOfferButtonAction:(id)arg1;
- (void)_itemOfferButtonCancelConfirmationAction:(id)arg1;
- (void)_itemOfferButtonShowConfirmationAction:(id)arg1;
- (void)_reloadRightAccessoryImageView;
- (void)_updateItemOfferButtonAnimated:(bool)arg1;
- (id)artworkImage;
- (id)artworkView;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })contentBoundsEdgeInsets;
- (void)contentSizeCategoryDidChange;
- (void)dealloc;
- (id)detailEmphasizedText;
- (id)detailLabel;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isDisplayingAsDisabled;
- (bool)isEditing;
- (bool)isExplicitTrack;
- (bool)isHighlighted;
- (bool)isSelected;
- (id)itemOfferButton;
- (void)itemOfferButtonWillAnimateTransition:(id)arg1;
- (void)layoutSubviews;
- (id)nowPlayingIndicatorView;
- (id)offerButtonActionHandler;
- (id)offerButtonState;
- (id)placeholderSubtitleText;
- (id)placeholderTitleText;
- (long long)playbackState;
- (void)reloadContent;
- (id)rightAccessoryHighlightedImage;
- (id)rightAccessoryImage;
- (id)rightAccessoryImageView;
- (void)setArtworkImage:(id)arg1 animated:(bool)arg2;
- (void)setArtworkImage:(id)arg1;
- (void)setArtworkView:(id)arg1;
- (void)setContentBoundsEdgeInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setDetailEmphasizedText:(id)arg1;
- (void)setDetailLabel:(id)arg1;
- (void)setDisplayAsDisabled:(bool)arg1;
- (void)setEditing:(bool)arg1 animated:(bool)arg2;
- (void)setEditing:(bool)arg1;
- (void)setExplicitTrack:(bool)arg1;
- (void)setHighlighted:(bool)arg1 animated:(bool)arg2;
- (void)setHighlighted:(bool)arg1;
- (void)setItemOfferButton:(id)arg1;
- (void)setNeedsContentReload;
- (void)setNowPlayingIndicatorView:(id)arg1;
- (void)setOfferButtonActionHandler:(id)arg1;
- (void)setOfferButtonState:(id)arg1 animated:(bool)arg2;
- (void)setOfferButtonState:(id)arg1;
- (void)setPlaceholderSubtitleText:(id)arg1;
- (void)setPlaceholderTitleText:(id)arg1;
- (void)setPlaybackState:(long long)arg1;
- (void)setRightAccessoryHighlightedImage:(id)arg1;
- (void)setRightAccessoryImage:(id)arg1;
- (void)setRightAccessoryImageView:(id)arg1;
- (void)setSelected:(bool)arg1 animated:(bool)arg2;
- (void)setSelected:(bool)arg1;
- (void)setShowsArtworkImage:(bool)arg1;
- (void)setSubtitleEmphasizedText:(id)arg1;
- (void)setSubtitleLabel:(id)arg1;
- (void)setTitleEmphasizedText:(id)arg1;
- (void)setTitleLabel:(id)arg1;
- (bool)showsArtworkImage;
- (id)subtitleEmphasizedText;
- (id)subtitleLabel;
- (id)titleEmphasizedText;
- (id)titleLabel;
- (void)traitCollectionDidChange:(id)arg1;
- (bool)updateAttributedTextForLabel:(id)arg1;
- (bool)updateLabelFonts;

@end
