/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class <HAPAccessoryServerBTLEDelegatePrivate>, CBCharacteristic, CBPeripheral, CBService, HAPAccessoryServerBrowserBTLE, NSData, NSMapTable, NSMutableData, NSObject<OS_dispatch_queue>, NSObject<OS_dispatch_source>, NSString;

@interface HAPAccessoryServerBTLE : HAPAccessoryServer <CBPeripheralDelegate> {
    CBService *_accessoryInfoService;
    NSString *_accessoryPairingUsername;
    unsigned long long _availableInstanceID;
    HAPAccessoryServerBrowserBTLE *_browser;
    NSMapTable *_btleCharacteristicToHAPCharacteristicMap;
    NSMapTable *_btleServiceToHAPServiceMap;
    unsigned long long _characteristicDiscoveryRequestCount;
    NSObject<OS_dispatch_source> *_connectionLifetimeTimer;
    NSString *_controllerUsername;
    <HAPAccessoryServerBTLEDelegatePrivate> *_delegate;
    NSObject<OS_dispatch_queue> *_delegateQueue;
    NSMapTable *_hapCharacteristicReadCompletionQueues;
    NSMapTable *_hapCharacteristicWriteCompletionQueues;
    CBCharacteristic *_identifyCharacteristic;
    CBCharacteristic *_manufacturerCharacteristic;
    CBCharacteristic *_modelCharacteristic;
    CBCharacteristic *_pairSetupCharacteristic;
    CBCharacteristic *_pairVerifyCharacteristic;
    id _pairVerifyCompletionBlock;
    CBCharacteristic *_pairingFeaturesCharacteristic;
    CBService *_pairingService;
    struct PairingSessionPrivate { } *_pairingSession;
    CBCharacteristic *_pairingsCharacteristic;
    CBPeripheral *_peripheral;
    NSObject<OS_dispatch_queue> *_queue;
    NSMutableData *_readNonce;
    CBCharacteristic *_serialNumberCharacteristic;
    NSData *_sessionReadKey;
    NSData *_sessionWriteKey;
    unsigned long long _state;
    id _unpairedIdentifyCompletionBlock;
    NSMutableData *_writeNonce;
    bool_disconnecting;
    bool_removeOnDisconnect;
    bool_startPairingRequested;
    bool_unpairedIdentifyRequested;
}

@property(retain) CBService * accessoryInfoService;
@property(retain) NSString * accessoryPairingUsername;
@property unsigned long long availableInstanceID;
@property HAPAccessoryServerBrowserBTLE * browser;
@property(retain) NSMapTable * btleCharacteristicToHAPCharacteristicMap;
@property(retain) NSMapTable * btleServiceToHAPServiceMap;
@property unsigned long long characteristicDiscoveryRequestCount;
@property(retain) NSObject<OS_dispatch_source> * connectionLifetimeTimer;
@property(retain) NSString * controllerUsername;
@property(copy,readonly) NSString * debugDescription;
@property <HAPAccessoryServerBTLEDelegatePrivate> * delegate;
@property(retain) NSObject<OS_dispatch_queue> * delegateQueue;
@property(copy,readonly) NSString * description;
@property(getter=isDisconnecting) bool disconnecting;
@property(retain) NSMapTable * hapCharacteristicReadCompletionQueues;
@property(retain) NSMapTable * hapCharacteristicWriteCompletionQueues;
@property(readonly) unsigned long long hash;
@property(retain) CBCharacteristic * identifyCharacteristic;
@property(retain) CBCharacteristic * manufacturerCharacteristic;
@property(retain) CBCharacteristic * modelCharacteristic;
@property(retain) CBCharacteristic * pairSetupCharacteristic;
@property(retain) CBCharacteristic * pairVerifyCharacteristic;
@property(copy) id pairVerifyCompletionBlock;
@property(retain) CBCharacteristic * pairingFeaturesCharacteristic;
@property(retain) CBService * pairingService;
@property(retain) CBCharacteristic * pairingsCharacteristic;
@property(retain) CBPeripheral * peripheral;
@property(retain) NSObject<OS_dispatch_queue> * queue;
@property(retain) NSMutableData * readNonce;
@property bool removeOnDisconnect;
@property(retain) CBCharacteristic * serialNumberCharacteristic;
@property(retain) NSData * sessionReadKey;
@property(retain) NSData * sessionWriteKey;
@property bool startPairingRequested;
@property unsigned long long state;
@property(readonly) Class superclass;
@property(copy) id unpairedIdentifyCompletionBlock;
@property bool unpairedIdentifyRequested;
@property(retain) NSMutableData * writeNonce;

+ (id)_convertFromBTLEToHAPUUID:(id)arg1;

- (void).cxx_destruct;
- (void)_addPairingWithIdentifier:(id)arg1 publicKey:(id)arg2 admin:(bool)arg3 queue:(id)arg4 completion:(id)arg5;
- (id)_btleCharacteristicForHAPCharacteristic:(id)arg1;
- (void)_cancelConnectionLifetimeTimer;
- (bool)_checkPairedState;
- (id)_convertFromBTLEValue:(id)arg1 metadata:(id)arg2;
- (id)_convertToBTLEValue:(id)arg1 metadata:(id)arg2;
- (id)_convertValueToTLV:(id)arg1 characteristic:(id)arg2 error:(id*)arg3;
- (void)_createPrimaryAccessoryFromAdvertisementData;
- (id)_decryptData:(id)arg1 error:(id*)arg2;
- (bool)_delegateRespondsToSelector:(SEL)arg1;
- (id)_dequeueReadCompletionTupleForCharacteristic:(id)arg1;
- (id)_dequeueWriteCompletionHandlerForCharacteristic:(id)arg1;
- (id)_encryptDataAndGenerateAuthTag:(id)arg1;
- (void)_enqueueReadCompletionHandler:(id)arg1 queue:(id)arg2 forCharacteristic:(id)arg3;
- (void)_enqueueWriteCompletionHandler:(id)arg1 forCharacteristic:(id)arg2;
- (int)_ensurePairingSessionIsInitializedWithType:(unsigned int)arg1;
- (void)_establishSecureSession;
- (void)_getAttributeDatabase;
- (void)_handleConnectionLifetimeTimeout;
- (void)_handleDisconnectionWithQueue:(id)arg1 withCompletion:(id)arg2;
- (void)_handleHAPCharacteristicDiscoveryForService:(id)arg1 error:(id)arg2;
- (void)_handleHAPServiceDiscovery;
- (void)_handleHAPWriteConfirmationForCharacteristic:(id)arg1 error:(id)arg2;
- (int)_handlePairSetupExchangeWithData:(id)arg1;
- (int)_handlePairVerifyExchangeWithData:(id)arg1;
- (void)_handlePairingStateMachine;
- (void)_handlePairingsReadForCharacteristic:(id)arg1 readError:(id)arg2 removing:(bool)arg3 queue:(id)arg4 completion:(id)arg5;
- (void)_handlePairingsWriteForCharacteristic:(id)arg1 writeError:(id)arg2 removing:(bool)arg3 queue:(id)arg4 completion:(id)arg5;
- (void)_handleSuccessfulBTLEConnection;
- (void)_handleUpdatedValueForBTLECharacteristic:(id)arg1 error:(id)arg2;
- (id)_hapCharacteristicForBTLECharacteristic:(id)arg1;
- (bool)_isSessionEstablished;
- (id)_nextInstanceID;
- (void)_notifyDelegateOfReceivedEncryptedAuthenticatedData:(id)arg1 forCharacteristic:(id)arg2;
- (void)_notifyDelegateOfReceivedPlaintextData:(id)arg1 forCharacteristic:(id)arg2;
- (void)_notifyDelegateOfSentEncryptedAuthenticatedData:(id)arg1 forCharacteristic:(id)arg2;
- (void)_notifyDelegateOfSentPlaintextData:(id)arg1 forCharacteristic:(id)arg2;
- (id)_pairSetupHAPCharacteristic;
- (int)_pairSetupStart;
- (int)_pairSetupTryPassword:(id)arg1;
- (id)_pairVerifyHAPCharacteristic;
- (int)_pairVerifyStart;
- (id)_parseBTLEService:(id)arg1;
- (void)_readCharacteristicValues:(id)arg1 queue:(id)arg2 completionHandler:(id)arg3;
- (void)_readValueForCharacteristic:(id)arg1 withCompletionHandler:(id)arg2 queue:(id)arg3;
- (void)_removePairingWithIdentifier:(id)arg1 publicKey:(id)arg2 queue:(id)arg3 completion:(id)arg4;
- (void)_resetState;
- (void)_setupBTLEConnectionToPeripheral;
- (bool)_shouldEnableSessionSecurity;
- (void)_updateConnectionLifetimeTimer;
- (void)_writeCharacteristicValues:(id)arg1 queue:(id)arg2 completionHandler:(id)arg3;
- (void)_writeValue:(id)arg1 forCharacteristic:(id)arg2 withCompletionHandler:(id)arg3 queue:(id)arg4;
- (id)accessoryInfoService;
- (id)accessoryPairingUsername;
- (bool)addPairingWithIdentifier:(id)arg1 publicKey:(id)arg2 admin:(bool)arg3 queue:(id)arg4 completion:(id)arg5;
- (unsigned long long)availableInstanceID;
- (id)briefDescription;
- (id)browser;
- (id)btleCharacteristicToHAPCharacteristicMap;
- (id)btleServiceToHAPServiceMap;
- (unsigned long long)characteristicDiscoveryRequestCount;
- (id)connectionLifetimeTimer;
- (void)continuePairingAfterAuthPrompt;
- (id)controllerUsername;
- (void)dealloc;
- (id)delegate;
- (id)delegateQueue;
- (id)description;
- (void)discoverAccessories;
- (void)enableEvents:(bool)arg1 forCharacteristics:(id)arg2 withCompletionHandler:(id)arg3 queue:(id)arg4;
- (void)handleConnectionWithError:(id)arg1;
- (void)handleDisconnectionWithError:(id)arg1 withQueue:(id)arg2 withCompletion:(id)arg3;
- (id)hapCharacteristicReadCompletionQueues;
- (id)hapCharacteristicWriteCompletionQueues;
- (id)identifier;
- (id)identifyCharacteristic;
- (void)identifyWithCompletion:(id)arg1;
- (id)initWithPeripheral:(id)arg1 name:(id)arg2 pairingUsername:(id)arg3 browser:(id)arg4 keyStore:(id)arg5;
- (bool)isDisconnecting;
- (bool)isPaired;
- (long long)linkType;
- (id)manufacturerCharacteristic;
- (id)modelCharacteristic;
- (id)pairSetupCharacteristic;
- (id)pairVerifyCharacteristic;
- (id)pairVerifyCompletionBlock;
- (id)pairingFeaturesCharacteristic;
- (id)pairingService;
- (id)pairingsCharacteristic;
- (void)peripheral:(id)arg1 didDiscoverCharacteristicsForService:(id)arg2 error:(id)arg3;
- (void)peripheral:(id)arg1 didDiscoverServices:(id)arg2;
- (void)peripheral:(id)arg1 didModifyServices:(id)arg2;
- (void)peripheral:(id)arg1 didUpdateValueForCharacteristic:(id)arg2 error:(id)arg3;
- (void)peripheral:(id)arg1 didWriteValueForCharacteristic:(id)arg2 error:(id)arg3;
- (id)peripheral;
- (id)queue;
- (void)readCharacteristicValues:(id)arg1 queue:(id)arg2 completionHandler:(id)arg3;
- (id)readNonce;
- (void)readValueForCharacteristic:(id)arg1 queue:(id)arg2 completionHandler:(id)arg3;
- (bool)removeOnDisconnect;
- (bool)removePairingForCurrentControllerOnQueue:(id)arg1 completion:(id)arg2;
- (bool)removePairingWithIdentifier:(id)arg1 publicKey:(id)arg2 queue:(id)arg3 completion:(id)arg4;
- (id)serialNumberCharacteristic;
- (id)sessionReadKey;
- (id)sessionWriteKey;
- (void)setAccessoryInfoService:(id)arg1;
- (void)setAccessoryPairingUsername:(id)arg1;
- (void)setAvailableInstanceID:(unsigned long long)arg1;
- (void)setBrowser:(id)arg1;
- (void)setBtleCharacteristicToHAPCharacteristicMap:(id)arg1;
- (void)setBtleServiceToHAPServiceMap:(id)arg1;
- (void)setCharacteristicDiscoveryRequestCount:(unsigned long long)arg1;
- (void)setConnectionLifetimeTimer:(id)arg1;
- (void)setControllerUsername:(id)arg1;
- (void)setDelegate:(id)arg1 queue:(id)arg2;
- (void)setDelegate:(id)arg1;
- (void)setDelegateQueue:(id)arg1;
- (void)setDisconnecting:(bool)arg1;
- (void)setHapCharacteristicReadCompletionQueues:(id)arg1;
- (void)setHapCharacteristicWriteCompletionQueues:(id)arg1;
- (void)setIdentifyCharacteristic:(id)arg1;
- (void)setManufacturerCharacteristic:(id)arg1;
- (void)setModelCharacteristic:(id)arg1;
- (void)setPairSetupCharacteristic:(id)arg1;
- (void)setPairVerifyCharacteristic:(id)arg1;
- (void)setPairVerifyCompletionBlock:(id)arg1;
- (void)setPairingFeaturesCharacteristic:(id)arg1;
- (void)setPairingService:(id)arg1;
- (void)setPairingsCharacteristic:(id)arg1;
- (void)setPeripheral:(id)arg1;
- (void)setQueue:(id)arg1;
- (void)setReadNonce:(id)arg1;
- (void)setRemoveOnDisconnect:(bool)arg1;
- (void)setSerialNumberCharacteristic:(id)arg1;
- (void)setSessionReadKey:(id)arg1;
- (void)setSessionWriteKey:(id)arg1;
- (void)setStartPairingRequested:(bool)arg1;
- (void)setState:(unsigned long long)arg1;
- (void)setUnpairedIdentifyCompletionBlock:(id)arg1;
- (void)setUnpairedIdentifyRequested:(bool)arg1;
- (void)setWriteNonce:(id)arg1;
- (void)startPairing;
- (bool)startPairingRequested;
- (unsigned long long)state;
- (bool)stopPairingWithError:(id*)arg1;
- (bool)tryPairingPassword:(id)arg1 error:(id*)arg2;
- (id)unpairedIdentifyCompletionBlock;
- (bool)unpairedIdentifyRequested;
- (void)writeCharacteristicValues:(id)arg1 queue:(id)arg2 completionHandler:(id)arg3;
- (id)writeNonce;
- (void)writeValue:(id)arg1 forCharacteristic:(id)arg2 queue:(id)arg3 completionHandler:(id)arg4;

@end
