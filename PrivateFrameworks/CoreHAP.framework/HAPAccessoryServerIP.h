/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class <HAPAccessoryServerIPDelegatePrivate>, HAPAccessory, HAPHTTPClient, NSArray, NSDictionary, NSMutableArray, NSObject<OS_dispatch_queue>, NSString;

@interface HAPAccessoryServerIP : HAPAccessoryServer <HAPHTTPClientDelegate, HAPHTTPClientDebugDelegate> {
    NSString *_accessoryServerName;
    NSDictionary *_bonjourDeviceInfo;
    unsigned long long _configNumber;
    NSString *_controllerUsername;
    <HAPAccessoryServerIPDelegatePrivate> *_delegate;
    NSObject<OS_dispatch_queue> *_delegateQueue;
    NSString *_deviceID;
    unsigned long long _featureFlags;
    HAPHTTPClient *_httpClient;
    NSArray *_ipServices;
    struct MFiSAP { } *_mfiSAP;
    NSString *_model;
    id _netServiceResolveCompletionBlock;
    id _pairVerifyCompletionBlock;
    struct PairingSessionPrivate { } *_pairingSession;
    HAPAccessory *_primaryAccessoryForServer;
    NSString *_protocolVersion;
    NSMutableArray *_queuedOperations;
    NSString *_sourceVersion;
    unsigned long long _stateNumber;
    NSObject<OS_dispatch_queue> *_workQueue;
    bool_establishingSecureConnection;
}

@property(copy) NSString * accessoryServerName;
@property(retain) NSDictionary * bonjourDeviceInfo;
@property unsigned long long configNumber;
@property(retain) NSString * controllerUsername;
@property(copy,readonly) NSString * debugDescription;
@property <HAPAccessoryServerIPDelegatePrivate> * delegate;
@property(retain) NSObject<OS_dispatch_queue> * delegateQueue;
@property(copy,readonly) NSString * description;
@property(copy) NSString * deviceID;
@property bool establishingSecureConnection;
@property(readonly) unsigned long long hash;
@property(retain) HAPHTTPClient * httpClient;
@property(retain) NSArray * ipServices;
@property(copy) NSString * model;
@property(copy) id netServiceResolveCompletionBlock;
@property(copy) id pairVerifyCompletionBlock;
@property(retain) HAPAccessory * primaryAccessoryForServer;
@property(copy) NSString * protocolVersion;
@property(retain) NSMutableArray * queuedOperations;
@property(copy) NSString * sourceVersion;
@property unsigned long long stateNumber;
@property(readonly) Class superclass;
@property(retain) NSObject<OS_dispatch_queue> * workQueue;

- (void).cxx_destruct;
- (bool)_checkPairedState;
- (int)_continuePairingAfterAuthPrompt;
- (void)_copyPropertiesForPrimaryAccessoryFromAccessory:(id)arg1;
- (bool)_delegateRespondsToSelector:(SEL)arg1;
- (id)_deviceID;
- (void)_enableEvents:(bool)arg1 forCharacteristics:(id)arg2 withCompletionHandler:(id)arg3 queue:(id)arg4;
- (int)_ensureHTTPClientSetUp;
- (int)_ensurePairingSessionIsInitializedWithType:(unsigned int)arg1;
- (void)_error:(id)arg1 forReadCharacteristicValues:(id)arg2 queue:(id)arg3 completionHandler:(id)arg4;
- (void)_error:(id)arg1 forWriteCharacteristicValues:(id)arg2 queue:(id)arg3 completionHandler:(id)arg4;
- (void)_establishSecureConnectionAndFetchAttributeDatabase;
- (void)_establishSecureSession;
- (void)_getAttributeDatabase;
- (void)_handleEventResponseObject:(id)arg1 type:(unsigned long long)arg2 httpStatus:(int)arg3 error:(id)arg4 characteristics:(id)arg5 requestedEventState:(bool)arg6 completion:(id)arg7 queue:(id)arg8;
- (void)_handleHTTPClientErrors;
- (int)_handleMFiSetupCompletionWithData:(id)arg1;
- (int)_handlePairSetupCompletionWithData:(id)arg1;
- (int)_handlePairVerifyCompletionWithData:(id)arg1;
- (void)_handlePairingsResponseObject:(id)arg1 type:(unsigned long long)arg2 httpStatus:(int)arg3 httpError:(id)arg4 removeRequest:(bool)arg5 completionQueue:(id)arg6 completionBlock:(id)arg7;
- (void)_handleReadResponseObject:(id)arg1 type:(unsigned long long)arg2 httpStatus:(int)arg3 error:(id)arg4 characteristics:(id)arg5 queue:(id)arg6 completion:(id)arg7;
- (void)_handleWriteResponseObject:(id)arg1 type:(unsigned long long)arg2 httpStatus:(int)arg3 error:(id)arg4 requestTuples:(id)arg5 queue:(id)arg6 completion:(id)arg7;
- (void)_isAccessoryPublicKeyPresent:(bool*)arg1 registeredWithHomeKit:(bool*)arg2;
- (bool)_isSessionEstablished;
- (bool)_mergeExistingAccessory:(id)arg1 withNewAccessory:(id)arg2;
- (bool)_mergeExistingService:(id)arg1 withNewService:(id)arg2;
- (int)_mfiSetupStart;
- (int)_pairSetupStart;
- (int)_pairSetupTryPassword:(id)arg1;
- (int)_pairVerifyStart;
- (bool)_parseAndValidateTXTRecord;
- (void)_parseAttributeDatabase:(id)arg1;
- (bool)_parseTXTRecordDictionary:(id)arg1;
- (bool)_processEvent:(id)arg1 matchedCharacteristic:(id*)arg2;
- (void)_processQueuedOperationsWithError:(id)arg1;
- (void)_queueAddPairingWithIdentifier:(id)arg1 publicKey:(id)arg2 admin:(bool)arg3 queue:(id)arg4 completion:(id)arg5;
- (void)_queueEnableEvents:(bool)arg1 forCharacteristics:(id)arg2 withCompletionHandler:(id)arg3 queue:(id)arg4;
- (void)_queueReadCharacteristicValues:(id)arg1 queue:(id)arg2 completionHandler:(id)arg3;
- (void)_queueWriteCharacteristicValues:(id)arg1 queue:(id)arg2 withCompletionHandler:(id)arg3;
- (void)_readCharacteristicValues:(id)arg1 queue:(id)arg2 completionHandler:(id)arg3;
- (void)_removePairingWithIdentifier:(id)arg1 publicKey:(id)arg2 queue:(id)arg3 completion:(id)arg4;
- (void)_setDeviceIDWithString:(id)arg1;
- (void)_startAddPairingWithIdentifier:(id)arg1 publicKey:(id)arg2 admin:(bool)arg3 queue:(id)arg4 completion:(id)arg5;
- (void)_tearDownSession;
- (bool)_updateAccessories:(id)arg1;
- (void)_updateWithBonjourDeviceInfo:(id)arg1;
- (void)_writeCharacteristicValues:(id)arg1 queue:(id)arg2 completionHandler:(id)arg3;
- (id)accessoryServerName;
- (bool)addPairingWithIdentifier:(id)arg1 publicKey:(id)arg2 admin:(bool)arg3 queue:(id)arg4 completion:(id)arg5;
- (id)bonjourDeviceInfo;
- (id)briefDescription;
- (unsigned long long)configNumber;
- (void)continuePairingAfterAuthPrompt;
- (id)controllerUsername;
- (void)dealloc;
- (id)delegate;
- (id)delegateQueue;
- (id)description;
- (id)deviceID;
- (void)discoverAccessories;
- (void)enableEvents:(bool)arg1 forCharacteristics:(id)arg2 withCompletionHandler:(id)arg3 queue:(id)arg4;
- (bool)establishingSecureConnection;
- (void)httpClient:(id)arg1 didReceiveEvent:(id)arg2;
- (void)httpClient:(id)arg1 didReceiveHTTPMessageWithHeaders:(id)arg2 body:(id)arg3;
- (void)httpClient:(id)arg1 willSendHTTPMessageWithHeaders:(id)arg2 body:(id)arg3;
- (id)httpClient;
- (void)httpClientDidCloseConnectionDueToServer:(id)arg1;
- (id)identifier;
- (void)identifyWithCompletion:(id)arg1;
- (id)initWithBonjourDeviceInfo:(id)arg1 keyStore:(id)arg2;
- (void)invalidate;
- (id)ipServices;
- (bool)isPaired;
- (long long)linkType;
- (id)model;
- (id)name;
- (id)netServiceResolveCompletionBlock;
- (id)pairVerifyCompletionBlock;
- (id)primaryAccessory;
- (id)primaryAccessoryForServer;
- (id)protocolVersion;
- (id)queuedOperations;
- (void)readCharacteristicValues:(id)arg1 queue:(id)arg2 completionHandler:(id)arg3;
- (void)readValueForCharacteristic:(id)arg1 queue:(id)arg2 completionHandler:(id)arg3;
- (bool)removePairingForCurrentControllerOnQueue:(id)arg1 completion:(id)arg2;
- (bool)removePairingWithIdentifier:(id)arg1 publicKey:(id)arg2 queue:(id)arg3 completion:(id)arg4;
- (id)services;
- (void)setAccessoryServerName:(id)arg1;
- (void)setBonjourDeviceInfo:(id)arg1;
- (void)setConfigNumber:(unsigned long long)arg1;
- (void)setControllerUsername:(id)arg1;
- (void)setDelegate:(id)arg1 queue:(id)arg2;
- (void)setDelegate:(id)arg1;
- (void)setDelegateQueue:(id)arg1;
- (void)setDeviceID:(id)arg1;
- (void)setEstablishingSecureConnection:(bool)arg1;
- (void)setHttpClient:(id)arg1;
- (void)setIpServices:(id)arg1;
- (void)setModel:(id)arg1;
- (void)setNetServiceResolveCompletionBlock:(id)arg1;
- (void)setPairVerifyCompletionBlock:(id)arg1;
- (void)setPrimaryAccessoryForServer:(id)arg1;
- (void)setProtocolVersion:(id)arg1;
- (void)setQueuedOperations:(id)arg1;
- (void)setSourceVersion:(id)arg1;
- (void)setStateNumber:(unsigned long long)arg1;
- (void)setWorkQueue:(id)arg1;
- (id)sourceVersion;
- (void)startPairing;
- (unsigned long long)stateNumber;
- (bool)stopPairingWithError:(id*)arg1;
- (bool)tryPairingPassword:(id)arg1 error:(id*)arg2;
- (void)updateWithBonjourDeviceInfo:(id)arg1;
- (id)workQueue;
- (void)writeCharacteristicValues:(id)arg1 queue:(id)arg2 completionHandler:(id)arg3;
- (void)writeValue:(id)arg1 forCharacteristic:(id)arg2 queue:(id)arg3 completionHandler:(id)arg4;

@end
