/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@class <TSDRepDragTrackerDelegate>, CAShapeLayer, NSMutableSet, NSString, NSTimer, TSDAutoscroll, TSDHUDViewController, TSDRep, TSUPointerKeyDictionary;

@interface TSDRepDragTracker : NSObject <TSDLayoutManipulatingTracker, TSDDecorator, TSDRepTracker, TSDRepDragTracker> {
    struct CGPoint { 
        double x; 
        double y; 
    struct CGPoint { 
        double x; 
        double y; 
    struct CGPoint { 
        double x; 
        double y; 
    struct CGPoint { 
        double x; 
        double y; 
    struct CGPoint { 
        double x; 
        double y; 
    struct CGPoint { 
        double x; 
        double y; 
    struct CGPoint { 
        double x; 
        double y; 
    boolmAlreadyInCommandGroup;
    boolmConstraintGuidesShowing;
    boolmDidBeginDrag;
    boolmHaveShownHUD;
    boolmHaveShownRuler;
    boolmHaveShownSecondHUD;
    boolmInDidEndDynamicOperation;
    boolmInWillBeginDynamicOperation;
    boolmIsArrowkeyDrivenTracking;
    boolmIsDragInsertDrivenTracking;
    boolmIsInspectorDrivenTracking;
    boolmRoundDragDelta;
    boolmShouldConstrain;
    boolmShouldShowGuides;
    boolmShouldShowRuler;
    boolmShouldSnapToGuides;
    boolmShowDragHUD;
    boolmTrackerDidBeginDragging;
    } mActualDragPoint;
    TSDAutoscroll *mAutoscroll;
    } mAutoscrollPoint;
    NSMutableSet *mConnectedLineLayouts;
    } mConstrainingPoint;
    double mConstraintAngle;
    <TSDRepDragTrackerDelegate> *mDelegate;
    CAShapeLayer *mGuideLayer;
    } mInitialDragPoint;
    } mLogicalDragPoint;
    TSUPointerKeyDictionary *mMapRepsToSnapOffsets;
    } mPreviousActualDragPoint;
    TSDRep *mRep;
    NSTimer *mRulerTimer;
    TSDHUDViewController *mSecondHUDController;
    double mSnapLevel;
    } mUnscaledDragDelta;
}

@property bool alreadyInCommandGroup;
@property(copy,readonly) NSString * debugDescription;
@property(copy,readonly) NSString * description;
@property(readonly) bool didBeginDrag;
@property(readonly) unsigned long long hash;
@property bool isArrowkeyDrivenTracking;
@property bool isDragInsertDrivenTracking;
@property bool isInspectorDrivenTracking;
@property(retain) TSDRep * rep;
@property bool shouldShowGuides;
@property bool shouldShowRuler;
@property bool shouldSnapToGuides;
@property bool showDragHUD;
@property(readonly) Class superclass;

- (id)actionForLayer:(id)arg1 forKey:(id)arg2;
- (void)addUnscaledDragDelta:(struct CGPoint { double x1; double x2; })arg1 roundDeltaToViewScale:(bool)arg2;
- (bool)allowsDelegateToDisplayUIForDragOperation;
- (bool)alreadyInCommandGroup;
- (void)beginShowingDragUIForInitialDragPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)changeDynamicLayoutsForReps:(id)arg1;
- (void)commitChangesForReps:(id)arg1;
- (void)dealloc;
- (id)decoratorOverlayLayers;
- (bool)didBeginDrag;
- (void)didChangeCurrentlyTransformingReps;
- (void)didEndDynamicOperationForReps:(id)arg1;
- (void)endPossibleRepDragGesture;
- (bool)handlesCopyingObjects;
- (id)initWithRep:(id)arg1;
- (bool)isArrowkeyDrivenTracking;
- (bool)isDragInsertDrivenTracking;
- (bool)isInspectorDrivenTracking;
- (bool)operationShouldBeDynamic;
- (bool)p_delegateIsHandlingDrag;
- (void)p_didBeginDrag;
- (void)p_displayRulerAndRect;
- (void)p_hideGuideLayer;
- (void)p_hideHUD;
- (id)p_infosFromReps:(id)arg1;
- (void)p_makeSiblingRepsOfRep:(id)arg1 performBlock:(id)arg2;
- (id)p_repsForInfos:(id)arg1 fromReps:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_selectedInfosRect;
- (void)p_showGuideLayer;
- (void)p_updateGuides;
- (void)p_updateHUDAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)p_updateHUDFromTimer;
- (id)rep;
- (id)repsForGuidesWhenManipulatingReps:(id)arg1;
- (id)selectionBehaviorForReps:(id)arg1;
- (void)setActualDragPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setAlreadyInCommandGroup:(bool)arg1;
- (void)setConstrainingPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setIsArrowkeyDrivenTracking:(bool)arg1;
- (void)setIsDragInsertDrivenTracking:(bool)arg1;
- (void)setIsInspectorDrivenTracking:(bool)arg1;
- (void)setLogicalDragPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setRep:(id)arg1;
- (void)setShouldConstrain:(bool)arg1;
- (void)setShouldShowGuides:(bool)arg1;
- (void)setShouldShowRuler:(bool)arg1;
- (void)setShouldSnapToGuides:(bool)arg1;
- (void)setShowDragHUD:(bool)arg1;
- (void)setSnapLevel:(double)arg1;
- (bool)shouldOpenCommandGroupToCommitChangesForReps:(id)arg1;
- (bool)shouldShowGuides;
- (bool)shouldShowRuler;
- (bool)shouldSnapToGuides;
- (bool)showDragHUD;
- (bool)supportsAlignmentGuides;
- (void)willBeginDynamicOperationForReps:(id)arg1;
- (void)willEndPossibleRepDragGesture;

@end
