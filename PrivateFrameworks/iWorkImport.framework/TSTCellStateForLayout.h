/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@class TSTCell, TSTLayoutContentCachedKey, TSWPColumn;

@interface TSTCellStateForLayout : NSObject {
    struct { 
        unsigned short row; 
        unsigned char column; 
        unsigned char reserved; 
    struct { 
        struct { 
            unsigned short row; 
            unsigned char column; 
            unsigned char reserved; 
        } origin; 
        struct { 
            unsigned short numberOfColumns; 
            unsigned short numberOfRows; 
        } size; 
    struct CGSize { 
        double width; 
        double height; 
    struct CGSize { 
        double width; 
        double height; 
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    boolmCellPropsRowHeight;
    boolmCellWraps;
    boolmForDrawing;
    boolmInDynamicLayout;
    TSTCell *mCell;
    id mCellContents;
    TSTLayoutContentCachedKey *mKeyVal;
    int mLayoutCacheFlags;
    } mMaxSize;
    double mMaxWidthForChildren;
    } mMergedRange;
    } mMinSize;
    } mModelCellID;
    } mPaddingInsets;
    unsigned long long mPageCount;
    unsigned long long mPageNumber;
    int mVerticalAlignment;
    TSWPColumn *mWPColumn;
}

@property(copy) TSTCell * cell;
@property(retain) id cellContents;
@property bool cellPropsRowHeight;
@property bool cellWraps;
@property bool forDrawing;
@property(readonly) bool hasContent;
@property bool inDynamicLayout;
@property(retain) TSTLayoutContentCachedKey * keyVal;
@property int layoutCacheFlags;
@property struct CGSize { double x1; double x2; } maxSize;
@property double maxWidthForChildren;
@property struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; } mergedRange;
@property struct CGSize { double x1; double x2; } minSize;
@property struct { unsigned short x1; unsigned char x2; unsigned char x3; } modelCellID;
@property struct UIEdgeInsets { double x1; double x2; double x3; double x4; } paddingInsets;
@property unsigned long long pageCount;
@property unsigned long long pageNumber;
@property int verticalAlignment;
@property(retain) TSWPColumn * wpColumn;

- (id)cell;
- (id)cellContents;
- (bool)cellPropsRowHeight;
- (bool)cellWraps;
- (void)dealloc;
- (bool)forDrawing;
- (bool)hasContent;
- (bool)inDynamicLayout;
- (id)init;
- (id)keyVal;
- (int)layoutCacheFlags;
- (struct CGSize { double x1; double x2; })maxSize;
- (double)maxWidthForChildren;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })mergedRange;
- (struct CGSize { double x1; double x2; })minSize;
- (struct { unsigned short x1; unsigned char x2; unsigned char x3; })modelCellID;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })paddingInsets;
- (unsigned long long)pageCount;
- (unsigned long long)pageNumber;
- (void)setCell:(id)arg1;
- (void)setCellContents:(id)arg1;
- (void)setCellPropsRowHeight:(bool)arg1;
- (void)setCellWraps:(bool)arg1;
- (void)setForDrawing:(bool)arg1;
- (void)setInDynamicLayout:(bool)arg1;
- (void)setKeyVal:(id)arg1;
- (void)setLayoutCacheFlags:(int)arg1;
- (void)setMaxSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setMaxWidthForChildren:(double)arg1;
- (void)setMergedRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (void)setMinSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setModelCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (void)setPaddingInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setPageCount:(unsigned long long)arg1;
- (void)setPageNumber:(unsigned long long)arg1;
- (void)setVerticalAlignment:(int)arg1;
- (void)setWpColumn:(id)arg1;
- (int)verticalAlignment;
- (id)wpColumn;

@end
