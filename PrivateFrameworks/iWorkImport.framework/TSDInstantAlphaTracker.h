/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@class NSMutableArray, TSDImageRep, TSDInstantAlphaBinaryBitmap, TSDInstantAlphaImage, TSUColor, TSUIntegerKeyDictionary;

@interface TSDInstantAlphaTracker : NSObject <TSDLayoutManipulatingTracker> {
    struct CGPoint { 
        double x; 
        double y; 
    struct CGPoint { 
        double x; 
        double y; 
    struct CGSize { 
        double width; 
        double height; 
    struct CGSize { 
        double width; 
        double height; 
    struct CGSize { 
        double width; 
        double height; 
    boolmAllowDisconnectedRegions;
    boolmCurrentlyInOperation;
    boolmOperationShouldSubtract;
    boolmOperationWasCancelled;
    double mAngleInRadiansForUIFeedback;
    } mControllingPoint;
    NSMutableArray *mDecoratorLayers;
    TSUIntegerKeyDictionary *mDisconnectedBitmapCache;
    TSUColor *mFillColor;
    TSDImageRep *mImageRep;
    TSDInstantAlphaBinaryBitmap *mLastBitmap;
    TSDInstantAlphaImage *mMaskingImage;
    } mRawImageSize;
    TSUColor *mStartColor;
    } mStartPoint;
    long long mTolerance;
    } mUnderlyingImageSize;
    } mVisualImageSize;
    TSUIntegerKeyDictionary *mWandBitmapCache;
}

@property bool allowDisconnectedRegions;
@property double angleInRadiansForUIFeedback;
@property struct CGPoint { double x1; double x2; } controllingPoint;
@property bool operationShouldSubtract;
@property long long tolerance;

+ (id)newInstantAlphaImageWithCGImage:(struct CGImage { }*)arg1 ofSize:(struct CGSize { double x1; double x2; })arg2;
+ (id)newMaskBitmapWithPoint:(struct CGPoint { double x1; double x2; })arg1 image:(id)arg2 tolerance:(unsigned long long)arg3 oldMaskBitmap:(id)arg4;
+ (id)newMaskSeedFillWithPoint:(struct CGPoint { double x1; double x2; })arg1 inImage:(id)arg2 tolerance:(unsigned long long)arg3 oldFill:(id)arg4;

- (bool)allowDisconnectedRegions;
- (double)angleInRadiansForUIFeedback;
- (void)beginIAOperationAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)bezierPathForIABitmap:(id)arg1;
- (void)cancelCurrentOperation;
- (void)changeDynamicLayoutsForReps:(id)arg1;
- (id)colorForOperationAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)commitChangesForReps:(id)arg1;
- (struct CGPoint { double x1; double x2; })controllingPoint;
- (void)dealloc;
- (id)decoratorLayers;
- (id)initWithImage:(id)arg1;
- (bool)operationShouldBeDynamic;
- (bool)operationShouldSubtract;
- (struct CGPoint { double x1; double x2; })p_convertNaturalPointToImagePoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)p_updateDecoratorLayersWithMask:(id)arg1;
- (void)setAllowDisconnectedRegions:(bool)arg1;
- (void)setAngleInRadiansForUIFeedback:(double)arg1;
- (void)setControllingPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setOperationShouldSubtract:(bool)arg1;
- (void)setTolerance:(long long)arg1;
- (bool)shouldOpenCommandGroupToCommitChangesForReps:(id)arg1;
- (bool)supportsAlignmentGuides;
- (long long)tolerance;

@end
