/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class <TSCHNotifyOnModify>, NSArray, NSMutableArray;

@interface TSCHChartGrid : NSObject <NSCopying, TSDMixing> {
    boolmAddingMultipleCols;
    boolmAddingMultipleRows;
    boolmDirty;
    NSMutableArray *mColumnIds;
    NSMutableArray *mColumnNames;
    int mDirection;
    <TSCHNotifyOnModify> *mModifyDelegate;
    unsigned long long mNextColNumber;
    unsigned long long mNextRowNumber;
    NSMutableArray *mRowIds;
    NSMutableArray *mRowNames;
    NSMutableArray *mValues;
}

@property(readonly) NSArray * columnIds;
@property int direction;
@property bool dirty;
@property(readonly) unsigned long long numberOfColumns;
@property(readonly) unsigned long long numberOfRows;
@property <TSCHNotifyOnModify> * objectToNotify;
@property(readonly) NSArray * rowIds;

- (void)addingMultipleCols:(bool)arg1;
- (void)addingMultipleRows:(bool)arg1;
- (id)columnIdForColumn:(unsigned long long)arg1;
- (id)columnIds;
- (unsigned long long)columnIndexForColumnId:(id)arg1;
- (bool)contentsEqualToGrid:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (int)direction;
- (bool)dirty;
- (id)extractColumnNames:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 outValueColumns:(id*)arg2;
- (id)extractRowNames:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 outValueRows:(id*)arg2;
- (id)getNewColumnName;
- (id)getNewRowName;
- (id)gridAdapterForColumn:(unsigned long long)arg1;
- (id)gridAdapterForColumnConstant;
- (id)gridAdapterForColumnCount;
- (id)gridAdapterForRow:(unsigned long long)arg1;
- (id)gridAdapterForRowConstant;
- (id)gridAdapterForRowCount;
- (id)init;
- (void)insertColumn:(unsigned long long)arg1 withName:(id)arg2 withId:(id)arg3;
- (void)insertColumn:(unsigned long long)arg1 withName:(id)arg2;
- (void)insertColumnNames:(id)arg1 at:(unsigned long long)arg2 withIds:(id)arg3;
- (void)insertColumnNames:(id)arg1 at:(unsigned long long)arg2;
- (void)insertColumnsAt:(unsigned long long)arg1 names:(id)arg2 data:(id)arg3 withIds:(id)arg4;
- (void)insertColumnsAt:(unsigned long long)arg1 names:(id)arg2 data:(id)arg3;
- (void)insertRow:(unsigned long long)arg1 withName:(id)arg2 withId:(id)arg3;
- (void)insertRow:(unsigned long long)arg1 withName:(id)arg2;
- (void)insertRowsAt:(unsigned long long)arg1 names:(id)arg2 data:(id)arg3 withIds:(id)arg4;
- (void)insertRowsAt:(unsigned long long)arg1 names:(id)arg2 data:(id)arg3;
- (void)insertRowsWithNames:(id)arg1 at:(unsigned long long)arg2 withIds:(id)arg3;
- (void)insertRowsWithNames:(id)arg1 at:(unsigned long long)arg2;
- (bool)isEquivalentForCrossDocumentPasteMasterComparison:(id)arg1;
- (void)loadFromPreUFFArchive:(const struct ChartGridArchive { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; struct RepeatedPtrField<std::__1::basic_string<char> > { void **x_3_1_1; int x_3_1_2; int x_3_1_3; int x_3_1_4; } x3; struct RepeatedPtrField<std::__1::basic_string<char> > { void **x_4_1_1; int x_4_1_2; int x_4_1_3; int x_4_1_4; } x4; int x5; boolx6; struct RepeatedPtrField<TSCH::PreUFF::ChartGridArchive_ValueRow> { void **x_7_1_1; int x_7_1_2; int x_7_1_3; int x_7_1_4; } x7; int x8; unsigned int x9[1]; }*)arg1;
- (void)loadFromUnityArchive:(const struct ChartArchive { int (**x1)(); struct ExtensionSet { struct map<int, google::protobuf::internal::ExtensionSet::Extension, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, google::protobuf::internal::ExtensionSet::Extension> > > { struct __tree<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, std::__1::__map_value_compare<int, std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension> > > { struct __tree_node<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, std::__1::less<int>, true> > { unsigned long long x_3_4_1; } x_1_3_3; } x_1_2_1; } x_2_1_1; } x2; struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_3_1_1; } x3; int x4; int x5; struct RectArchive {} *x6; struct Reference {} *x7; struct ChartGridArchive {} *x8; struct Reference {} *x9; struct Reference {} *x10; struct Reference {} *x11; int x12; boolx13; boolx14; struct Reference {} *x15; struct Reference {} *x16; struct RepeatedPtrField<TSP::Reference> { void **x_17_1_1; int x_17_1_2; int x_17_1_3; int x_17_1_4; } x17; struct RepeatedPtrField<TSP::Reference> { void **x_18_1_1; int x_18_1_2; int x_18_1_3; int x_18_1_4; } x18; struct RepeatedPtrField<TSP::Reference> { void **x_19_1_1; int x_19_1_2; int x_19_1_3; int x_19_1_4; } x19; struct RepeatedPtrField<TSP::Reference> { void **x_20_1_1; int x_20_1_2; int x_20_1_3; int x_20_1_4; } x20; struct RepeatedPtrField<TSP::Reference> { void **x_21_1_1; int x_21_1_2; int x_21_1_3; int x_21_1_4; } x21; struct SparseReferenceArrayArchive {} *x22; struct SparseReferenceArrayArchive {} *x23; struct RepeatedPtrField<TSP::Reference> { void **x_24_1_1; int x_24_1_2; int x_24_1_3; int x_24_1_4; } x24; unsigned int x25; int x26; unsigned int x27[1]; }*)arg1;
- (id)mixedObjectWithFraction:(double)arg1 ofObject:(id)arg2;
- (long long)mixingTypeWithObject:(id)arg1;
- (void)moveColumns:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 afterColumn:(long long)arg2;
- (void)moveRows:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 afterRow:(long long)arg2;
- (id)nameForColumn:(unsigned long long)arg1;
- (id)nameForRow:(unsigned long long)arg1;
- (unsigned long long)numberOfColumns;
- (unsigned long long)numberOfRows;
- (id)objectToNotify;
- (void)p_generateRowColumnIdMaps;
- (id)p_generateUUID;
- (bool)p_name:(id)arg1 isInArray:(id)arg2;
- (id)p_uuidsForColumns:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)p_uuidsForRows:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)removeColumn:(unsigned long long)arg1;
- (void)removeRow:(unsigned long long)arg1;
- (id)rowIdForRow:(unsigned long long)arg1;
- (id)rowIds;
- (unsigned long long)rowIndexForRowId:(id)arg1;
- (void)saveToUnityArchive:(struct ChartArchive { int (**x1)(); struct ExtensionSet { struct map<int, google::protobuf::internal::ExtensionSet::Extension, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, google::protobuf::internal::ExtensionSet::Extension> > > { struct __tree<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, std::__1::__map_value_compare<int, std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension> > > { struct __tree_node<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, std::__1::less<int>, true> > { unsigned long long x_3_4_1; } x_1_3_3; } x_1_2_1; } x_2_1_1; } x2; struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_3_1_1; } x3; int x4; int x5; struct RectArchive {} *x6; struct Reference {} *x7; struct ChartGridArchive {} *x8; struct Reference {} *x9; struct Reference {} *x10; struct Reference {} *x11; int x12; boolx13; boolx14; struct Reference {} *x15; struct Reference {} *x16; struct RepeatedPtrField<TSP::Reference> { void **x_17_1_1; int x_17_1_2; int x_17_1_3; int x_17_1_4; } x17; struct RepeatedPtrField<TSP::Reference> { void **x_18_1_1; int x_18_1_2; int x_18_1_3; int x_18_1_4; } x18; struct RepeatedPtrField<TSP::Reference> { void **x_19_1_1; int x_19_1_2; int x_19_1_3; int x_19_1_4; } x19; struct RepeatedPtrField<TSP::Reference> { void **x_20_1_1; int x_20_1_2; int x_20_1_3; int x_20_1_4; } x20; struct RepeatedPtrField<TSP::Reference> { void **x_21_1_1; int x_21_1_2; int x_21_1_3; int x_21_1_4; } x21; struct SparseReferenceArrayArchive {} *x22; struct SparseReferenceArrayArchive {} *x23; struct RepeatedPtrField<TSP::Reference> { void **x_24_1_1; int x_24_1_2; int x_24_1_3; int x_24_1_4; } x24; unsigned int x25; int x26; unsigned int x27[1]; }*)arg1 forPasteboard:(bool)arg2;
- (void)setDirection:(int)arg1;
- (void)setDirty:(bool)arg1;
- (void)setNameForColumn:(unsigned long long)arg1 toName:(id)arg2;
- (void)setNameForRow:(unsigned long long)arg1 toName:(id)arg2;
- (void)setObjectToNotify:(id)arg1;
- (void)setValue:(id)arg1 forRow:(unsigned long long)arg2 column:(unsigned long long)arg3;
- (void)takeDataFromDictionary:(id)arg1 rowIds:(id)arg2 columnIds:(id)arg3;
- (void)takeDataFromDictionary:(id)arg1;
- (id)valueForRow:(unsigned long long)arg1 column:(unsigned long long)arg2;
- (id*)valuesForRow:(unsigned long long)arg1 columns:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (id*)valuesForRows:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 column:(unsigned long long)arg2;
- (void)willModify;

@end
