/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class KNMacUILayout, KNSlideCollectionSelection, NSMutableDictionary, NSSet;

@interface KNUIState : NSObject <NSCopying> {
    struct CGPoint { 
        double x; 
        double y; 
    struct CGPoint { 
        double x; 
        double y; 
    struct CGPoint { 
        double x; 
        double y; 
    struct CGPoint { 
        double x; 
        double y; 
    struct CGPoint { 
        double x; 
        double y; 
    struct CGSize { 
        double width; 
        double height; 
    boolmHasPhone568CanvasOffset;
    boolmHasPhone568CanvasViewScale;
    boolmHasPhoneCanvasOffset;
    boolmHasPhoneCanvasViewScale;
    boolmLightTableHidesSkippedSlides;
    boolmShowMasterGuides;
    boolmShowSlideGuides;
    boolmShowsComments;
    boolmShowsRuler;
    boolmSlideViewFitsContentInWindow;
    NSMutableDictionary *mChartUIState;
    NSSet *mCollapsedSlideNodes;
    } mDesktopCanvasOffset;
    double mDesktopCanvasViewScale;
    } mDesktopMainContentSize;
    } mDesktopMainWindowOrigin;
    double mDesktopNavigatorViewWidth;
    double mDesktopOutlineViewWidth;
    double mDesktopPresenterNotesViewHeight;
    KNMacUILayout *mDocumentUILayout;
    } mIPadCanvasOffset;
    double mIPadCanvasViewScale;
    double mLightTableZoomScale;
    } mPhone568CanvasOffset;
    double mPhone568CanvasViewScale;
    } mPhoneCanvasOffset;
    double mPhoneCanvasViewScale;
    KNSlideCollectionSelection *mSlideTreeSelection;
}

@property struct CGPoint { double x1; double x2; } canvasOffset;
@property double canvasViewScale;
@property(copy) NSSet * collapsedSlideNodes;
@property struct CGSize { double x1; double x2; } desktopMainContentSize;
@property struct CGPoint { double x1; double x2; } desktopMainWindowOrigin;
@property double desktopNavigatorViewWidth;
@property double desktopOutlineViewWidth;
@property double desktopPresenterNotesHeight;
@property(copy) KNMacUILayout * documentUILayout;
@property bool lightTableHidesSkippedSlides;
@property double lightTableZoomScale;
@property bool showMasterGuides;
@property bool showSlideGuides;
@property bool showsComments;
@property bool showsRuler;
@property(retain) KNSlideCollectionSelection * slideTreeSelection;
@property bool slideViewFitsContentInWindow;

- (id).cxx_construct;
- (id)UIStateForChart:(id)arg1;
- (id)archivedUIStateInContext:(id)arg1;
- (struct CGPoint { double x1; double x2; })canvasOffset;
- (double)canvasViewScale;
- (id)collapsedSlideNodes;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)debugDescription;
- (struct CGSize { double x1; double x2; })desktopMainContentSize;
- (struct CGPoint { double x1; double x2; })desktopMainWindowOrigin;
- (double)desktopNavigatorViewWidth;
- (double)desktopOutlineViewWidth;
- (double)desktopPresenterNotesHeight;
- (id)documentUILayout;
- (id)init;
- (bool)lightTableHidesSkippedSlides;
- (double)lightTableZoomScale;
- (void)loadFromArchive:(const struct UIStateArchive { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; struct Reference {} *x3; struct Reference {} *x4; struct Size {} *x5; struct Point {} *x6; float x7; float x8; struct RepeatedPtrField<TSP::Reference> { void **x_9_1_1; int x_9_1_2; int x_9_1_3; int x_9_1_4; } x9; struct Point {} *x10; struct Point {} *x11; struct Reference {} *x12; float x13; float x14; struct Point {} *x15; struct RepeatedPtrField<TSCH::ChartUIState> { void **x_16_1_1; int x_16_1_2; int x_16_1_3; int x_16_1_4; } x16; float x17; boolx18; boolx19; boolx20; boolx21; struct RepeatedPtrField<TSP::Reference> { void **x_22_1_1; int x_22_1_2; int x_22_1_3; int x_22_1_4; } x22; float x23; float x24; struct Size {} *x25; boolx26; boolx27; float x28; struct Point {} *x29; int x30; unsigned int x31[1]; }*)arg1 unarchiver:(id)arg2 context:(id)arg3;
- (void)saveToArchive:(struct UIStateArchive { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; struct Reference {} *x3; struct Reference {} *x4; struct Size {} *x5; struct Point {} *x6; float x7; float x8; struct RepeatedPtrField<TSP::Reference> { void **x_9_1_1; int x_9_1_2; int x_9_1_3; int x_9_1_4; } x9; struct Point {} *x10; struct Point {} *x11; struct Reference {} *x12; float x13; float x14; struct Point {} *x15; struct RepeatedPtrField<TSCH::ChartUIState> { void **x_16_1_1; int x_16_1_2; int x_16_1_3; int x_16_1_4; } x16; float x17; boolx18; boolx19; boolx20; boolx21; struct RepeatedPtrField<TSP::Reference> { void **x_22_1_1; int x_22_1_2; int x_22_1_3; int x_22_1_4; } x22; float x23; float x24; struct Size {} *x25; boolx26; boolx27; float x28; struct Point {} *x29; int x30; unsigned int x31[1]; }*)arg1 archiver:(id)arg2 context:(id)arg3;
- (void)setCanvasOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setCanvasViewScale:(double)arg1;
- (void)setCollapsedSlideNodes:(id)arg1;
- (void)setDesktopMainContentSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setDesktopMainWindowOrigin:(struct CGPoint { double x1; double x2; })arg1;
- (void)setDesktopNavigatorViewWidth:(double)arg1;
- (void)setDesktopOutlineViewWidth:(double)arg1;
- (void)setDesktopPresenterNotesHeight:(double)arg1;
- (void)setDocumentUILayout:(id)arg1;
- (void)setLightTableHidesSkippedSlides:(bool)arg1;
- (void)setLightTableZoomScale:(double)arg1;
- (void)setShowMasterGuides:(bool)arg1;
- (void)setShowSlideGuides:(bool)arg1;
- (void)setShowsComments:(bool)arg1;
- (void)setShowsRuler:(bool)arg1;
- (void)setSlideTreeSelection:(id)arg1;
- (void)setSlideViewFitsContentInWindow:(bool)arg1;
- (void)setUIState:(id)arg1 forChart:(id)arg2;
- (bool)showMasterGuides;
- (bool)showSlideGuides;
- (bool)showsComments;
- (bool)showsRuler;
- (id)slideTreeSelection;
- (bool)slideViewFitsContentInWindow;

@end
