/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@class TSTCoordinateArray, TSTLayout, TSTLayoutSpaceBundle, TSTMasterLayout;

@interface TSTLayoutSpace : NSObject {
    struct { 
        struct { 
            unsigned int column; 
            unsigned int row; 
        } topLeft; 
        struct { 
            unsigned int column; 
            unsigned int row; 
        } bottomRight; 
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    struct CGPoint { 
        double x; 
        double y; 
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    struct _opaque_pthread_rwlock_t { 
        long long __sig; 
        BOOL __opaque[192]; 
    boolmDrawBlackAndWhite;
    boolmDrawPreventAntialias;
    boolmHeaderColumnsRepeat;
    boolmHeaderRowsRepeat;
    boolmInvalidTableOffset;
    boolmLayoutDirectionIsLeftToRight;
    TSTCoordinateArray *mBodyColumnCoordinates;
    TSTCoordinateArray *mBodyRowCoordinates;
    TSTLayoutSpaceBundle *mBundle;
    } mCachedAlignedFrame;
    } mCachedAlignedStrokeFrame;
    } mCachedFrame;
    } mCachedStrokeFrame;
    } mGridRange;
    TSTCoordinateArray *mHeaderColumnRowCoordinates;
    TSTCoordinateArray *mHeaderRowColumnCoordinates;
    unsigned char mInvalidColumnIndex;
    unsigned short mInvalidRowIndex;
    int mLayoutSpaceType;
    } mLock;
    } mTableOffset;
    } mTransformFromCanvas;
    } mTransformFromDevice;
    } mTransformToCanvas;
    } mTransformToDevice;
    double mViewScale;
}

@property(readonly) TSTLayoutSpaceBundle * bundle;
@property bool drawBlackAndWhite;
@property bool drawPreventAntialias;
@property bool headerColumnsRepeat;
@property bool headerRowsRepeat;
@property(readonly) bool isColumns;
@property(readonly) bool isCorner;
@property(readonly) bool isFrozen;
@property(readonly) bool isMain;
@property(readonly) bool isRepeat;
@property(readonly) bool isRows;
@property(readonly) TSTLayout * layout;
@property(readonly) bool layoutDirectionIsLeftToRight;
@property(readonly) int layoutSpaceType;
@property(readonly) TSTMasterLayout * masterLayout;
@property struct CGPoint { double x1; double x2; } tableOffset;
@property struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } transformFromCanvas;
@property struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } transformFromDevice;
@property struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } transformToCanvas;
@property struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } transformToDevice;
@property double viewScale;

- (id).cxx_construct;
- (id)bundle;
- (void)dealloc;
- (id)description;
- (bool)drawBlackAndWhite;
- (bool)drawPreventAntialias;
- (void)drawStrokesInGridRange:(struct { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1 clearStrokes:(bool)arg2 context:(struct CGContext { }*)arg3;
- (bool)headerColumnsRepeat;
- (bool)headerRowsRepeat;
- (id)initWithLayoutSpaceBundle:(id)arg1 type:(int)arg2;
- (void)invalidateCoordinates;
- (void)invalidateCoordinatesAfterColumn:(unsigned char)arg1;
- (void)invalidateCoordinatesAfterRow:(unsigned short)arg1;
- (void)invalidateTableOffset;
- (bool)isColumns;
- (bool)isCorner;
- (bool)isFrozen;
- (bool)isMain;
- (bool)isRepeat;
- (bool)isRows;
- (id)layout;
- (bool)layoutDirectionIsLeftToRight;
- (int)layoutSpaceType;
- (void)lockForRead;
- (void)lockForWrite;
- (id)masterLayout;
- (void)p_drawStrokeForGridColumn:(unsigned int)arg1 strokeRect:(struct { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg2 clearStroke:(bool)arg3 shadowType:(int)arg4 context:(struct CGContext { }*)arg5;
- (void)p_drawStrokeForGridRow:(unsigned int)arg1 strokeRect:(struct { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg2 clearStroke:(bool)arg3 shadowType:(int)arg4 context:(struct CGContext { }*)arg5;
- (bool)p_getLayoutDirectionLeftToRight;
- (void)setDrawBlackAndWhite:(bool)arg1;
- (void)setDrawPreventAntialias:(bool)arg1;
- (void)setHeaderColumnsRepeat:(bool)arg1;
- (void)setHeaderRowsRepeat:(bool)arg1;
- (void)setTableOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setTransformFromCanvas:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setTransformFromDevice:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setTransformToCanvas:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setTransformToDevice:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setViewScale:(double)arg1;
- (struct CGPoint { double x1; double x2; })tableOffset;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformFromCanvas;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformFromDevice;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformToCanvas;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformToDevice;
- (void)unlock;
- (int)validate:(id)arg1;
- (void)validateCachedFrames;
- (int)validateCoordinateCache:(id)arg1;
- (int)validateTableOffset:(id)arg1;
- (double)viewScale;

@end
