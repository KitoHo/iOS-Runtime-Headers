/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class NSSet, NSString, TSSPropertyMap, TSSStyle, TSSStylesheet;

@interface TSSStyle : TSPObject <NSCopying, TSSPropertyValueValidator, TSSStyleObject, TSSThemeAsset, TSSPropertySource, TSSStyleClient, TSKModel, TSKTransformableObject> {
    boolmIsVariation;
    NSString *mName;
    TSSPropertyMap *mOverridePropertyMap;
    TSSStyle *mParent;
    NSString *mStyleIdentifier;
    TSSStylesheet *mStylesheet;
}

@property(readonly) TSSStyle * baseStyleForVariation;
@property(readonly) NSSet * children;
@property(readonly) NSString * contentTag;
@property(copy,readonly) NSString * debugDescription;
@property(copy,readonly) NSString * description;
@property(readonly) TSSStyle * firstIdentifiedAncestor;
@property(readonly) unsigned long long hash;
@property(readonly) bool isIdentified;
@property(readonly) bool isNamed;
@property(readonly) bool isVariation;
@property(copy) NSString * name;
@property(readonly) TSSPropertyMap * overridePropertyMap;
@property(readonly) TSSStyle * parent;
@property(readonly) TSSStyle * rootAncestor;
@property(readonly) TSSStyle * rootIdentifiedAncestor;
@property(readonly) NSString * styleIdentifier;
@property(readonly) TSSStylesheet * stylesheet;
@property(readonly) Class superclass;

+ (id)boxedDefaultValueForProperty:(int)arg1;
+ (double)defaultDoubleValueForProperty:(int)arg1;
+ (float)defaultFloatValueForProperty:(int)arg1;
+ (int)defaultIntValueForProperty:(int)arg1;
+ (id)defaultPropertyMap;
+ (id)defaultStyleWithContext:(id)arg1;
+ (id)defaultValueForProperty:(int)arg1;
+ (id)description;
+ (double)fontSizeForFontSize:(double)arg1 scalingFactor:(double)arg2;
+ (int)muxDefaultPropertyForSpecificProperty:(int)arg1;
+ (struct __CTFont { }*)pCreateFontWithName:(id)arg1 fontSize:(double)arg2;
+ (id)pReplacementForMissingFontName:(id)arg1 outBold:(int*)arg2 outItalic:(int*)arg3 outQuiet:(bool*)arg4;
+ (id)properties;
+ (id)propertiesAllowingNSNull;
+ (bool)validateDoubleValue:(double*)arg1 forProperty:(int)arg2;
+ (bool)validateFloatValue:(float*)arg1 forProperty:(int)arg2;
+ (id)validateFontInPropertyMap:(id)arg1 parentStyle:(id)arg2 checkedFontMap:(id)arg3;
+ (id)validateFontName:(id)arg1 size:(double)arg2 bold:(bool)arg3 italic:(bool)arg4 checkedFontMap:(id)arg5 newFontName:(id*)arg6 newBold:(bool*)arg7 newItalic:(bool*)arg8;
+ (bool)validateIntValue:(int*)arg1 forProperty:(int)arg2 min:(int)arg3 max:(int)arg4;
+ (bool)validateIntValue:(int*)arg1 forProperty:(int)arg2;
+ (bool)validateIntValueAsBool:(int*)arg1 forProperty:(int)arg2;
+ (bool)validateObjectValue:(id*)arg1 withClass:(Class)arg2 forProperty:(int)arg3;

- (double)CGFloatValueForProperty:(int)arg1;
- (bool)allowsImplicitComponentOwnership;
- (id)baseStyleForVariation;
- (bool)boolValueForProperty:(int)arg1 defaultValue:(bool)arg2;
- (id)boxedObjectForProperty:(int)arg1;
- (id)boxedOverrideValueForProperty:(int)arg1;
- (id)boxedValueForProperty:(int)arg1 oldBoxedValue:(id)arg2 transformedByTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg3;
- (id)boxedValueForProperty:(int)arg1;
- (id)children;
- (id)commandForTransformingByTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 context:(id)arg2 transformedObjects:(id)arg3 inBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4;
- (id)componentRootObject;
- (void)constrainShadowForSwatchGeneration;
- (id)constrainShapeStyleForContext:(id)arg1;
- (void)constrainStrokeForSwatchGeneration;
- (bool)containsProperty:(int)arg1;
- (id)contentTag;
- (id)copyFlattenedWithContext:(id)arg1;
- (id)copyPropertyMap;
- (id)copyWithContext:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1 context:(id)arg2;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (bool)definesProperty:(int)arg1;
- (double)doubleValueForProperty:(int)arg1;
- (void)fadeReflectionForSwatchGeneration;
- (id)firstIdentifiedAncestor;
- (float)floatValueForProperty:(int)arg1;
- (id)fullPropertyMap;
- (bool)hasEqualPropertyValues:(id)arg1;
- (bool)hasEqualValues:(id)arg1 forProperties:(id)arg2;
- (bool)hasEqualValuesToPropertyMap:(id)arg1 forProperties:(id)arg2;
- (unsigned long long)hash;
- (id)init;
- (id)initWithContext:(id)arg1 name:(id)arg2 overridePropertyMap:(id)arg3 isVariation:(bool)arg4;
- (id)initWithContext:(id)arg1;
- (int)intValueForMUXedProperty:(int)arg1;
- (int)intValueForProperty:(int)arg1;
- (bool)isAncestorOf:(id)arg1;
- (bool)isChildOf:(id)arg1;
- (bool)isDescendentOf:(id)arg1;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToStyle:(id)arg1 ignoreObjectContext:(bool)arg2;
- (bool)isEquivalentForCrossDocumentPasteMasterComparison:(id)arg1;
- (bool)isIdentified;
- (bool)isNamed;
- (bool)isParentOf:(id)arg1;
- (bool)isThemeEquivalent:(id)arg1;
- (bool)isVariation;
- (void)loadCharacterStylePropertiesIntoPropertyMap:(id)arg1 fromArchive:(const struct CharacterStylePropertiesArchive { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; float x3; boolx4; boolx5; boolx6; boolx7; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x8; struct Color {} *x9; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x10; int x11; int x12; int x13; int x14; float x15; float x16; int x17; boolx18; boolx19; boolx20; boolx21; struct Color {} *x22; struct ShadowArchive {} *x23; float x24; float x25; struct Color {} *x26; struct Color {} *x27; float x28; boolx29; boolx30; boolx31; boolx32; struct Color {} *x33; float x34; int x35; struct RepeatedPtrField<TSWP::FontFeatureArchive> { void **x_36_1_1; int x_36_1_2; int x_36_1_3; int x_36_1_4; } x36; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x37; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x38; boolx39; boolx40; boolx41; int x42; unsigned int x43[2]; }*)arg2 unarchiver:(id)arg3;
- (void)loadFromArchive:(const struct StyleArchive { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x3; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x4; struct Reference {} *x5; struct Reference {} *x6; boolx7; int x8; unsigned int x9[1]; }*)arg1 unarchiver:(id)arg2;
- (void)loadParagraphStylePropertiesIntoPropertyMap:(id)arg1 fromArchive:(const struct ParagraphStylePropertiesArchive { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; int x3; float x4; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x5; struct Color {} *x6; boolx7; boolx8; boolx9; boolx10; float x11; float x12; boolx13; boolx14; boolx15; boolx16; struct LineSpacingArchive {} *x17; int x18; float x19; struct Point {} *x20; float x21; float x22; float x23; unsigned int x24; struct TabsArchive {} *x25; boolx26; boolx27; boolx28; boolx29; int x30; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x31; struct StrokeArchive {} *x32; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x33; boolx34; boolx35; boolx36; boolx37; int x38; struct Reference {} *x39; struct Reference {} *x40; int x41; unsigned int x42[2]; }*)arg2 unarchiver:(id)arg3;
- (SEL)mapThemeAssetSelector;
- (id)name;
- (id)newOverridePropertyMapWithPropertyMap:(id)arg1;
- (id)objectForProperty:(int)arg1;
- (id)overriddenProperties;
- (double)overrideCGFloatValueForProperty:(int)arg1;
- (unsigned long long)overrideCount;
- (double)overrideDoubleValueForProperty:(int)arg1;
- (float)overrideFloatValueForProperty:(int)arg1;
- (int)overrideIntValueForProperty:(int)arg1;
- (id)overridePropertyMap;
- (bool)overridePropertyMapIsEqualTo:(id)arg1;
- (id)overridePropertyMapWithPropertyMap:(id)arg1 overridePropertyMap:(id)arg2 collapseSourceOverrides:(bool)arg3;
- (id)overrideValueForProperty:(int)arg1;
- (bool)overridesAnyProperty;
- (bool)overridesProperty:(int)arg1;
- (bool)p_hasEqualValuesTo:(id)arg1 forProperty:(int)arg2;
- (id)parent;
- (id)propertyMap;
- (id)propertyMapIgnoringStyle:(id)arg1;
- (id)propertyMapThatNeedsToBeTransformedWithTransformedObjects:(id)arg1;
- (id)referencedStyles;
- (void)removeAllValues;
- (void)removeValueForProperty:(int)arg1;
- (void)replaceReferencedStylesUsingBlock:(id)arg1;
- (id)rootAncestor;
- (id)rootIdentifiedAncestor;
- (void)saveCharacterStylePropertiesToArchive:(struct CharacterStylePropertiesArchive { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; float x3; boolx4; boolx5; boolx6; boolx7; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x8; struct Color {} *x9; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x10; int x11; int x12; int x13; int x14; float x15; float x16; int x17; boolx18; boolx19; boolx20; boolx21; struct Color {} *x22; struct ShadowArchive {} *x23; float x24; float x25; struct Color {} *x26; struct Color {} *x27; float x28; boolx29; boolx30; boolx31; boolx32; struct Color {} *x33; float x34; int x35; struct RepeatedPtrField<TSWP::FontFeatureArchive> { void **x_36_1_1; int x_36_1_2; int x_36_1_3; int x_36_1_4; } x36; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x37; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x38; boolx39; boolx40; boolx41; int x42; unsigned int x43[2]; }*)arg1 archiver:(id)arg2;
- (void)saveParagraphStylePropertiesToArchive:(struct ParagraphStylePropertiesArchive { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; int x3; float x4; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x5; struct Color {} *x6; boolx7; boolx8; boolx9; boolx10; float x11; float x12; boolx13; boolx14; boolx15; boolx16; struct LineSpacingArchive {} *x17; int x18; float x19; struct Point {} *x20; float x21; float x22; float x23; unsigned int x24; struct TabsArchive {} *x25; boolx26; boolx27; boolx28; boolx29; int x30; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x31; struct StrokeArchive {} *x32; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x33; boolx34; boolx35; boolx36; boolx37; int x38; struct Reference {} *x39; struct Reference {} *x40; int x41; unsigned int x42[2]; }*)arg1 archiver:(id)arg2;
- (void)saveToArchive:(struct StyleArchive { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x3; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x4; struct Reference {} *x5; struct Reference {} *x6; boolx7; int x8; unsigned int x9[1]; }*)arg1 archiver:(id)arg2;
- (void)setBoolValue:(bool)arg1 forProperty:(int)arg2;
- (void)setBoxedValue:(id)arg1 forProperty:(int)arg2;
- (void)setCGFloatValue:(double)arg1 forProperty:(int)arg2;
- (void)setDoubleValue:(double)arg1 forProperty:(int)arg2;
- (void)setFloatValue:(float)arg1 forProperty:(int)arg2;
- (void)setIntValue:(int)arg1 forProperty:(int)arg2;
- (void)setName:(id)arg1;
- (void)setOverridePropertyMap:(id)arg1;
- (void)setParent:(id)arg1;
- (void)setStyleIdentifier:(id)arg1;
- (void)setStylesheet:(id)arg1;
- (void)setValue:(id)arg1 forProperty:(int)arg2;
- (void)setValuesForProperties:(id)arg1;
- (id)styleIdentifier;
- (id)stylesheet;
- (bool)transformsFontSizes;
- (bool)validateDoubleValue:(double*)arg1 forProperty:(int)arg2;
- (bool)validateFloatValue:(float*)arg1 forProperty:(int)arg2;
- (id)validateFontWithCheckedFontMap:(id)arg1;
- (bool)validateIntValue:(int*)arg1 forProperty:(int)arg2 min:(int)arg3 max:(int)arg4;
- (bool)validateIntValue:(int*)arg1 forProperty:(int)arg2;
- (bool)validateIntValueAsBool:(int*)arg1 forProperty:(int)arg2;
- (bool)validateObjectValue:(id*)arg1 withClass:(Class)arg2 forProperty:(int)arg3;
- (id)valueForProperty:(int)arg1;
- (id)valuesForProperties:(id)arg1;

@end
