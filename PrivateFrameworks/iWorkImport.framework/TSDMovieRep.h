/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@class AVAsset, CALayer, NSObject<TSKMediaPlayerController>, NSString, TSDFrameRep, TSDMovieInfo;

@interface TSDMovieRep : TSDMediaRep <TSKMediaPlayerControllerDelegate> {
    boolmCurrentlyObservingPlayerLayer;
    boolmDelayTearingDownPlayerController;
    boolmDidCancelUpdatingPlayButtonVisibility;
    boolmDidCheckPlayability;
    boolmInReadMode;
    boolmIsChangingDynamicVolume;
    boolmIsPlayable;
    boolmNeedsTeardownPlayerController;
    boolmPlayButtonKnobVisible;
    boolmPlayerLayerShouldBeDisplayed;
    struct CGImage { } *mAlternatePosterImage;
    AVAsset *mAssetForPlayability;
    float mDynamicVolume;
    unsigned long long mIsChangingDynamicVisibleTimeCount;
    CALayer *mLayerToStroke;
    CALayer *mMovieReflectionLayer;
    CALayer *mMovieReflectionMaskLayer;
    NSObject<TSKMediaPlayerController> *mPlayerController;
    CALayer *mPlayerLayer;
    CALayer *mPlayerStrokeLayer;
    CALayer *mReflectionFrameMaskLayer;
    TSDFrameRep *mReflectionFrameRep;
    CALayer *mReflectionPlayerLayer;
    CALayer *mReflectionPlayerStrokeLayer;
    CALayer *mReflectionPlayerStrokeMaskLayer;
}

@property struct CGImage { }* alternatePosterImage;
@property(copy,readonly) NSString * debugDescription;
@property(copy,readonly) NSString * description;
@property(readonly) unsigned long long hash;
@property(readonly) TSDMovieInfo * movieInfo;
@property(readonly) bool p_playButtonFitsInFrame;
@property(getter=isPlayable,readonly) bool playable;
@property(readonly) NSObject<TSKMediaPlayerController> * playerController;
@property(getter=isPlaying,readonly) bool playing;
@property(readonly) bool shouldSingleTapPlay;
@property(readonly) Class superclass;
@property(readonly) double visibleTime;
@property(readonly) float volume;

+ (double)magicMoveAttributeMatchPercentBetweenOutgoingObject:(id)arg1 incomingObject:(id)arg2;

- (id)actionForLayer:(id)arg1 forKey:(id)arg2;
- (void)addKnobsToArray:(id)arg1;
- (id)additionalLayersOverLayer;
- (id)additionalLayersUnderLayer;
- (struct CGImage { }*)alternatePosterImage;
- (void)becameNotSelected;
- (void)becameSelected;
- (bool)canResetMediaSize;
- (void)createReflectionLayer;
- (void)dealloc;
- (void)didUpdateLayer:(id)arg1;
- (bool)directlyManagesLayerContent;
- (bool)directlyManagesVisibilityOfKnob:(id)arg1;
- (void)disposeReflectionLayer;
- (void)drawInContextWithoutEffects:(struct CGContext { }*)arg1 withContent:(bool)arg2 withStroke:(bool)arg3 withOpacity:(bool)arg4 forAlphaOnly:(bool)arg5 drawChildren:(bool)arg6;
- (void)drawInLayerContext:(struct CGContext { }*)arg1;
- (void)drawLayer:(id)arg1 inContext:(struct CGContext { }*)arg2;
- (id)dynamicResizeDidBegin;
- (void)dynamicResizeDidEndWithTracker:(id)arg1;
- (void)dynamicRotateDidBegin;
- (void)dynamicRotateDidEndWithTracker:(id)arg1;
- (void)dynamicVisibleTimeChangeDidBegin;
- (void)dynamicVisibleTimeChangeDidEnd;
- (void)dynamicVisibleTimeUpdateToValue:(double)arg1 withTolerance:(double)arg2 completionHandler:(id)arg3;
- (void)dynamicVolumeChangeDidBegin;
- (void)dynamicVolumeChangeDidEnd;
- (void)dynamicVolumeUpdateToValue:(float)arg1;
- (unsigned long long)enabledKnobMask;
- (bool)handleSingleTapAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)i_updateFrameRep;
- (id)initWithLayout:(id)arg1 canvas:(id)arg2;
- (bool)isDraggable;
- (bool)isPlayable;
- (bool)isPlaying;
- (id)movieInfo;
- (id)movieLayout;
- (struct CGImage { }*)newFrameMaskForViewScale:(double)arg1 frameRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2;
- (id)newTrackerForKnob:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)p_addPlayButtonToKnobs:(id)arg1;
- (void)p_applyBasicStrokeToLayer:(id)arg1 layer:(id)arg2 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)p_arrangeLayerVisibility:(id)arg1;
- (void)p_cancelUpdatingUIStateForMoviePlayability;
- (void)p_checkAndsyncTilingLayerState:(bool)arg1;
- (void)p_commonDrawStrokeInContext:(struct CGContext { }*)arg1;
- (void)p_createMaskLayerForLayer:(id)arg1;
- (void)p_createReflectionPlayerStrokeMaskLayer;
- (void)p_disposeMaskLayer;
- (void)p_disposeReflectionStrokeLayers;
- (void)p_disposeStrokeLayer;
- (void)p_drawInContext:(struct CGContext { }*)arg1 withContent:(bool)arg2 withStroke:(bool)arg3 withOpacity:(double)arg4 withMask:(bool)arg5 forShadowOrHitTest:(bool)arg6;
- (void)p_drawPosterImageInContext:(struct CGContext { }*)arg1;
- (void)p_drawReflectionGradientIntoMovieReflectionLayer:(struct CGContext { }*)arg1 reflectionSize:(struct CGSize { double x1; double x2; })arg2;
- (void)p_drawReflectionStrokeInContext:(struct CGContext { }*)arg1;
- (void)p_drawStrokeInContext:(struct CGContext { }*)arg1;
- (void)p_hideReflectionLayers;
- (bool)p_needsTilingLayerForStroke:(id)arg1;
- (void)p_placeReflectionPlayerLayer:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2;
- (bool)p_playButtonFitsInFrame;
- (id)p_playButtonKnob;
- (void)p_playForKnob;
- (void)p_reallyDisposeReflectionLayers;
- (void)p_setNeedsTeardownPlayerControllerOnUpdateLayer;
- (void)p_setPositionAndBoundsIfDifferent:(id)arg1 position:(struct CGPoint { double x1; double x2; })arg2 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)p_setupPlayerControllerIfNecessary;
- (void)p_setupPlayerLayerIfNecessary;
- (void)p_setupPlayerStrokeLayers:(bool)arg1;
- (void)p_setupReflectionPlayerLayerIfNecessary;
- (void)p_setupShapePlayerStrokeLayer;
- (void)p_setupShapeReflectionPlayerStrokeLayer;
- (void)p_setupStrokeLayers:(bool)arg1 needsMaskLayer:(bool)arg2 isFrame:(bool)arg3;
- (void)p_setupTilingPlayerStrokeLayer;
- (void)p_setupTilingReflectionPlayerStrokeLayer;
- (id)p_shapeLayerForPlayerStroke;
- (id)p_shapeLayerForReflectionStroke;
- (bool)p_shouldHideReflectionLayers;
- (bool)p_shouldPlayerControllerExistThroughoutSelection;
- (void)p_showReflectionLayers;
- (void)p_stopUpdatingUIStateForMoviePlayability;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_strokeFrameForLayerFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)p_teardownPlayerController;
- (void)p_teardownPlayerControllerIfNeeded;
- (id)p_tilingLayerForPlayerStroke;
- (id)p_tilingLayerForReflectionStroke;
- (void)p_togglePlaying;
- (void)p_updateEndTime;
- (void)p_updateMovieReflectionMaskLayer;
- (void)p_updatePlayButtonVisibility;
- (void)p_updateReflectionFrameRep;
- (void)p_updateRepeatMode;
- (void)p_updateStartTime;
- (void)p_updateStrokeLayerForStroke:(id)arg1 repLayer:(id)arg2;
- (void)p_updateUIStateForMoviePlayability;
- (void)p_updateVolume;
- (void)playbackDidStopForPlayerController:(id)arg1;
- (void)playerController:(id)arg1 playbackDidFailWithError:(id)arg2;
- (id)playerController;
- (id)playerStrokeLayer;
- (void)processChangedProperty:(int)arg1;
- (id)reflectionPlayerStrokeLayer;
- (void)screenScaleDidChange;
- (void)setAlternatePosterImage:(struct CGImage { }*)arg1;
- (void)setShapeReflectionPlayerStrokeLayer:(id)arg1;
- (bool)shouldShowMediaReplaceUI;
- (bool)shouldShowReflection;
- (bool)shouldSingleTapPlay;
- (void)updateFromLayout;
- (void)updateLayerGeometryFromLayout:(id)arg1;
- (double)visibleTime;
- (float)volume;
- (bool)wantsToHandleTapsWhenLocked;
- (void)willBeRemoved;
- (void)willBeginEyedropperMode;
- (void)willBeginReadMode;
- (void)willEndReadMode;
- (void)willUpdateLayer:(id)arg1;

@end
