/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@class CAMediaTimingFunction, NSArray, NSMutableArray;

@interface TSCHMultiDataLayerAnimationInfo : NSObject <NSCopying> {
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    boolmAboveIntercept;
    boolmAtIntercept;
    boolmCrossesIntercept;
    boolmCurrentAboveIntercept;
    boolmCurrentAtIntercept;
    boolmElementUndefined;
    boolmHorizontalChart;
    boolmShouldAnimate;
    } mChartBodyFrameInRepElementSpace;
    double mDuration;
    } mInterceptRect;
    NSArray *mKeyTimes;
    NSMutableArray *mLayerAnimationValues;
    CAMediaTimingFunction *mTimingFunction;
}

@property bool aboveIntercept;
@property bool atIntercept;
@property struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } chartBodyFrameInRepElementSpace;
@property bool crossesIntercept;
@property bool currentAboveIntercept;
@property bool currentAtIntercept;
@property double duration;
@property bool elementUndefined;
@property bool horizontalChart;
@property struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } interceptRect;
@property(copy) NSArray * keyTimes;
@property(readonly) NSArray * layerAnimationValues;
@property bool shouldAnimate;
@property(retain) CAMediaTimingFunction * timingFunction;

+ (id)animationInfo;

- (id).cxx_construct;
- (bool)aboveIntercept;
- (void)addAnimationForLayer:(id)arg1 key:(id)arg2 values:(id)arg3 keyTimes:(id)arg4 needPresentationLayerValues:(bool)arg5;
- (void)addAnimationForLayer:(id)arg1 key:(id)arg2 values:(id)arg3 keyTimes:(id)arg4;
- (void)addImageContentsAnimationForLayer:(id)arg1 fromImage:(id)arg2 toImage:(id)arg3 keyTimes:(id)arg4;
- (bool)atIntercept;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })chartBodyFrameInRepElementSpace;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (bool)crossesIntercept;
- (bool)currentAboveIntercept;
- (bool)currentAtIntercept;
- (void)dealloc;
- (double)duration;
- (bool)elementUndefined;
- (bool)horizontalChart;
- (id)init;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })interceptRect;
- (id)keyTimes;
- (id)layerAnimationValues;
- (void)setAboveIntercept:(bool)arg1;
- (void)setAtIntercept:(bool)arg1;
- (void)setChartBodyFrameInRepElementSpace:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCrossesIntercept:(bool)arg1;
- (void)setCurrentAboveIntercept:(bool)arg1;
- (void)setCurrentAtIntercept:(bool)arg1;
- (void)setDuration:(double)arg1;
- (void)setElementUndefined:(bool)arg1;
- (void)setHorizontalChart:(bool)arg1;
- (void)setInterceptRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setKeyTimes:(id)arg1;
- (void)setShouldAnimate:(bool)arg1;
- (void)setTimingFunction:(id)arg1;
- (bool)shouldAnimate;
- (id)timingFunction;

@end
