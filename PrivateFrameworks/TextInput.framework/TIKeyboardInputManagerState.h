/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/TextInput.framework/TextInput
 */

@class NSString, TICharacterSetDescription, TIKeyEventMap, TIKeyboardBehaviors, TIKeyboardCandidate;

@interface TIKeyboardInputManagerState : NSObject <NSCopying, NSSecureCoding> {
    union { 
        long long integerValue; 
        struct { 
            unsigned int canHandleKeyHitTest : 1; 
            unsigned int ignoresDeadKeys : 1; 
            unsigned int needsKeyHitTestResults : 1; 
            unsigned int shouldExtendPriorWord : 1; 
            unsigned int suppliesCompletions : 1; 
            unsigned int supportsNumberKeySelection : 1; 
            unsigned int supportsSetPhraseBoundary : 1; 
            unsigned int suppressCompletionsForFieldEditor : 1; 
            unsigned int usesAutoDeleteWord : 1; 
            unsigned int usesCandidateSelection : 1; 
            unsigned int commitsAcceptedCandidate : 1; 
            unsigned int nextInputWouldStartSentence : 1; 
            unsigned int inputStringIsExemptFromChecker : 1; 
            unsigned int suppressPlaceholderCandidate : 1; 
            unsigned int usesAutocorrectionLists : 1; 
        } fields; 
    TIKeyboardCandidate *_autocorrectionRecordForInputString;
    unsigned long long _initialCandidateBatchCount;
    unsigned long long _inputCount;
    unsigned long long _inputIndex;
    NSString *_inputString;
    TICharacterSetDescription *_inputsPreventingAcceptSelectedCandidate;
    TICharacterSetDescription *_inputsToReject;
    TIKeyEventMap *_keyEventMap;
    TIKeyboardBehaviors *_keyboardBehaviors;
    } _mask;
    NSString *_replacementForDoubleSpace;
    NSString *_searchStringForMarkedText;
    NSString *_shadowTyping;
    TICharacterSetDescription *_shortcutCompletions;
    TICharacterSetDescription *_terminatorsDeletingAutospace;
    TICharacterSetDescription *_terminatorsPreventingAutocorrection;
    TICharacterSetDescription *_wordCharacters;
    NSString *_wordSeparator;
    bool_shouldAddModifierSymbolsToWordCharacters;
}

@property(retain) TIKeyboardCandidate * autocorrectionRecordForInputString;
@property bool canHandleKeyHitTest;
@property bool commitsAcceptedCandidate;
@property bool ignoresDeadKeys;
@property unsigned long long initialCandidateBatchCount;
@property unsigned long long inputCount;
@property unsigned long long inputIndex;
@property(copy) NSString * inputString;
@property bool inputStringIsExemptFromChecker;
@property(copy) TICharacterSetDescription * inputsPreventingAcceptSelectedCandidate;
@property(copy) TICharacterSetDescription * inputsToReject;
@property(retain) TIKeyEventMap * keyEventMap;
@property(retain) TIKeyboardBehaviors * keyboardBehaviors;
@property bool needsKeyHitTestResults;
@property bool nextInputWouldStartSentence;
@property(copy) NSString * replacementForDoubleSpace;
@property(copy) NSString * searchStringForMarkedText;
@property(copy) NSString * shadowTyping;
@property(copy) TICharacterSetDescription * shortcutCompletions;
@property bool shouldAddModifierSymbolsToWordCharacters;
@property bool shouldExtendPriorWord;
@property bool suppliesCompletions;
@property bool supportsNumberKeySelection;
@property bool supportsSetPhraseBoundary;
@property bool suppressCompletionsForFieldEditor;
@property bool suppressPlaceholderCandidate;
@property(copy) TICharacterSetDescription * terminatorsDeletingAutospace;
@property(copy) TICharacterSetDescription * terminatorsPreventingAutocorrection;
@property bool usesAutoDeleteWord;
@property bool usesAutocorrectionLists;
@property bool usesCandidateSelection;
@property(copy) TICharacterSetDescription * wordCharacters;
@property(copy) NSString * wordSeparator;

+ (bool)supportsSecureCoding;

- (bool)acceptInputString:(id)arg1;
- (id)autocorrectionRecordForInputString;
- (bool)canHandleKeyHitTest;
- (bool)commitsAcceptedCandidate;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (bool)ignoresDeadKeys;
- (id)initWithCoder:(id)arg1;
- (unsigned long long)initialCandidateBatchCount;
- (unsigned long long)inputCount;
- (unsigned long long)inputIndex;
- (id)inputString;
- (bool)inputStringAcceptsCurrentCandidateIfSelected:(id)arg1;
- (bool)inputStringIsExemptFromChecker;
- (id)inputsPreventingAcceptSelectedCandidate;
- (id)inputsToReject;
- (id)keyEventMap;
- (id)keyboardBehaviors;
- (bool)needsKeyHitTestResults;
- (bool)nextInputWouldStartSentence;
- (id)replacementForDoubleSpace;
- (id)searchStringForMarkedText;
- (void)setAutocorrectionRecordForInputString:(id)arg1;
- (void)setCanHandleKeyHitTest:(bool)arg1;
- (void)setCommitsAcceptedCandidate:(bool)arg1;
- (void)setIgnoresDeadKeys:(bool)arg1;
- (void)setInitialCandidateBatchCount:(unsigned long long)arg1;
- (void)setInputCount:(unsigned long long)arg1;
- (void)setInputIndex:(unsigned long long)arg1;
- (void)setInputString:(id)arg1;
- (void)setInputStringIsExemptFromChecker:(bool)arg1;
- (void)setInputsPreventingAcceptSelectedCandidate:(id)arg1;
- (void)setInputsToReject:(id)arg1;
- (void)setKeyEventMap:(id)arg1;
- (void)setKeyboardBehaviors:(id)arg1;
- (void)setNeedsKeyHitTestResults:(bool)arg1;
- (void)setNextInputWouldStartSentence:(bool)arg1;
- (void)setReplacementForDoubleSpace:(id)arg1;
- (void)setSearchStringForMarkedText:(id)arg1;
- (void)setShadowTyping:(id)arg1;
- (void)setShortcutCompletions:(id)arg1;
- (void)setShouldAddModifierSymbolsToWordCharacters:(bool)arg1;
- (void)setShouldExtendPriorWord:(bool)arg1;
- (void)setSuppliesCompletions:(bool)arg1;
- (void)setSupportsNumberKeySelection:(bool)arg1;
- (void)setSupportsSetPhraseBoundary:(bool)arg1;
- (void)setSuppressCompletionsForFieldEditor:(bool)arg1;
- (void)setSuppressPlaceholderCandidate:(bool)arg1;
- (void)setTerminatorsDeletingAutospace:(id)arg1;
- (void)setTerminatorsPreventingAutocorrection:(id)arg1;
- (void)setUsesAutoDeleteWord:(bool)arg1;
- (void)setUsesAutocorrectionLists:(bool)arg1;
- (void)setUsesCandidateSelection:(bool)arg1;
- (void)setWordCharacters:(id)arg1;
- (void)setWordSeparator:(id)arg1;
- (id)shadowTyping;
- (id)shortcutCompletions;
- (bool)shouldAddModifierSymbolsToWordCharacters;
- (bool)shouldDeleteAutospaceBeforeTerminator:(id)arg1;
- (bool)shouldExtendPriorWord;
- (bool)shouldSuppressAutocorrectionWithTerminator:(id)arg1;
- (bool)stringEndsWord:(id)arg1;
- (bool)suppliesCompletions;
- (bool)supportsNumberKeySelection;
- (bool)supportsSetPhraseBoundary;
- (bool)suppressCompletionsForFieldEditor;
- (bool)suppressPlaceholderCandidate;
- (id)terminatorsDeletingAutospace;
- (id)terminatorsPreventingAutocorrection;
- (bool)usesAutoDeleteWord;
- (bool)usesAutocorrectionLists;
- (bool)usesCandidateSelection;
- (id)wordCharacters;
- (id)wordSeparator;

@end
