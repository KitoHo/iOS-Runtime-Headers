/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 */

@class <MPUTransportControlsViewDelegate>, MPUTransportButtonAttributes, NSArray, NSMutableDictionary, UIButton, UIButton<MPUTransportButton>, UIFont;

@interface MPUTransportControlsView : UIView {
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    NSArray *_availableControls;
    NSMutableDictionary *_availableControlsByGroup;
    <MPUTransportControlsViewDelegate> *_delegate;
    double _displayedSkipBackwardInterval;
    double _displayedSkipForwardInterval;
    UIFont *_displayedSkipIntervalFont;
    } _insetsForExpandingButtons;
    UIButton<MPUTransportButton> *_leftButton;
    MPUTransportButtonAttributes *_leftButtonAttributes;
    UIButton<MPUTransportButton> *_middleButton;
    MPUTransportButtonAttributes *_middleButtonAttributes;
    UIButton *_repeatButton;
    unsigned long long _repeatType;
    UIButton<MPUTransportButton> *_rightButton;
    MPUTransportButtonAttributes *_rightButtonAttributes;
    UIButton *_shuffleButton;
    unsigned long long _shuffleType;
    Class _transportButtonClass;
    bool_alwaysLive;
    bool_showAccessoryButtons;
    bool_showIsPlaying;
    bool_useCustomHighlightAppearance;
}

@property(setter=_setInsetsForExpandingButtons:) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } _insetsForExpandingButtons;
@property(getter=isAlwaysLive) bool alwaysLive;
@property(copy) NSArray * availableControls;
@property <MPUTransportControlsViewDelegate> * delegate;
@property double displayedSkipBackwardInterval;
@property double displayedSkipForwardInterval;
@property(retain) UIFont * displayedSkipIntervalFont;
@property unsigned long long repeatType;
@property bool showAccessoryButtons;
@property bool showIsPlaying;
@property unsigned long long shuffleType;
@property(retain) Class transportButtonClass;

+ (id)_skipIntervalButtonImageForInterval:(double)arg1 baseImage:(id)arg2 font:(id)arg3 scale:(double)arg4;
+ (id)_stringForDisplayedSkipInterval:(double)arg1;
+ (id)defaultTransportControls;

- (void).cxx_destruct;
- (id)_accessoryButtonEmphasizedTextAttributes;
- (id)_accessoryButtonTextAttributes;
- (void)_accessoryControlTap:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_adjustedFrameForButton:(id)arg1 proposedFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)_availableControlForGroup:(int)arg1;
- (void)_clearTransportButtonWeakReferencesToSelf;
- (void)_configureButton:(id)arg1 withAttributes:(id)arg2 forTransportControl:(id)arg3 deferApplyingAttributes:(bool)arg4;
- (id)_createAccessoryButton;
- (id)_createTransportButton;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_insetsForExpandingButtons;
- (void)_layoutButton:(id)arg1 withAttributes:(id)arg2 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 inExpandedTouchRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4;
- (void)_reloadTransportButtons;
- (void)_restoreButtonHighlightAfterTouchUpForButton:(id)arg1;
- (void)_setInsetsForExpandingButtons:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (id)_transportButtonForControlType:(long long)arg1;
- (struct CGSize { double x1; double x2; })_transportControlButtonSize;
- (void)_transportControlLongPressBegin:(id)arg1;
- (void)_transportControlLongPressEnd:(id)arg1;
- (void)_transportControlTap:(id)arg1;
- (void)_transportControlTouchEntered:(id)arg1;
- (void)_transportControlTouchExited:(id)arg1;
- (void)_updateTransportControlButtons;
- (void)_updateTransportControlButtonsAndDeferApplyingAttributes:(bool)arg1;
- (id)availableControls;
- (id)availableTransportControlWithType:(long long)arg1;
- (void)dealloc;
- (id)delegate;
- (double)displayedSkipBackwardInterval;
- (double)displayedSkipForwardInterval;
- (id)displayedSkipIntervalFont;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isAlwaysLive;
- (void)layoutSubviews;
- (void)reload;
- (unsigned long long)repeatType;
- (void)setAlwaysLive:(bool)arg1;
- (void)setAvailableControls:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisplayedSkipBackwardInterval:(double)arg1;
- (void)setDisplayedSkipForwardInterval:(double)arg1;
- (void)setDisplayedSkipIntervalFont:(id)arg1;
- (void)setRepeatType:(unsigned long long)arg1;
- (void)setShowAccessoryButtons:(bool)arg1;
- (void)setShowIsPlaying:(bool)arg1;
- (void)setShuffleType:(unsigned long long)arg1;
- (void)setTransportButtonClass:(Class)arg1;
- (bool)showAccessoryButtons;
- (bool)showIsPlaying;
- (unsigned long long)shuffleType;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (Class)transportButtonClass;

@end
