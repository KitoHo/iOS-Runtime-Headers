/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

@class <ML3MusicLibraryDelegate>, ML3AccountCacheDatabase, ML3Container, ML3DatabaseConnectionPool, ML3DatabaseMetadata, ML3LibraryNotificationManager, NSArray, NSMutableDictionary, NSObject<OS_dispatch_queue>, NSString;

@interface ML3MusicLibrary : NSObject <ML3DatabaseConnectionDelegate, ML3DatabaseConnectionPoolDelegate> {
    ML3AccountCacheDatabase *_accountCacheDatabase;
    ML3DatabaseConnectionPool *_connectionPool;
    NSString *_databasePath;
    <ML3MusicLibraryDelegate> *_delegate;
    NSArray *_libraryContainerFilterPredicates;
    NSArray *_libraryEntityFilterPredicates;
    NSString *_libraryUID;
    ML3LibraryNotificationManager *_notificationManager;
    NSMutableDictionary *_optimizedLibraryContainerFilterPredicatesByContainerClass;
    NSMutableDictionary *_optimizedLibraryEntityFilterPredicatesByEntityClass;
    NSObject<OS_dispatch_queue> *_serialQueue;
    struct iPhoneSortKeyBuilder { } *_sortKeyBuilder;
    bool_isHomeSharingLibrary;
    bool_isHomeSharingLibraryLoaded;
}

@property(readonly) long long autoFilledTracksTotalSize;
@property(readonly) ML3DatabaseConnectionPool * connectionPool;
@property(readonly) long long currentContentRevision;
@property(readonly) ML3Container * currentDevicePurchasesPlaylist;
@property(readonly) long long currentRevision;
@property(readonly) ML3DatabaseMetadata * databaseInfo;
@property(readonly) NSString * databasePath;
@property(copy,readonly) NSString * debugDescription;
@property <ML3MusicLibraryDelegate> * delegate;
@property(copy,readonly) NSString * description;
@property(readonly) unsigned long long hash;
@property bool isHomeSharingLibrary;
@property(retain) NSArray * libraryContainerFilterPredicates;
@property(retain) NSArray * libraryEntityFilterPredicates;
@property(readonly) NSString * libraryUID;
@property(readonly) NSArray * localizedSectionIndexTitles;
@property(readonly) bool mediaRestrictionEnabled;
@property(readonly) long long persistentID;
@property(readonly) NSArray * preferredAudioTracks;
@property(readonly) NSArray * preferredSubtitleTracks;
@property(readonly) Class superclass;
@property(readonly) bool supportsUbiquitousPlaybackPositions;
@property long long syncGenerationID;

+ (id)_notInKeepLocalCollectionPredicate;
+ (id)_purgeableTrackPredicateWithUrgency:(unsigned long long)arg1 includeCloudAssets:(bool)arg2;
+ (id)allPragmaSQL;
+ (id)allSchemaSQL;
+ (id)allTables;
+ (id)allTriggersSQL;
+ (void)buildDatabaseFromHomeSharingLibrary:(id)arg1 atPath:(id)arg2 completionHandler:(id)arg3 progressHandler:(id)arg4;
+ (void)buildDatabaseFromHomeSharingLibrary:(id)arg1 atPath:(id)arg2 completionHandler:(id)arg3;
+ (id)controlDirectoryPathWithBasePath:(id)arg1;
+ (id)databasePathForUnitTest:(id)arg1 withBasePath:(id)arg2;
+ (bool)defaultExcludeFromShuffleForMediaType:(unsigned int)arg1;
+ (bool)defaultRememberBookmarkTimeForMediaType:(unsigned int)arg1;
+ (bool)deviceSupportsMultipleLibraries;
+ (void)disableAutomaticDatabaseValidation;
+ (void)disableSharedLibrary;
+ (bool)dropIndexesUsingConnection:(id)arg1 tableNames:(const char *)arg2;
+ (void)enableAutomaticDatabaseValidation;
+ (void)enumerateSortMapTablesUsingBlock:(id)arg1;
+ (bool)inTransactionUpdateSearchMapOnConnection:(id)arg1;
+ (bool)inTransactionUpdateSortMapOnConnection:(id)arg1 forceUpdateOriginals:(bool)arg2;
+ (id)indexSchemaSQL;
+ (id)itemIndexSchemaSQL;
+ (id)itemSchemaSQL;
+ (id)localizedSectionHeaderForSectionHeader:(id)arg1;
+ (id)localizedSectionIndexTitleForSectionHeader:(id)arg1;
+ (id)mediaFolderPath;
+ (id)mediaFolderPathByAppendingPathComponent:(id)arg1;
+ (id)mediaFolderRelativePath:(id)arg1;
+ (bool)orderingLanguageMatchesSystemUsingConnection:(id)arg1;
+ (id)pathForBaseLocationPath:(long long)arg1;
+ (id)pathForResourceFileOrFolder:(int)arg1 basePath:(id)arg2 relativeToBase:(bool)arg3 createParentFolderIfNecessary:(bool)arg4;
+ (id)pathForResourceFileOrFolder:(int)arg1 basePath:(id)arg2 relativeToBase:(bool)arg3 isFolder:(bool*)arg4;
+ (id)pathForResourceFileOrFolder:(int)arg1;
+ (id)sectionIndexTitleForSectionHeader:(id)arg1;
+ (id)sectionIndexTitles;
+ (id)sharedLibrary;
+ (id)sharedLibraryDatabasePath;
+ (id)sortMapNewSchemaSQL;
+ (id)sortMapSchemaSQL;
+ (id)storeLinkSchemaSQL;
+ (id)unitTestableLibraryForTest:(id)arg1 basePath:(id)arg2 setupSQLFilenames:(id)arg3;
+ (bool)updateSortMapOnConnection:(id)arg1 forceUpdateOriginals:(bool)arg2;
+ (bool)updateSortMapOnConnection:(id)arg1;
+ (bool)updateTrackIntegrityOnConnection:(id)arg1;
+ (bool)userVersionMatchesSystemUsingConnection:(id)arg1;
+ (int)userVersionUsingConnection:(id)arg1;

- (void).cxx_destruct;
- (id)_allKeepLocalPlaylistTracks;
- (void)_autogenerateArtworkForRelativePath:(id)arg1 artworkType:(long long)arg2 mediaType:(unsigned int)arg3 completionHandler:(id)arg4;
- (bool)_canConfigureMediaLibraryDatabaseConnection:(id)arg1;
- (bool)_clearAllRowsFromTables:(id)arg1;
- (void)_configureMediaLibraryDatabaseConnection:(id)arg1;
- (void)_deleteAllArtworkVariantsAtRelativePaths:(id)arg1;
- (void)_effectiveSettingsDidChangeNotification:(id)arg1;
- (void)_enumeratePurgeableTracksForUrgency:(unsigned long long)arg1 includeCloudAssets:(bool)arg2 usingBlock:(id)arg3;
- (bool)_insertArtworkRowWithArtworkToken:(id)arg1 artworkType:(long long)arg2 sourceType:(long long)arg3 relativePath:(id)arg4;
- (void)_loggingSettingsDidChangeNotification:(id)arg1;
- (id)_newGeniusDBConnectionAtPath:(id)arg1;
- (void)_postClientNotificationWithDistributedName:(id)arg1 localName:(id)arg2;
- (void)_teardownMediaLibraryDatabaseConnection:(id)arg1;
- (void)_updateDatabaseConnectionsProfilingLevel;
- (bool)_validateDatabaseUsingConnection:(id)arg1;
- (void)accessSortKeyBuilder:(id)arg1;
- (id)accountCacheDatabase;
- (long long)addStringToSortMap:(id)arg1;
- (id)albumArtistForEffectiveAlbumArtistName:(id)arg1;
- (id)albumForAlbumArtistPersistentID:(long long)arg1 albumName:(id)arg2 feedURL:(id)arg3 seasonNumber:(id)arg4 compilation:(bool)arg5;
- (id)artistForArtistName:(id)arg1 seriesName:(id)arg2;
- (id)artistGroupingKeyForArtistName:(id)arg1 seriesName:(id)arg2;
- (long long)autoFilledTracksTotalSize;
- (long long)autoFilledTracksTotalSizeWithUrgency:(unsigned long long)arg1;
- (void)autogenerateSupportedSizesForAllOriginalArtworkWithConnection:(id)arg1;
- (bool)automaticDatabaseValidationDisabled;
- (void)checkForChangesInHomeSharingLibrary:(id)arg1 completionHandler:(id)arg2;
- (void)checkInDatabaseConnection:(id)arg1;
- (id)checkoutReaderConnection;
- (id)checkoutWriterConnection;
- (bool)clearAllGeniusData;
- (unsigned long long)cloudAssetsTotalSize;
- (bool)coerceValidDatabase;
- (id)composerForComposerName:(id)arg1;
- (void)connection:(id)arg1 didEndDatabaseTransactionAndCommit:(bool)arg2;
- (void)connectionDidBeginDatabaseTransaction:(id)arg1;
- (void)connectionDidOpenDatabase:(id)arg1;
- (void)connectionPool:(id)arg1 createdNewConnection:(id)arg2;
- (id)connectionPool;
- (void)connectionWillCloseDatabase:(id)arg1;
- (void)connectionWillOpenDatabase:(id)arg1;
- (unsigned long long)countOfChangedPersistentIdsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned long long)arg2 maximumRevisionType:(int)arg3;
- (bool)createIndexes;
- (long long)currentContentRevision;
- (int)currentDatabaseVersion;
- (id)currentDevicePurchasesPlaylist;
- (long long)currentRevision;
- (void)databaseConnectionAllowingWrites:(bool)arg1 withBlock:(id)arg2;
- (id)databaseInfo;
- (id)databasePath;
- (void)dealloc;
- (id)delegate;
- (bool)deleteArtworkWithSourceType:(long long)arg1;
- (bool)deleteArtworkWithToken:(id)arg1;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1 urgency:(unsigned long long)arg2 respectSongMattress:(bool)arg3;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1 urgency:(unsigned long long)arg2;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1;
- (bool)deleteDatabaseProperty:(id)arg1;
- (bool)deleteOrphanedArtworkWithSearchOptions:(long long)arg1 usingConnection:(id)arg2;
- (bool)deleteOrphanedArtworkWithSearchOptions:(long long)arg1;
- (void)deletePresignedValidity;
- (bool)dropItemIndexes;
- (bool)emptyAllTables;
- (void)enumeratePersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned long long)arg2 maximumRevisionType:(int)arg3 forMediaTypes:(id)arg4 usingBlock:(id)arg5;
- (void)enumeratePersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned long long)arg2 maximumRevisionType:(int)arg3 usingBlock:(id)arg4;
- (void)enumeratePersistentIDsAfterRevision:(long long)arg1 usingBlock:(id)arg2;
- (bool)executeUpdateSQL:(id)arg1;
- (id)fetchArtistHeroArtworkForPersistentID:(long long)arg1 artistType:(long long)arg2;
- (id)fetchChapterArtworkForPersistentID:(long long)arg1 retrievalTime:(double)arg2;
- (id)fetchItemArtworkForPersistentID:(long long)arg1;
- (id)fetchScreenshotArtworkForPersistentID:(long long)arg1;
- (void)fillContainerForHomeSharingLibrary:(id)arg1 containerID:(long long)arg2 completionHandler:(id)arg3;
- (id)genreForGenre:(id)arg1;
- (void)getChangedPersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(long long)arg2 usingBlock:(id)arg3;
- (long long)getDatabaseFileFreeSpace;
- (id)groupingKeyForString:(id)arg1;
- (id)groupingKeysForStrings:(id)arg1;
- (bool)handleDatabaseValidation;
- (bool)handlePreprocessDatabase;
- (bool)handleSchemaUpgrade;
- (bool)hasArtistHeroArtworkForPersistentID:(long long)arg1 artistType:(long long)arg2;
- (bool)hasChapterArtworkForPersistentID:(long long)arg1 retrievalTime:(double)arg2;
- (bool)hasItemArtworkForPersistentID:(long long)arg1;
- (bool)hasPresignedValidity;
- (bool)hasScreenshotArtworkForPersistentID:(long long)arg1;
- (bool)importExistingOriginalArtworkWithArtworkToken:(id)arg1 artworkType:(long long)arg2 sourceType:(long long)arg3 mediaType:(unsigned int)arg4;
- (bool)importOriginalArtworkFromFileURL:(id)arg1 withArtworkToken:(id)arg2 artworkType:(long long)arg3 sourceType:(long long)arg4 mediaType:(unsigned int)arg5;
- (bool)importOriginalArtworkFromImageData:(id)arg1 withArtworkToken:(id)arg2 artworkType:(long long)arg3 sourceType:(long long)arg4 mediaType:(unsigned int)arg5;
- (id)initWithPath:(id)arg1 readOnly:(bool)arg2 populateUnitTestTablesBlock:(id)arg3;
- (id)initWithPath:(id)arg1;
- (long long)insertStringIntoSortMapNoTransaction:(id)arg1;
- (id)insertStringsIntoSortMap:(id)arg1 didReSortMap:(bool*)arg2;
- (id)insertStringsIntoSortMap:(id)arg1;
- (bool)isCurrentThreadInTransaction;
- (bool)isHomeSharingLibrary;
- (id)libraryContainerFilterPredicates;
- (id)libraryEntityFilterPredicates;
- (id)libraryEntityFilterPredicatesForContainerClass:(Class)arg1;
- (id)libraryEntityFilterPredicatesForEntityClass:(Class)arg1;
- (id)libraryUID;
- (id)localizedSectionHeaderForSectionIndex:(unsigned long long)arg1;
- (id)localizedSectionIndexTitles;
- (bool)mediaRestrictionEnabled;
- (void)migratePresignedValidity;
- (struct { long long x1; long long x2; })nameOrderForString:(id)arg1;
- (void)notifyContentsDidChange;
- (void)notifyDisplayValuesPropertyDidChange;
- (void)notifyInvisiblePropertyDidChange;
- (void)notifyNonContentsPropertyDidChange;
- (void)performDatabaseTransactionWithBlock:(id)arg1;
- (void)performReadOnlyDatabaseTransactionWithBlock:(id)arg1;
- (bool)persistentID:(long long)arg1 changedAfterRevision:(long long)arg2 revisionTrackingCode:(long long)arg3;
- (long long)persistentID;
- (bool)populateArtworkCacheWithArtworkData:(id)arg1 trackValues:(id)arg2;
- (bool)populateStaticItemsOfDynamicContainers;
- (id)preferredAudioTracks;
- (id)preferredSubtitleTracks;
- (bool)prepareUnitTestDatabaseWithSQLFromContentsOfFile:(id)arg1 error:(id*)arg2;
- (void)purgeCloudAssets;
- (void)reconnectToDatabase;
- (void)removeItemsWithFamilyAccountID:(unsigned long long)arg1 purchaserAccountID:(unsigned long long)arg2 downloaderAccountID:(unsigned long long)arg3;
- (void)removeJaliscoTrackData;
- (void)removeOrphanedTracks;
- (void)removeOrphanedTracksOnlyInCaches:(bool)arg1;
- (void)removeSagaTrackData;
- (bool)removeSource:(int)arg1 fromTracksWithPersistentIDs:(id)arg2 usingConnection:(id)arg3;
- (bool)removeSource:(int)arg1 fromTracksWithPersistentIDs:(id)arg2;
- (bool)removeSource:(int)arg1 usingConnection:(id)arg2;
- (bool)removeSource:(int)arg1;
- (void)removeTombstonesForDeletedItems;
- (bool)requiresNonSchemaUpdatesOnConnection:(id)arg1;
- (bool)requiresSchemaOnlyUpdatesOnConnection:(id)arg1;
- (void)savePlaylists;
- (void)savePlaylistsSinceRevision:(long long)arg1 withGrappaID:(unsigned int)arg2;
- (void)saveTrackMetadata;
- (void)saveTrackMetadataSinceRevision:(long long)arg1 withGrappaID:(unsigned int)arg2;
- (unsigned long long)sectionIndexTitleIndexForSectionIndex:(unsigned long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setIsHomeSharingLibrary:(bool)arg1;
- (void)setLibraryContainerFilterPredicates:(id)arg1;
- (void)setLibraryEntityFilterPredicates:(id)arg1;
- (void)setLibraryUID:(id)arg1;
- (void)setSyncGenerationID:(long long)arg1;
- (bool)setValue:(id)arg1 forDatabaseProperty:(id)arg2;
- (bool)supportsUbiquitousPlaybackPositions;
- (long long)syncGenerationID;
- (void)updateMusicLibraryByApplyingUbiquitousBookmarkMetadataToTrackWithPersistentID:(long long)arg1;
- (void)updateOrderingLanguagesForCurrentLanguage;
- (bool)updateSortMap;
- (bool)updateSystemPlaylistNamesForCurrentLanguage;
- (void)updateTrackIntegrity;
- (void)updateUbiquitousDatabaseByRemovingUbiquitousMetadataFromTrackWithPersistentID:(long long)arg1;
- (id)uppService;
- (bool)validateDatabase;
- (id)valueForDatabaseProperty:(id)arg1;
- (bool)verifyPresignedValidity;

@end
