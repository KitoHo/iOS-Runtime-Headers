/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/Celestial.framework/Celestial
 */

@class NSArray, NSObject<OS_dispatch_queue>;

@interface BWAudioSourceNode : BWSourceNode {
    struct { 
        unsigned int val[8]; 
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    struct opaqueCMSession { } *_CMSession;
    struct opaqueCMSimpleQueue { } *_activeBuffersQueue;
    unsigned int _auSubType;
    int _audioLevelUnits;
    struct OpaqueAudioComponentInstance { } *_audioUnit;
    } _clientAuditToken;
    int _clientPID;
    struct OpaqueCMClock { } *_clock;
    struct opaqueCMFormatDescription { } *_formatDescription;
    NSObject<OS_dispatch_queue> *_generateSamplesDispatchQueue;
    struct opaqueCMSimpleQueue { } *_inactiveBuffersQueue;
    } _latencyOffset;
    } _nextExpectedSampleTime;
    unsigned int _pullDuration;
    struct opaqueCMSimpleQueue { } *_renderProcErrorQueue;
    bool_clientAuditTokenIsValid;
    bool_configuresSession;
    bool_didBeginInterruption;
    bool_isAppAudioSession;
    bool_levelMeteringEnabled;
    bool_selectsMicForFrontCamera;
    bool_streamInterrupted;
    bool_streamStarted;
    bool_usesVideoCMSessionAudioMode;
}

@property(readonly) NSArray * audioLevels;
@property bool interrupted;
@property bool levelMeteringEnabled;
@property bool selectsMicForFrontCamera;
@property bool usesVideoCMSessionAudioMode;

+ (double)_desiredSampleRate;
+ (void)initialize;

- (unsigned int)_audioCombinedLatency;
- (int)_configureCMSessionWithDefaultHardwareSampleRate:(double)arg1;
- (struct opaqueCMSampleBuffer { }*)_createSampleBufferForBufferTimestampedAudioBufferList:(struct TimestampedAudioBufferList { struct __CFAllocator {} *x1; unsigned int x2; unsigned int x3; struct { long long x_4_1_1; int x_4_1_2; unsigned int x_4_1_3; long long x_4_1_4; } x4; struct AudioBufferList {} *x5; unsigned int x6; }*)arg1;
- (int)_generatePullBuffers;
- (void)_generateSamples;
- (int)_getAudioDevicePullFrames:(unsigned int*)arg1;
- (int)_selectMicForAudioRoute:(id)arg1;
- (int)_setCMSessionAudioModeAndSelectMic;
- (int)_setCMSessionPropertyWithKey:(struct __CFString { }*)arg1 value:(void*)arg2;
- (int)_setupAudioUnit;
- (int)_updatePullFormatDescription;
- (id)audioLevels;
- (struct OpaqueCMClock { }*)clock;
- (void)dealloc;
- (bool)hasNonLiveConfigurationChanges;
- (id)initWithCMSession:(struct opaqueCMSession { }*)arg1 configureSession:(bool)arg2 clientToken:(id)arg3 clientPID:(int)arg4;
- (bool)interrupted;
- (bool)levelMeteringEnabled;
- (void)makeCurrentConfigurationLive;
- (id)nodeSubType;
- (void)prepareForCurrentConfigurationToBecomeLive;
- (bool)selectsMicForFrontCamera;
- (void)setInterrupted:(bool)arg1;
- (void)setLevelMeteringEnabled:(bool)arg1;
- (void)setSelectsMicForFrontCamera:(bool)arg1;
- (void)setUsesVideoCMSessionAudioMode:(bool)arg1;
- (bool)start:(id*)arg1;
- (bool)stop:(id*)arg1;
- (bool)usesVideoCMSessionAudioMode;

@end
