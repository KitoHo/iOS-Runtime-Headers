/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation
 */

@class <SBFWallpaperViewInternalObserver>, <SBFWallpaperViewLegibilityObserver>, NSString, NSTimer, SBFWallpaperParallaxSettings, SBFWallpaperSettings, UIColor, UIImage, UIImageView, UIView, _UILegibilitySettings, _UILegibilitySettingsProvider;

@interface SBFWallpaperView : UIView <_UISettingsKeyObserver> {
    UIImageView *_bottomGradientView;
    NSTimer *_colorSampleTimer;
    double _contentScaleFactor;
    UIView *_contentView;
    double _contrast;
    long long _disallowRasterizationBlockCount;
    <SBFWallpaperViewInternalObserver> *_internalObserver;
    UIColor *_lastAverageColor;
    <SBFWallpaperViewLegibilityObserver> *_legibilityObserver;
    _UILegibilitySettings *_legibilitySettings;
    _UILegibilitySettingsProvider *_legibilitySettingsProvider;
    double _parallaxAxisAdjustmentAngle;
    double _parallaxFactor;
    SBFWallpaperParallaxSettings *_parallaxSettings;
    UIView *_parallaxView;
    UIImageView *_topGradientView;
    long long _variant;
    SBFWallpaperSettings *_wallpaperSettings;
    double _zoomFactor;
    bool_continuousColorSamplingEnabled;
    bool_filtersAverageColor;
    bool_generatingBlurredImages;
    bool_parallaxEnabled;
    bool_shouldGenerateBlurredImagesWhenVisible;
    bool_suppressesGradients;
    bool_wallpaperAnimationEnabled;
    bool_wantsRasterization;
}

@property(retain) UIView * contentView;
@property bool continuousColorSamplingEnabled;
@property double contrast;
@property(copy,readonly) NSString * debugDescription;
@property(copy,readonly) NSString * description;
@property bool filtersAverageColor;
@property(readonly) unsigned long long hash;
@property <SBFWallpaperViewInternalObserver> * internalObserver;
@property <SBFWallpaperViewLegibilityObserver> * legibilityObserver;
@property(retain) _UILegibilitySettings * legibilitySettings;
@property double parallaxAxisAdjustmentAngle;
@property bool parallaxEnabled;
@property double parallaxFactor;
@property(readonly) Class superclass;
@property bool suppressesGradients;
@property long long variant;
@property bool wallpaperAnimationEnabled;
@property(readonly) UIImage * wallpaperImage;
@property double zoomFactor;

+ (bool)_allowsParallax;
+ (bool)_allowsRasterization;
+ (bool)_shouldScaleForParallax;

- (void)_addParallax;
- (void)_applyParallaxSettings;
- (id)_averageColorInContentViewRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 smudgeRadius:(double)arg2;
- (void)_beginDisallowRasterizationBlock;
- (id)_blurReplacementImage;
- (id)_blurredImage;
- (double)_bottomGradientAlpha;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_bottomGradientTestRect;
- (void)_cleanupAfterAnimatingGradients;
- (id)_computeAverageColor;
- (id)_displayedImage;
- (void)_endDisallowRasterizationBlock;
- (void)_handleVariantChange;
- (void)_handleVisibilityChange;
- (id)_imageForBackdropParameters:(struct { long long x1; long long x2; long long x3; })arg1 includeTint:(bool)arg2;
- (bool)_isVisible;
- (void)_notifyBlursInvalidated;
- (void)_notifyGeometryInvalidated;
- (void)_prepareToAnimateGradients;
- (id)_primaryColorOverride;
- (void)_removeParallax;
- (void)_setLegibilitySettings:(id)arg1 notify:(bool)arg2;
- (bool)_shouldShowBottomGradient;
- (bool)_shouldShowTopGradient;
- (void)_startGeneratingBlurredImages;
- (void)_stopGeneratingBlurredImages;
- (double)_topGradientAlpha;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_topGradientTestRect;
- (void)_updateContentViewScale;
- (void)_updateGeneratingBlurs;
- (void)_updateGradientAlpha;
- (void)_updateGradientImage;
- (void)_updateLegibilitySettingsForAverageColor:(id)arg1 notify:(bool)arg2;
- (void)_updateParallaxSettings;
- (void)_updateRasterizationState;
- (void)_updateScaleFactor;
- (id)_wallpaperName;
- (id)averageColorInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withSmudgeRadius:(double)arg2;
- (id)blurredImage;
- (double)contentScaleFactor;
- (id)contentView;
- (bool)continuousColorSamplingEnabled;
- (double)contrast;
- (double)contrastInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 contrastWithinBoxes:(double*)arg2 contrastBetweenBoxes:(double*)arg3;
- (double)contrastInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)contrastRequiresTreatments;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })cropRect;
- (double)cropZoomScale;
- (void)dealloc;
- (void)didMoveToWindow;
- (bool)filtersAverageColor;
- (double)gradientOpacityInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 contrastWithinBoxesFactor:(double)arg2 allowLuminanceCheck:(bool)arg3;
- (id)imageForBackdropParameters:(struct { long long x1; long long x2; long long x3; })arg1 includeTint:(bool)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 variant:(long long)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)internalObserver;
- (void)invalidate;
- (bool)isDisplayingWallpaper:(id)arg1 forVariant:(long long)arg2 options:(id)arg3;
- (void)layoutSubviews;
- (id)legibilityObserver;
- (id)legibilitySettings;
- (bool)luminanceInRectRequiresTreatments:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (double)parallaxAxisAdjustmentAngle;
- (bool)parallaxEnabled;
- (double)parallaxFactor;
- (void)prepareToAppear;
- (void)prepareToDisappear;
- (void)setContentView:(id)arg1;
- (void)setContentsRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setContinuousColorSamplingEnabled:(bool)arg1;
- (void)setContrast:(double)arg1;
- (void)setCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 zoomScale:(double)arg2;
- (void)setFiltersAverageColor:(bool)arg1;
- (void)setGeneratesBlurredImages:(bool)arg1;
- (void)setHidden:(bool)arg1;
- (void)setInternalObserver:(id)arg1;
- (void)setLegibilityObserver:(id)arg1;
- (void)setLegibilitySettings:(id)arg1;
- (void)setParallaxAxisAdjustmentAngle:(double)arg1;
- (void)setParallaxEnabled:(bool)arg1;
- (void)setParallaxFactor:(double)arg1;
- (void)setSuppressesGradients:(bool)arg1;
- (void)setVariant:(long long)arg1 withAnimationFactory:(id)arg2 forced:(bool)arg3;
- (void)setVariant:(long long)arg1 withAnimationFactory:(id)arg2;
- (void)setVariant:(long long)arg1;
- (void)setWallpaperAnimationEnabled:(bool)arg1;
- (void)setZoomFactor:(double)arg1;
- (void)settings:(id)arg1 changedValueForKey:(id)arg2;
- (bool)supportsCropping;
- (bool)suppressesGradients;
- (void)updateLegibilitySettingsForAverageColor:(id)arg1;
- (long long)variant;
- (bool)wallpaperAnimationEnabled;
- (id)wallpaperImage;
- (bool)wantsRasterization;
- (double)zoomFactor;

@end
