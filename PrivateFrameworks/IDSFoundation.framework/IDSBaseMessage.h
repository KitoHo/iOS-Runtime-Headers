/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/IDSFoundation.framework/IDSFoundation
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class NSArray, NSData, NSDate, NSDictionary, NSMutableArray, NSString;

@interface IDSBaseMessage : NSObject <NSCopying> {
    NSDictionary *_cachedBody;
    NSDictionary *_clientInfo;
    id _completionBlock;
    id _context;
    NSDate *_creationDate;
    NSString *_dataUsageBundleIdentifier;
    id _deliveryAcknowledgementBlock;
    NSString *_dsAuthID;
    NSDictionary *_responseAlert;
    NSData *_serviceData;
    double _timeSent;
    double _timeout;
    int _timeoutRetries;
    NSString *_topic;
    unsigned long long _uniqueID;
    NSDictionary *_userInfo;
    bool_forceCellular;
    bool_highPriority;
    bool_usingOutgoingPush;
    bool_wantsBinaryPush;
    bool_wantsIntegerUniqueIDs;
    bool_wantsResponse;
}

@property(copy,readonly) NSData * IDCertificate;
@property(setter=_setCachedBody:,retain) NSDictionary * _cachedBody;
@property(setter=_setUsingOutgoingPush:) bool _usingOutgoingPush;
@property(retain,readonly) NSDictionary * additionalInternalHeaders;
@property(retain,readonly) NSDictionary * additionalMessageHeaders;
@property(retain,readonly) NSDictionary * additionalMessageHeadersForOutgoingPush;
@property(retain,readonly) NSDictionary * additionalQueryStringParameters;
@property(retain,readonly) NSString * bagKey;
@property(copy) NSMutableArray * certDataArray;
@property(copy) NSDictionary * clientInfo;
@property(readonly) long long command;
@property(copy) id completionBlock;
@property(retain) id context;
@property(retain) NSDate * creationDate;
@property(readonly) double customRetryInterval;
@property(retain,readonly) NSString * dataUsageBundleIdentifier;
@property(copy) id deliveryAcknowledgementBlock;
@property(setter=setDSAuthID:,copy) NSString * dsAuthID;
@property bool forceCellular;
@property bool highPriority;
@property(readonly) struct __SecKey { }* identityPrivateKey;
@property(readonly) struct __SecKey { }* identityPublicKey;
@property(readonly) bool ignoresNetworkConnectivity;
@property(readonly) bool isValidMessage;
@property(readonly) int maxTimeoutRetries;
@property(retain,readonly) NSDictionary * messageBody;
@property(retain,readonly) NSDictionary * messageBodyUsingCache;
@property(retain,readonly) NSDictionary * nonStandardMessageHeadersForOutgoingPush;
@property(readonly) bool payloadCanBeLogged;
@property(copy) NSMutableArray * privateKeyArray;
@property(copy) NSMutableArray * publicKeyArray;
@property(copy) NSData * pushCertificate;
@property struct __SecKey { }* pushPrivateKey;
@property struct __SecKey { }* pushPublicKey;
@property(copy) NSData * pushToken;
@property(retain,readonly) NSArray * requiredKeys;
@property(copy) NSDictionary * responseAlertInfo;
@property(readonly) long long responseCommand;
@property(copy) NSData * serviceData;
@property double timeSent;
@property double timeout;
@property int timeoutRetries;
@property(retain) NSString * topic;
@property unsigned long long uniqueID;
@property(retain,readonly) NSString * uniqueIDString;
@property(retain,readonly) NSString * userAgentHeaderString;
@property(copy) NSMutableArray * userIDArray;
@property(copy) NSDictionary * userInfo;
@property(readonly) bool wantsAPSRetries;
@property(readonly) bool wantsBagKey;
@property bool wantsBinaryPush;
@property(readonly) bool wantsBodySignature;
@property(readonly) bool wantsCFNetworkTimeout;
@property(readonly) bool wantsCompressedBody;
@property(readonly) bool wantsCustomRetryInterval;
@property(readonly) bool wantsExtraTimeoutRetry;
@property(readonly) bool wantsHTTPGet;
@property(readonly) bool wantsHTTPHeaders;
@property(readonly) bool wantsIDSServer;
@property bool wantsIntegerUniqueIDs;
@property(readonly) bool wantsJSONBody;
@property(readonly) bool wantsManagedRetries;
@property bool wantsResponse;
@property(readonly) bool wantsSignature;
@property(readonly) bool wantsUserAgentInHeaders;

- (id)IDCertificate;
- (void)_cacheBody;
- (id)_cachedBody;
- (void)_setCachedBody:(id)arg1;
- (void)_setUsingOutgoingPush:(bool)arg1;
- (bool)_usingOutgoingPush;
- (id)additionalInternalHeaders;
- (id)additionalMessageHeaders;
- (id)additionalMessageHeadersForOutgoingPush;
- (id)additionalQueryStringParameters;
- (id)bagKey;
- (id)certDataArray;
- (id)clientInfo;
- (long long)command;
- (id)completionBlock;
- (id)context;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)creationDate;
- (double)customRetryInterval;
- (id)dataUsageBundleIdentifier;
- (void)dealloc;
- (id)deliveryAcknowledgementBlock;
- (id)dsAuthID;
- (bool)forceCellular;
- (void)handleResponseDictionary:(id)arg1;
- (void)handleResponseHeaders:(id)arg1;
- (bool)hasRequiredKeys:(id*)arg1;
- (bool)highPriority;
- (struct __SecKey { }*)identityPrivateKey;
- (struct __SecKey { }*)identityPublicKey;
- (bool)ignoresNetworkConnectivity;
- (id)init;
- (bool)isValidMessage;
- (int)maxTimeoutRetries;
- (id)messageBody;
- (id)messageBodyUsingCache;
- (id)nonStandardMessageHeadersForOutgoingPush;
- (bool)payloadCanBeLogged;
- (id)privateKeyArray;
- (id)publicKeyArray;
- (id)pushCertificate;
- (struct __SecKey { }*)pushPrivateKey;
- (struct __SecKey { }*)pushPublicKey;
- (id)pushToken;
- (id)requiredKeys;
- (id)responseAlertInfo;
- (long long)responseCommand;
- (id)serviceData;
- (void)setCertDataArray:(id)arg1;
- (void)setClientInfo:(id)arg1;
- (void)setCompletionBlock:(id)arg1;
- (void)setContext:(id)arg1;
- (void)setCreationDate:(id)arg1;
- (void)setDSAuthID:(id)arg1;
- (void)setDeliveryAcknowledgementBlock:(id)arg1;
- (void)setForceCellular:(bool)arg1;
- (void)setHighPriority:(bool)arg1;
- (void)setPrivateKeyArray:(id)arg1;
- (void)setPublicKeyArray:(id)arg1;
- (void)setPushCertificate:(id)arg1;
- (void)setPushPrivateKey:(struct __SecKey { }*)arg1;
- (void)setPushPublicKey:(struct __SecKey { }*)arg1;
- (void)setPushToken:(id)arg1;
- (void)setResponseAlertInfo:(id)arg1;
- (void)setServiceData:(id)arg1;
- (void)setTimeSent:(double)arg1;
- (void)setTimeout:(double)arg1;
- (void)setTimeoutRetries:(int)arg1;
- (void)setTopic:(id)arg1;
- (void)setUniqueID:(unsigned long long)arg1;
- (void)setUserIDArray:(id)arg1;
- (void)setUserInfo:(id)arg1;
- (void)setWantsBinaryPush:(bool)arg1;
- (void)setWantsIntegerUniqueIDs:(bool)arg1;
- (void)setWantsResponse:(bool)arg1;
- (double)timeSent;
- (double)timeout;
- (int)timeoutRetries;
- (id)topic;
- (unsigned long long)uniqueID;
- (id)uniqueIDString;
- (id)userAgentHeaderString;
- (id)userIDArray;
- (id)userInfo;
- (bool)wantsAPSRetries;
- (bool)wantsBagKey;
- (bool)wantsBinaryPush;
- (bool)wantsBodySignature;
- (bool)wantsCFNetworkTimeout;
- (bool)wantsCompressedBody;
- (bool)wantsCustomRetryInterval;
- (bool)wantsExtraTimeoutRetry;
- (bool)wantsHTTPGet;
- (bool)wantsHTTPHeaders;
- (bool)wantsIDSServer;
- (bool)wantsIntegerUniqueIDs;
- (bool)wantsJSONBody;
- (bool)wantsManagedRetries;
- (bool)wantsResponse;
- (bool)wantsSignature;
- (bool)wantsUserAgentInHeaders;

@end
