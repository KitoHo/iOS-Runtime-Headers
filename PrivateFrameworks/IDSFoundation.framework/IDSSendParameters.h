/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/IDSFoundation.framework/IDSFoundation
 */

@class NSArray, NSData, NSDate, NSDictionary, NSMutableDictionary, NSNumber, NSString;

@interface IDSSendParameters : NSObject <NSCopying> {
    NSMutableDictionary *_params;
}

@property(retain) NSString * accountUUID;
@property bool activityContinuation;
@property(retain) NSString * alternateCallbackID;
@property(retain) NSArray * bulkedPayload;
@property bool bypassDuet;
@property bool bypassSizeCheck;
@property(retain) NSNumber * command;
@property bool compressPayload;
@property bool compressed;
@property bool daemonDeathResend;
@property(retain) NSData * data;
@property(retain) NSData * dataToEncrypt;
@property(retain) NSDictionary * deliveryStatusContext;
@property(retain) NSArray * destinations;
@property(retain,readonly) NSDictionary * dictionaryRepresentation;
@property bool encryptPayload;
@property bool expectsPeerResponse;
@property(retain,readonly) NSDate * expirationDate;
@property bool fireAndForget;
@property(retain) NSString * fromID;
@property(retain) NSString * identifier;
@property(retain) NSArray * interestingRegistrationProperties;
@property bool localDelivery;
@property(retain) NSDictionary * message;
@property(retain) NSData * messageUUID;
@property bool nonWaking;
@property(retain) NSString * peerResponseIdentifier;
@property long long priority;
@property(retain) NSDictionary * protobuf;
@property(retain) NSString * queueOneIdentifier;
@property(retain) NSArray * requireAllRegistrationProperties;
@property bool requireBluetooth;
@property double timeout;
@property bool useDictAsTopLevel;
@property bool wantsAppAck;
@property bool wantsDeliveryStatus;
@property bool wantsResponse;

- (id)accountUUID;
- (bool)activityContinuation;
- (id)alternateCallbackID;
- (id)bulkedPayload;
- (bool)bypassDuet;
- (bool)bypassSizeCheck;
- (id)command;
- (bool)compressPayload;
- (bool)compressed;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (bool)daemonDeathResend;
- (id)data;
- (id)dataToEncrypt;
- (void)dealloc;
- (id)deliveryStatusContext;
- (id)destinations;
- (id)dictionaryRepresentation;
- (void)encodeWithCoder:(id)arg1;
- (bool)encryptPayload;
- (bool)expectsPeerResponse;
- (id)expirationDate;
- (bool)fireAndForget;
- (id)fromID;
- (id)identifier;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithDictionary:(id)arg1;
- (id)interestingRegistrationProperties;
- (bool)localDelivery;
- (id)message;
- (id)messageUUID;
- (bool)nonWaking;
- (id)objectForKey:(id)arg1;
- (id)peerResponseIdentifier;
- (long long)priority;
- (id)protobuf;
- (id)queueOneIdentifier;
- (id)requireAllRegistrationProperties;
- (bool)requireBluetooth;
- (void)setAccountUUID:(id)arg1;
- (void)setActivityContinuation:(bool)arg1;
- (void)setAlternateCallbackID:(id)arg1;
- (void)setBulkedPayload:(id)arg1;
- (void)setBypassDuet:(bool)arg1;
- (void)setBypassSizeCheck:(bool)arg1;
- (void)setCommand:(id)arg1;
- (void)setCompressPayload:(bool)arg1;
- (void)setCompressed:(bool)arg1;
- (void)setDaemonDeathResend:(bool)arg1;
- (void)setData:(id)arg1;
- (void)setDataToEncrypt:(id)arg1;
- (void)setDeliveryStatusContext:(id)arg1;
- (void)setDestinations:(id)arg1;
- (void)setEncryptPayload:(bool)arg1;
- (void)setExpectsPeerResponse:(bool)arg1;
- (void)setFireAndForget:(bool)arg1;
- (void)setFromID:(id)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setInterestingRegistrationProperties:(id)arg1;
- (void)setLocalDelivery:(bool)arg1;
- (void)setMessage:(id)arg1;
- (void)setMessageUUID:(id)arg1;
- (void)setNonWaking:(bool)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (void)setPeerResponseIdentifier:(id)arg1;
- (void)setPriority:(long long)arg1;
- (void)setProtobuf:(id)arg1;
- (void)setQueueOneIdentifier:(id)arg1;
- (void)setRequireAllRegistrationProperties:(id)arg1;
- (void)setRequireBluetooth:(bool)arg1;
- (void)setTimeout:(double)arg1;
- (void)setUseDictAsTopLevel:(bool)arg1;
- (void)setWantsAppAck:(bool)arg1;
- (void)setWantsDeliveryStatus:(bool)arg1;
- (void)setWantsResponse:(bool)arg1;
- (double)timeout;
- (bool)useDictAsTopLevel;
- (bool)wantsAppAck;
- (bool)wantsDeliveryStatus;
- (bool)wantsResponse;

@end
