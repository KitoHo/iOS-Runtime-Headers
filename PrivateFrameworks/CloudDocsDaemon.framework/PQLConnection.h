/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CloudDocsDaemon.framework/CloudDocsDaemon
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class NSError, NSMutableArray, NSObject<OS_dispatch_queue>, NSObject<OS_dispatch_source>, NSString, NSURL;

@interface PQLConnection : NSObject {
    id _autoRollbackHandler;
    int _batchingChangesCount;
    int _batchingChangesLimit;
    double _batchingPeriod;
    NSObject<OS_dispatch_source> *_batchingTimer;
    int _cacheSize;
    struct sqlite3 { } *_db;
    NSMutableArray *_flushNotifications;
    NSString *_label;
    NSError *_lastError;
    id _lockedHandler;
    id _postFlushHook;
    id _preFlushHook;
    struct cache_s { } *_preparedStatements;
    int _savePointLevel;
    NSObject<OS_dispatch_queue> *_serialQueue;
    int _skipBatchStop;
    id _sqliteErrorHandler;
    NSMutableArray *_stmtCacheCleanupQueue;
    NSObject<OS_dispatch_source> *_stmtCacheSource;
    int _suspendCaching;
    NSURL *_url;
    int _vacuumTracker;
    bool_batchStarted;
    bool_crashIfUsedAfterClose;
    bool_traced;
    bool_useBatching;
    bool_useQueue;
}

@property(copy) id autoRollbackHandler;
@property(readonly) long long changes;
@property bool crashIfUsedAfterClose;
@property(readonly) struct sqlite3 { }* dbHandle;
@property(readonly) bool isInBatch;
@property(readonly) bool isInTransaction;
@property(copy) NSString * label;
@property(retain) NSError * lastError;
@property(readonly) long long lastInsertedRowID;
@property(copy) id lockedHandler;
@property(copy) id postFlushHook;
@property(copy) id preFlushHook;
@property(readonly) NSObject<OS_dispatch_queue> * serialQueue;
@property(copy) id sqliteErrorHandler;
@property(getter=isTraced) bool traced;
@property(copy,readonly) NSURL * url;

+ (void)initialize;

- (void).cxx_destruct;
- (void)_batchStartIfNeeded;
- (void)_batchStopIfNeeded;
- (void)_clearStatementCache;
- (bool)_execute:(id)arg1 mustSucceed:(bool)arg2 bindings:(char *)arg3;
- (void)_fireFlushNotifications;
- (id)_newStatementForFormat:(id)arg1 arguments:(char *)arg2;
- (bool)_performWithFlags:(unsigned int)arg1 action:(id)arg2 whenFlushed:(id)arg3;
- (void)_resetState;
- (void)_vacuumIfNeeded;
- (int)_vacuumMode;
- (id)autoRollbackHandler;
- (bool)backupToURL:(id)arg1 progress:(id)arg2;
- (long long)changes;
- (bool)close:(id*)arg1;
- (bool)crashIfUsedAfterClose;
- (struct sqlite3 { }*)dbHandle;
- (void)dealloc;
- (id)description;
- (bool)destroyDatabaseWithError:(id*)arg1;
- (bool)execute:(id)arg1 args:(char *)arg2;
- (bool)execute:(id)arg1;
- (bool)executeRaw:(id)arg1;
- (id)fetch:(id)arg1 args:(char *)arg2;
- (id)fetch:(id)arg1;
- (id)fetchObject:(id)arg1 sql:(id)arg2 args:(char *)arg3;
- (id)fetchObject:(id)arg1 sql:(id)arg2;
- (id)fetchObjectOfClass:(Class)arg1 initializer:(SEL)arg2 sql:(id)arg3 args:(char *)arg4;
- (id)fetchObjectOfClass:(Class)arg1 initializer:(SEL)arg2 sql:(id)arg3;
- (id)fetchObjectOfClass:(Class)arg1 sql:(id)arg2 args:(char *)arg3;
- (id)fetchObjectOfClass:(Class)arg1 sql:(id)arg2;
- (void)flush;
- (void)forceBatchStart;
- (void)groupInBatch:(id)arg1;
- (bool)groupInTransaction:(id)arg1;
- (id)init;
- (bool)isInBatch;
- (bool)isInTransaction;
- (bool)isTraced;
- (id)label;
- (id)lastError;
- (long long)lastInsertedRowID;
- (id)lockedHandler;
- (bool)openAtURL:(id)arg1 sharedCache:(bool)arg2 error:(id*)arg3;
- (bool)openAtURL:(id)arg1 withFlags:(int)arg2 error:(id*)arg3;
- (bool)performWithFlags:(unsigned int)arg1 action:(id)arg2 whenFlushed:(id)arg3;
- (bool)performWithFlags:(unsigned int)arg1 action:(id)arg2;
- (id)postFlushHook;
- (id)preFlushHook;
- (bool)registerFunction:(id)arg1 nArgs:(int)arg2 handler:(id)arg3;
- (id)serialQueue;
- (void)setAutoRollbackHandler:(id)arg1;
- (void)setCrashIfUsedAfterClose:(bool)arg1;
- (void)setLabel:(id)arg1;
- (void)setLastError:(id)arg1;
- (void)setLockedHandler:(id)arg1;
- (void)setPostFlushHook:(id)arg1;
- (void)setPreFlushHook:(id)arg1;
- (void)setSqliteErrorHandler:(id)arg1;
- (void)setTraced:(bool)arg1;
- (bool)setUserVersion:(long long)arg1;
- (bool)setupPragmas;
- (id)sqliteErrorHandler;
- (id)url;
- (void)useBatchingWithDelay:(double)arg1 changeCount:(int)arg2;
- (void)useSerialQueue;
- (id)userVersion;

@end
