/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CloudDocsDaemon.framework/CloudDocsDaemon
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class BRCAccountSession, BRCLocalContainer, BRCThrottle, CKDatabase, NSDate, NSError, NSMutableArray, NSObject<OS_dispatch_group>, NSObject<OS_dispatch_queue>, NSObject<OS_dispatch_source>, NSString;

@interface BRCOperation : NSOperation {
    BRCAccountSession *_accountSession;
    NSObject<OS_dispatch_queue> *_callbackQueue;
    BRCLocalContainer *_container;
    CKDatabase *_database;
    id _finishBlock;
    NSObject<OS_dispatch_group> *_group;
    NSObject<OS_dispatch_queue> *_internalQueue;
    NSError *_lastError;
    NSDate *_lastTryDate;
    id _logSections;
    id _mainBlock;
    NSString *_name;
    NSDate *_nextTryDate;
    BRCThrottle *_operationThrottle;
    NSObject<OS_dispatch_source> *_retryTimer;
    NSDate *_startDate;
    NSMutableArray *_subOperations;
    long long _throttleHash;
    bool_allowsCellularAccess;
    bool_executing;
    bool_finished;
    bool_isDiscretionary;
    bool_usesBackgroundSession;
}

@property(retain) BRCAccountSession * accountSession;
@property bool allowsCellularAccess;
@property(readonly) NSObject<OS_dispatch_queue> * callbackQueue;
@property(retain) BRCLocalContainer * container;
@property CKDatabase * database;
@property(readonly) NSError * error;
@property(getter=isExecuting) bool executing;
@property(copy) id finishBlock;
@property(getter=isFinished) bool finished;
@property bool isDiscretionary;
@property(readonly) id logSections;
@property(copy) id mainBlock;
@property(copy) NSString * name;
@property BRCThrottle * operationThrottle;
@property bool usesBackgroundSession;

- (void).cxx_destruct;
- (void)_completedWithResult:(id)arg1 error:(id)arg2;
- (void)_executeAndBumpThrottle:(id)arg1;
- (bool)_finishIfCancelled;
- (void)_main;
- (void)_scheduleExecutionWithPreviousError:(id)arg1 throttle:(id)arg2;
- (id)accountSession;
- (void)addSubOperation:(id)arg1;
- (bool)allowsCellularAccess;
- (id)callbackQueue;
- (void)cancel;
- (void)completedWithResult:(id)arg1 error:(id)arg2;
- (id)container;
- (id)database;
- (void)dealloc;
- (id)description;
- (id)error;
- (id)finishBlock;
- (bool)finishIfCancelled;
- (void)finishWithResult:(id)arg1 error:(id)arg2;
- (id)init;
- (id)initWithName:(id)arg1 group:(id)arg2;
- (id)initWithName:(id)arg1;
- (bool)isConcurrent;
- (bool)isDiscretionary;
- (bool)isExecuting;
- (bool)isFinished;
- (id)logSections;
- (void)main;
- (id)mainBlock;
- (id)name;
- (id)operationThrottle;
- (void)setAccountSession:(id)arg1;
- (void)setAllowsCellularAccess:(bool)arg1;
- (void)setContainer:(id)arg1;
- (void)setDatabase:(id)arg1;
- (void)setExecuting:(bool)arg1;
- (void)setFinishBlock:(id)arg1;
- (void)setFinished:(bool)arg1;
- (void)setIsDiscretionary:(bool)arg1;
- (void)setMainBlock:(id)arg1;
- (void)setName:(id)arg1;
- (void)setOperationThrottle:(id)arg1;
- (void)setUsesBackgroundSession:(bool)arg1;
- (bool)shouldRetryForError:(id)arg1;
- (void)start;
- (id)state;
- (bool)usesBackgroundSession;

@end
