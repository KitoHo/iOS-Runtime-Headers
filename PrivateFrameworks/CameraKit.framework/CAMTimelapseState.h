/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CameraKit.framework/CameraKit
 */

@class CLLocation, NSDate, NSString;

@interface CAMTimelapseState : NSObject <NSCoding, NSCopying> {
    int _captureOrientation;
    double _captureTimeInterval;
    float _focusLensPosition;
    long long _frameIndexStride;
    NSDate *_lastFrameResponseTime;
    long long _nextFrameIndex;
    CLLocation *_startLocation;
    NSDate *_startTime;
    long long _stopReasons;
    NSDate *_stopTime;
    NSString *_timelapseUUID;
    bool_allFramesWritten;
    bool_usingFrontCamera;
}

@property bool allFramesWritten;
@property int captureOrientation;
@property(readonly) double captureTimeInterval;
@property(readonly) long long connectionMode;
@property float focusLensPosition;
@property(readonly) long long frameIndexStride;
@property(retain) NSDate * lastFrameResponseTime;
@property(readonly) long long nextFrameIndex;
@property(retain) CLLocation * startLocation;
@property(retain) NSDate * startTime;
@property long long stopReasons;
@property(retain) NSDate * stopTime;
@property(retain) NSString * timelapseUUID;
@property(getter=isUsingFrontCamera) bool usingFrontCamera;

+ (double)maxTimeToWaitForWrittenFrameAfterStop;
+ (id)stateWithContentsOfFile:(id)arg1;

- (void).cxx_destruct;
- (bool)addStopReasons:(long long)arg1 stopTime:(id)arg2;
- (bool)allFramesWritten;
- (bool)canContinueCapture;
- (int)captureOrientation;
- (double)captureTimeInterval;
- (long long)connectionMode;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)filePathForNextFrameIndex;
- (float)focusLensPosition;
- (void)forceCompleted;
- (long long)frameIndexStride;
- (bool)incrementFrameIndex;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToState:(id)arg1;
- (bool)isReadyForWritingMovie;
- (bool)isUsingFrontCamera;
- (id)lastFrameResponseTime;
- (bool)mergeSecondaryState:(id)arg1;
- (long long)nextFrameIndex;
- (void)setAllFramesWritten:(bool)arg1;
- (void)setCaptureOrientation:(int)arg1;
- (void)setFocusLensPosition:(float)arg1;
- (void)setLastFrameResponseTime:(id)arg1;
- (void)setStartLocation:(id)arg1;
- (void)setStartTime:(id)arg1;
- (void)setStopReasons:(long long)arg1;
- (void)setStopTime:(id)arg1;
- (void)setTimelapseUUID:(id)arg1;
- (void)setUsingFrontCamera:(bool)arg1;
- (id)startLocation;
- (id)startTime;
- (long long)stopReasons;
- (id)stopTime;
- (id)timelapseUUID;
- (bool)writeToFile:(id)arg1 createDirectoryIfNeeded:(bool)arg2;

@end
