/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iTunesStoreUI.framework/iTunesStoreUI
 */

@class NSArray, NSDate, NSDictionary, NSNumber, NSString, NSURL, SSItemImageCollection, SSItemOffer, SUItem, SUItemContentRating, SUItemLink, SUItemReviewStatistics;

@interface SUItem : NSObject <NSCopying> {
    NSString *_artistName;
    NSString *_bundleIdentifier;
    NSString *_bundleVersion;
    NSString *_collectionName;
    SUItem *_containerItem;
    NSString *_containerName;
    SUItemContentRating *_contentRating;
    NSString *_copyrightString;
    SSItemOffer *_defaultStoreOffer;
    NSDictionary *_dictionary;
    NSString *_disclaimerString;
    NSString *_genreName;
    NSString *_humanReadableDescription;
    BOOL _isInstalled;
    long long _itemDisplayType;
    unsigned long long _itemIdentifier;
    SSItemImageCollection *_itemImageCollection;
    NSArray *_itemLinks;
    NSString *_itemMediaKind;
    long long _itemType;
    NSDate *_releaseDate;
    NSString *_releaseDateString;
    long long _representedItemCount;
    SUItemReviewStatistics *_reviewStatistics;
    NSString *_secondaryTitle;
    NSString *_softwareType;
    NSArray *_storeOffers;
    NSDictionary *_tellAFriendDictionary;
    NSString *_title;
    NSDictionary *_tweetDictionary;
    NSString *_unmodifiedTitle;
    NSNumber *_versionIdentifier;
    NSArray *_versionOrdering;
    bool_gameCenterEnabled;
}

@property(copy) NSString * artistName;
@property(copy) NSString * bundleIdentifier;
@property(copy) NSString * bundleVersion;
@property(copy) NSString * collectionName;
@property(retain) SUItem * containerItem;
@property(copy) NSString * containerName;
@property(copy) SUItemContentRating * contentRating;
@property(copy) NSString * copyrightString;
@property(readonly) SSItemOffer * defaultStoreOffer;
@property(copy) NSString * disclaimerString;
@property(getter=isDownloadable,readonly) bool downloadable;
@property(readonly) SUItemLink * externalArtistPageLink;
@property(getter=isGameCenterEnabled) bool gameCenterEnabled;
@property(copy) NSString * genreName;
@property(copy) NSString * humanReadableDescription;
@property(getter=isInstalled,readonly) bool installed;
@property(readonly) NSDictionary * itemDictionary;
@property long long itemDisplayType;
@property unsigned long long itemIdentifier;
@property(copy) SSItemImageCollection * itemImageCollection;
@property(copy) NSArray * itemLinks;
@property(copy) NSString * itemMediaKind;
@property long long itemType;
@property(readonly) NSString * itemTypeString;
@property(retain) NSDate * releaseDate;
@property long long representedItemCount;
@property(copy) SUItemReviewStatistics * reviewStatistics;
@property(copy) NSString * secondaryTitle;
@property(copy) NSString * softwareType;
@property(copy) NSArray * storeOffers;
@property(readonly) NSString * tellAFriendBody;
@property(readonly) NSString * tellAFriendBodyMIMEType;
@property(readonly) NSURL * tellAFriendBodyURL;
@property(readonly) NSString * tellAFriendSubject;
@property(copy) NSString * title;
@property(readonly) NSString * tweetInitialText;
@property(readonly) NSURL * tweetURL;
@property(copy) NSString * unmodifiedTitle;
@property(retain) NSNumber * versionIdentifier;
@property(copy) NSArray * versionOrdering;

- (long long)_linkTargetForTargetString:(id)arg1 typeString:(id)arg2;
- (long long)_linkTypeForString:(id)arg1;
- (id)_newItemLinkWithType:(long long)arg1 URLKey:(id)arg2 titleKey:(id)arg3;
- (id)_newItemLinkWithType:(long long)arg1 dictionary:(id)arg2;
- (id)_newPrimaryItemLink;
- (void)_reloadDefaultStoreOffer;
- (void)_reloadImagesAndLinksFromSquishes:(id)arg1;
- (void)_reloadItemImages;
- (void)_reloadItemLinks;
- (void)_reloadProperties;
- (void)_reloadStoreOffers;
- (id)_squishImageForSquishDictionary:(id)arg1;
- (id)_valueForFirstAvailableKey:(id)arg1;
- (id)artistName;
- (bool)boolValueForProperty:(id)arg1;
- (id)bundleIdentifier;
- (id)bundleVersion;
- (id)collectionName;
- (id)containerItem;
- (id)containerName;
- (id)contentRating;
- (id)copyReleaseDateStringWithStyle:(long long)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)copyrightString;
- (id)dateValueForProperty:(id)arg1;
- (void)dealloc;
- (id)defaultStoreOffer;
- (id)disclaimerString;
- (id)externalArtistPageLink;
- (id)firstItemLinkForType:(long long)arg1;
- (id)genreName;
- (id)humanReadableDescription;
- (id)initWithDictionary:(id)arg1;
- (long long)integerValueForProperty:(id)arg1;
- (bool)isDisplayable:(id*)arg1;
- (bool)isDownloadable;
- (bool)isGameCenterEnabled;
- (bool)isInstalled;
- (id)itemDictionary;
- (long long)itemDisplayType;
- (unsigned long long)itemIdentifier;
- (id)itemImageCollection;
- (id)itemLinks;
- (id)itemLinksForType:(long long)arg1;
- (id)itemMediaKind;
- (long long)itemType;
- (id)itemTypeString;
- (id)relatedItemsForRelationType:(id)arg1;
- (id)releaseDate;
- (long long)representedItemCount;
- (id)reviewStatistics;
- (id)secondaryTitle;
- (void)setArtistName:(id)arg1;
- (void)setBundleIdentifier:(id)arg1;
- (void)setBundleVersion:(id)arg1;
- (void)setCollectionName:(id)arg1;
- (void)setContainerItem:(id)arg1;
- (void)setContainerName:(id)arg1;
- (void)setContentRating:(id)arg1;
- (void)setCopyrightString:(id)arg1;
- (void)setDisclaimerString:(id)arg1;
- (void)setGameCenterEnabled:(bool)arg1;
- (void)setGenreName:(id)arg1;
- (void)setHumanReadableDescription:(id)arg1;
- (void)setItemDisplayType:(long long)arg1;
- (void)setItemIdentifier:(unsigned long long)arg1;
- (void)setItemImageCollection:(id)arg1;
- (void)setItemLinks:(id)arg1;
- (void)setItemMediaKind:(id)arg1;
- (void)setItemType:(long long)arg1;
- (void)setReleaseDate:(id)arg1;
- (void)setRepresentedItemCount:(long long)arg1;
- (void)setReviewStatistics:(id)arg1;
- (void)setSecondaryTitle:(id)arg1;
- (void)setSoftwareType:(id)arg1;
- (void)setStoreOffers:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)setUnmodifiedTitle:(id)arg1;
- (void)setVersionIdentifier:(id)arg1;
- (void)setVersionOrdering:(id)arg1;
- (id)softwareType;
- (id)storeOfferForIdentifier:(id)arg1;
- (id)storeOffers;
- (id)stringValueForProperty:(id)arg1;
- (id)tellAFriendBody;
- (id)tellAFriendBodyMIMEType;
- (id)tellAFriendBodyURL;
- (id)tellAFriendSubject;
- (id)title;
- (id)tweetInitialText;
- (id)tweetURL;
- (id)unmodifiedTitle;
- (id)valueForProperty:(id)arg1;
- (id)versionIdentifier;
- (id)versionOrdering;

@end
