/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer
 */

@class <PBRequesterDelegate>, NSArray, NSDictionary, NSMutableArray, NSMutableData, NSMutableDictionary, NSRunLoop, NSString, NSThread, NSURL, NSURLConnection, PBDataReader;

@interface PBRequester : NSObject <NSURLConnectionDelegate> {
    struct { 
        unsigned int ignoresResponse : 1; 
        unsigned int loading : 1; 
        unsigned int needsCancel : 1; 
        unsigned int responseStatusSet : 1; 
        unsigned int parsedResponseHeader : 1; 
        unsigned int delegateDidReceiveResponse : 1; 
        unsigned int delegateDidFinish : 1; 
        unsigned int delegateDidCancel : 1; 
        unsigned int delegateDidFailWithError : 1; 
        unsigned int paused : 1; 
        unsigned int resuming : 1; 
    NSURL *_URL;
    NSArray *_clientCertificates;
    NSURLConnection *_connection;
    NSDictionary *_connectionProperties;
    NSRunLoop *_connectionRunLoop;
    NSMutableData *_data;
    PBDataReader *_dataReader;
    <PBRequesterDelegate> *_delegate;
    unsigned long long _downloadPayloadSize;
    } _flags;
    NSMutableDictionary *_httpRequestHeaders;
    NSDictionary *_httpResponseHeaders;
    NSMutableArray *_internalRequests;
    NSMutableArray *_internalResponses;
    unsigned long long _lastGoodDataOffset;
    NSString *_logRequestToFile;
    NSString *_logResponseToFile;
    NSMutableArray *_requests;
    long long _responseStatusCode;
    NSMutableArray *_responses;
    NSThread *_startThread;
    unsigned long long _timeRequestSent;
    unsigned long long _timeResponseReceived;
    double _timeoutSeconds;
    struct __CFRunLoopTimer { } *_timeoutTimer;
    unsigned long long _uploadPayloadSize;
    bool_didNotifyRequestCompleted;
    bool_shouldHandleCookies;
}

@property(retain) NSURL * URL;
@property(retain) NSArray * clientCertificates;
@property(retain) NSURLConnection * connection;
@property(retain) NSRunLoop * connectionRunLoop;
@property(copy,readonly) NSString * debugDescription;
@property <PBRequesterDelegate> * delegate;
@property(copy,readonly) NSString * description;
@property(readonly) unsigned long long downloadPayloadSize;
@property(readonly) unsigned long long hash;
@property(copy) NSDictionary * httpRequestHeaders;
@property(retain) NSDictionary * httpResponseHeaders;
@property bool ignoresResponse;
@property(retain) NSString * logRequestToFile;
@property(retain) NSString * logResponseToFile;
@property bool needsCancel;
@property(readonly) unsigned long long requestResponseTime;
@property(readonly) NSArray * requests;
@property bool shouldHandleCookies;
@property(readonly) Class superclass;
@property double timeoutSeconds;
@property(readonly) unsigned long long uploadPayloadSize;

+ (bool)usesEncodedMessages;

- (id)URL;
- (id)_applicationID;
- (void)_cancelNoNotify;
- (void)_cancelWithErrorDomain:(id)arg1 errorCode:(long long)arg2 userInfo:(id)arg3;
- (void)_cleanup;
- (id)_connectionRunLoop;
- (void)_failWithError:(id)arg1;
- (void)_failWithErrorDomain:(id)arg1 errorCode:(long long)arg2 userInfo:(id)arg3;
- (id)_languageLocale;
- (void)_logErrorIfNecessary:(id)arg1;
- (void)_logRequestsIfNecessary:(id)arg1;
- (void)_logResponsesIfNecessary:(id)arg1;
- (id)_osVersion;
- (void)_removeTimeoutTimer;
- (void)_resetTimeoutTimer;
- (void)_scheduleThrottlingError;
- (bool)_sendPayload:(id)arg1 error:(id*)arg2;
- (void)_serializePayload:(id)arg1;
- (void)_start;
- (void)_startTimeoutTimer;
- (void)_timeoutTimerFired;
- (bool)_tryParseData;
- (void)addInternalRequest:(id)arg1;
- (void)addRequest:(id)arg1;
- (void)cancel;
- (void)cancelWithErrorCode:(long long)arg1;
- (void)clearRequests;
- (id)clientCertificates;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;
- (id)connection:(id)arg1 willSendRequestForEstablishedConnection:(id)arg2 properties:(id)arg3;
- (id)connection;
- (void)connectionDidFinishLoading:(id)arg1;
- (id)connectionRunLoop;
- (void)dealloc;
- (id)decodeResponseData:(id)arg1;
- (id)delegate;
- (unsigned long long)downloadPayloadSize;
- (void)encodeRequestData:(id)arg1 startRequestCallback:(id)arg2;
- (void)handleResponse:(id)arg1 forInternalRequest:(id)arg2;
- (id)httpRequestHeaders;
- (id)httpResponseHeaders;
- (bool)ignoresResponse;
- (id)initWithURL:(id)arg1 andDelegate:(id)arg2;
- (id)internalRequests;
- (bool)isPaused;
- (id)logRequestToFile;
- (id)logResponseToFile;
- (bool)needsCancel;
- (struct _CFURLRequest { }*)newCFMutableURLRequestWithURL:(id)arg1;
- (id)newConnectionWithCFURLRequest:(struct _CFURLRequest { }*)arg1 delegate:(id)arg2 connectionProperties:(id)arg3;
- (id)newConnectionWithCFURLRequest:(struct _CFURLRequest { }*)arg1 delegate:(id)arg2;
- (void)pause;
- (bool)readResponsePreamble:(id)arg1;
- (id)requestPreamble;
- (unsigned long long)requestResponseTime;
- (id)requests;
- (id)responseForInternalRequest:(id)arg1;
- (id)responseForRequest:(id)arg1;
- (void)resume;
- (void)setClientCertificates:(id)arg1;
- (void)setConnection:(id)arg1;
- (void)setConnectionRunLoop:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setHttpRequestHeader:(id)arg1 forKey:(id)arg2;
- (void)setHttpRequestHeaders:(id)arg1;
- (void)setHttpResponseHeaders:(id)arg1;
- (void)setIgnoresResponse:(bool)arg1;
- (void)setLogRequestToFile:(id)arg1;
- (void)setLogResponseToFile:(id)arg1;
- (void)setNeedsCancel:(bool)arg1;
- (void)setNeedsCancel;
- (void)setShouldHandleCookies:(bool)arg1;
- (void)setTimeoutSeconds:(double)arg1;
- (void)setURL:(id)arg1;
- (bool)shouldHandleCookies;
- (void)start;
- (void)startWithConnectionProperties:(id)arg1;
- (double)timeoutSeconds;
- (id)tryReadResponseData:(id)arg1 forRequest:(id)arg2 forResponseClass:(Class)arg3;
- (unsigned long long)uploadPayloadSize;
- (void)writeRequest:(id)arg1 into:(id)arg2;

@end
