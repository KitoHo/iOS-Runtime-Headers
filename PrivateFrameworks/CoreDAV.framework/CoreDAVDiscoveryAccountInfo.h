/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreDAV.framework/CoreDAV
 */

@class <CoreDAVAccountInfoProvider>, NSData, NSDictionary, NSError, NSSet, NSString, NSURL;

@interface CoreDAVDiscoveryAccountInfo : NSObject <CoreDAVAccountInfoProvider> {
    NSString *_accountID;
    <CoreDAVAccountInfoProvider> *_backingAccountInfoProvider;
    NSError *_error;
    NSString *_host;
    NSData *_identityPersist;
    NSString *_password;
    long long _port;
    NSURL *_principalURL;
    NSString *_scheme;
    NSSet *_serverComplianceClasses;
    NSDictionary *_serverHeaders;
    NSString *_serverRoot;
    NSString *_user;
    NSString *_userAgentHeader;
    bool_shouldFailAllTasks;
    bool_started;
    bool_success;
}

@property(retain) NSString * accountID;
@property(retain) <CoreDAVAccountInfoProvider> * backingAccountInfoProvider;
@property(copy,readonly) NSString * debugDescription;
@property(copy,readonly) NSString * description;
@property(retain) NSError * error;
@property(readonly) unsigned long long hash;
@property(retain) NSString * host;
@property(retain) NSData * identityPersist;
@property(retain) NSString * password;
@property long long port;
@property(retain) NSURL * principalURL;
@property(retain) NSString * scheme;
@property(retain) NSSet * serverComplianceClasses;
@property(retain) NSDictionary * serverHeaders;
@property(retain) NSString * serverRoot;
@property bool shouldFailAllTasks;
@property bool started;
@property bool success;
@property(readonly) Class superclass;
@property(retain) NSString * user;
@property(retain) NSString * userAgentHeader;

- (id)accountID;
- (id)additionalHeaderValues;
- (id)backingAccountInfoProvider;
- (id)clientToken;
- (void)clientTokenRequestedByServer;
- (struct __CFURLStorageSession { }*)copyStorageSession;
- (void)dealloc;
- (id)description;
- (id)error;
- (bool)handleAuthenticateAgainstProtectionSpace:(id)arg1 withConnection:(id)arg2;
- (bool)handleAuthenticateAgainstProtectionSpace:(id)arg1;
- (bool)handleCertificateError:(id)arg1;
- (bool)handleShouldUseCredentialStorage;
- (bool)handleTrustChallenge:(id)arg1 withConnection:(id)arg2;
- (bool)handleTrustChallenge:(id)arg1;
- (id)host;
- (id)identityPersist;
- (id)initWithAccountInfoProvider:(id)arg1;
- (id)oauthInfoProvider;
- (id)password;
- (long long)port;
- (id)principalURL;
- (void)promptUserForNewCoreDAVPasswordWithCompletionBlock:(id)arg1;
- (id)scheme;
- (id)serverComplianceClasses;
- (id)serverHeaders;
- (id)serverRoot;
- (void)setAccountID:(id)arg1;
- (void)setBackingAccountInfoProvider:(id)arg1;
- (void)setError:(id)arg1;
- (void)setHost:(id)arg1;
- (void)setIdentityPersist:(id)arg1;
- (void)setPassword:(id)arg1;
- (void)setPort:(long long)arg1;
- (void)setPrincipalURL:(id)arg1;
- (void)setScheme:(id)arg1;
- (void)setServerComplianceClasses:(id)arg1;
- (void)setServerHeaders:(id)arg1;
- (void)setServerRoot:(id)arg1;
- (void)setShouldFailAllTasks:(bool)arg1;
- (void)setStarted:(bool)arg1;
- (void)setSuccess:(bool)arg1;
- (void)setUser:(id)arg1;
- (void)setUserAgentHeader:(id)arg1;
- (bool)shouldFailAllTasks;
- (bool)shouldHandleHTTPCookiesForURL:(id)arg1;
- (bool)shouldRetryUnauthorizedConnection:(id)arg1;
- (bool)shouldSendClientInfoHeaderForURL:(id)arg1;
- (bool)shouldTurnModalOnBadPassword;
- (bool)shouldUseOpportunisticSockets;
- (bool)started;
- (bool)success;
- (id)url;
- (id)user;
- (id)userAgentHeader;

@end
