/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/RadioUI.framework/RadioUI
 */

@class MPAVRoute, MPAVRoutingController, MPUReportingController, MPUserNotification, NSDate, NSObject<OS_dispatch_source>, NSString, RUPlaybackTimeoutInfoController, RURadioAVPlayer, RadioStation;

@interface RURadioPlaybackCoordinator : NSObject <MPAVRoutingControllerDelegate> {
    RadioStation *_currentStation;
    int _lockStateNotifyToken;
    void *_mediaRemoteCommandObserver;
    NSObject<OS_dispatch_source> *_pauseTimeoutTimerSource;
    MPAVRoute *_pickedRoute;
    RadioStation *_playbackNotificationStation;
    NSDate *_playbackTimeoutBeginDate;
    double _playbackTimeoutDuration;
    RUPlaybackTimeoutInfoController *_playbackTimeoutInfoController;
    MPUserNotification *_playbackTimeoutNotification;
    NSObject<OS_dispatch_source> *_playbackTimeoutNotificationExpirationTimerSource;
    RURadioAVPlayer *_player;
    NSObject<OS_dispatch_source> *_presentPlaybackTimeoutTimerSource;
    MPUReportingController *_reportingController;
    MPAVRoutingController *_routingController;
    bool_deviceIsDocked;
    bool_deviceIsLocked;
    bool_didPresentNotificationForCurrentItem;
    bool_lockStateNotifyTokenIsValid;
    bool_playbackIsPaused;
    bool_playbackTimeoutNotificationDidExpire;
    bool_wasUsingBackgroundNetwork;
}

@property(retain) RadioStation * currentStation;
@property(copy,readonly) NSString * debugDescription;
@property(copy,readonly) NSString * description;
@property(readonly) unsigned long long hash;
@property(readonly) RURadioAVPlayer * player;
@property(retain) MPUReportingController * reportingController;
@property(readonly) Class superclass;

- (void).cxx_destruct;
- (void)_applicationWillEnterForegroundNotification:(id)arg1;
- (void)_cancelPauseTimeoutTimer;
- (void)_cancelPlaybackTimeoutNotification;
- (void)_cancelPlaybackTimeoutNotificationExpirationTimer;
- (void)_cancelPresentPlaybackTimeoutTimer;
- (void)_dismissExpiredPlaybackTimeoutNotificationForced:(bool)arg1;
- (void)_effectiveVolumeDidChangeNotification:(id)arg1;
- (void)_fullMuteDidChangeNotification:(id)arg1;
- (bool)_isPauseTimeoutActive;
- (bool)_isRadioRelevantItem:(id)arg1;
- (void)_itemDurationDidBecomeAvailableNotification:(id)arg1;
- (void)_itemIsBannedDidChangeNotification:(id)arg1;
- (void)_itemIsInWishListDidChangeNotification:(id)arg1;
- (void)_itemIsLikedDidChangeNotification:(id)arg1;
- (void)_itemWillChangeNotification:(id)arg1;
- (void)_playbackContentsDidChangeNotification:(id)arg1;
- (void)_playbackStateDidChangeNotification:(id)arg1;
- (void)_presentPlaybackTimeoutNotificationForCurrentItemIfNeeded;
- (void)_radioModelDidChangeNotification:(id)arg1;
- (void)_receivedUserNotificationResponseForUserNotification:(struct __CFUserNotification { }*)arg1 withResponseFlags:(unsigned long long)arg2;
- (void)_resetPlaybackTimeoutInformation;
- (void)_schedulePlaybackTimeoutNotificationExpirationTimerIfNeeded;
- (void)_setupPlayerWithRadioPlaybackContext:(id)arg1;
- (void)_updatePlaybackTimerForDeviceStateChange;
- (id)currentStation;
- (void)dealloc;
- (id)init;
- (id)initWithPlayer:(id)arg1;
- (id)player;
- (id)reportingController;
- (void)routingControllerAvailableRoutesDidChange:(id)arg1;
- (void)setCurrentStation:(id)arg1;
- (void)setReportingController:(id)arg1;
- (void)setupPlaybackQueueWithPlaybackContext:(id)arg1 completionHandler:(id)arg2;

@end
